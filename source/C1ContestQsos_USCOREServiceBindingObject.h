/* C1ContestQsos_USCOREServiceBindingObject.h
   Generated by gSOAP 2.7.15 from ContestQsos.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef C1ContestQsos_USCOREServiceBindingObject_H
#define C1ContestQsos_USCOREServiceBindingObject_H
#include "C1H.h"

/******************************************************************************\
 *                                                                            *
 * Service Object                                                             *
 *                                                                            *
\******************************************************************************/

extern SOAP_NMAC struct Namespace C1_namespaces[];

namespace C1 {
class ContestQsos_USCOREServiceBindingService : public soap
{    public:
	ContestQsos_USCOREServiceBindingService()
	{ this->namespaces = C1_namespaces; };
	virtual ~ContestQsos_USCOREServiceBindingService() { };
	/// Bind service to port (returns master socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET bind(const char *host, int port, int backlog) { return soap_bind(this, host, port, backlog); };
	/// Accept next request (returns socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET accept() { return soap_accept(this); };
	/// Serve this request (returns error code or SOAP_OK)
	virtual	int serve() { return C1_serve(this); };
};

/******************************************************************************\
 *                                                                            *
 * Service Operations (you should define these globally)                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 contest3__GetSessionId(struct soap*, std::string &response);

SOAP_FMAC5 int SOAP_FMAC6 contest3__AddAndGetLogSummary(struct soap*, std::string _SessionId, contest2__ArrayOfQso *_QsoAddArray, int _OldState, int _MaxRequested, struct contest3__AddAndGetLogSummaryResponse &_param_1);

SOAP_FMAC5 int SOAP_FMAC6 contest3__addAndGetQsos(struct soap*, std::string _SessionId, contest2__ArrayOfQso *_QsoAddArray, int _OldState, int _MaxRequested, struct contest3__addAndGetQsosResponse &_param_2);

SOAP_FMAC5 int SOAP_FMAC6 contest3__getQsosByKeyArray(struct soap*, std::string _SessionId, contest2__ArrayOfstring *_QsoKeyArray, struct contest3__getQsosByKeyArrayResponse &_param_3);

SOAP_FMAC5 int SOAP_FMAC6 contest3__ColumnNamesToIndices(struct soap*, std::string _SessionId, contest2__ArrayOfstring *_ColumnNames, struct contest3__ColumnNamesToIndicesResponse &_param_4);

SOAP_FMAC5 int SOAP_FMAC6 contest3__ExchangeFrequencies(struct soap*, contest2__ArrayOfRigFrequency *_IncomingFreqs, struct contest3__ExchangeFrequenciesResponse &_param_5);

} // namespace C1


#endif
