/* ContestQsos.h
   Generated by wsdl2h 1.2.15 from ContestQsos.wsdl and typemap.dat
   2011-10-17 00:47:48 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2009 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Build Notes

NOTE:

 - Run soapcpp2 on ContestQsos.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
GPL or Genivia's license for commercial use.

GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org
--------------------------------------------------------------------------------
A commercial use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://www.Contestqsos.com/qso                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

contest1 = "http://www.Contestqsos.com/qso"
contest2 = "urn:xml-soap-Contest"

*/

#define SOAP_NAMESPACE_OF_contest2	"urn:xml-soap-Contest"
//gsoap contest2 schema namespace:	urn:xml-soap-Contest
//gsoap contest2 schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class contest2__ArrayOfstring.
class contest2__ArrayOfstring;

//  Forward declaration of class contest2__ArrayOfint.
class contest2__ArrayOfint;

//  Forward declaration of class contest2__Qso.
class contest2__Qso;

//  Forward declaration of class contest2__ArrayOfQso.
class contest2__ArrayOfQso;

//  Forward declaration of class contest2__QsoUpdate.
class contest2__QsoUpdate;

//  Forward declaration of class contest2__QsoIdVersion.
class contest2__QsoIdVersion;

//  Forward declaration of class contest2__ArrayOfQsoIdVersion.
class contest2__ArrayOfQsoIdVersion;

//  Forward declaration of class contest2__LogSummary.
class contest2__LogSummary;

//  Forward declaration of class contest2__RigFrequency.
class contest2__RigFrequency;

//  Forward declaration of class contest2__ArrayOfRigFrequency.
class contest2__ArrayOfRigFrequency;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:xml-soap-Contest                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   urn:xml-soap-Contest                                                     *
 *                                                                            *
\******************************************************************************/


/// "urn:xml-soap-Contest":ArrayOfstring is a complexType.
class contest2__ArrayOfstring
{ public:
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > str_USCOREel                   0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:xml-soap-Contest":ArrayOfint is a complexType.
class contest2__ArrayOfint
{ public:
/// Vector of int with length 0..unbounded
    std::vector<int                    > int_USCOREel                   0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:xml-soap-Contest":Qso is a complexType.
class contest2__Qso
{ public:
/// Element time64H of type xs:int.
    int                                  time64H                        1;	///< Required element.
/// Element time64L of type xs:int.
    int                                  time64L                        1;	///< Required element.
/// Element xmitFreq of type xs:double.
    double                               xmitFreq                       1;	///< Required element.
/// Element recvFreq of type xs:double.
    double                               recvFreq                       1;	///< Required element.
/// Element band of type xs:int.
    int                                  band                           1;	///< Required element.
/// Element station of type xs:string.
    std::string                          station                        1;	///< Required element.
/// Element mode of type xs:int.
    int                                  mode                           1;	///< Required element.
/// Element dupe of type xs:int.
    int                                  dupe                           1;	///< Required element.
/// Element serial of type xs:int.
    int                                  serial                         1;	///< Required element.
/// Element qsoparts of type "urn:xml-soap-Contest":ArrayOfstring.
    contest2__ArrayOfstring*             qsoparts                       1;	///< Required element.
/// Element version of type xs:int.
    int                                  version                        1;	///< Required element.
/// Element idKey of type xs:string.
    std::string                          idKey                          1;	///< Required element.
/// Element updatedBy of type xs:string.
    std::string                          updatedBy                      1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:xml-soap-Contest":ArrayOfQso is a complexType.
class contest2__ArrayOfQso
{ public:
/// Vector of contest2__Qso* with length 0..unbounded
    std::vector<contest2__Qso*         > qso_USCOREel                   0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:xml-soap-Contest":QsoUpdate is a complexType.
class contest2__QsoUpdate
{ public:
/// Element qsoArray of type "urn:xml-soap-Contest":ArrayOfQso.
    contest2__ArrayOfQso*                qsoArray                       1;	///< Required element.
/// Element logState of type xs:int.
    int                                  logState                       1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:xml-soap-Contest":QsoIdVersion is a complexType.
class contest2__QsoIdVersion
{ public:
/// Element version of type xs:int.
    int                                  version                        1;	///< Required element.
/// Element updatedBy of type xs:string.
    std::string                          updatedBy                      1;	///< Required element.
/// Element id of type xs:string.
    std::string                          id                             1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:xml-soap-Contest":ArrayOfQsoIdVersion is a complexType.
class contest2__ArrayOfQsoIdVersion
{ public:
/// Vector of contest2__QsoIdVersion* with length 0..unbounded
    std::vector<contest2__QsoIdVersion*> id_USCOREel                    0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:xml-soap-Contest":LogSummary is a complexType.
class contest2__LogSummary
{ public:
/// Element logState of type xs:int.
    int                                  logState                       1;	///< Required element.
/// Element logSummaryIds of type "urn:xml-soap-Contest":ArrayOfQsoIdVersion.
    contest2__ArrayOfQsoIdVersion*       logSummaryIds                  1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:xml-soap-Contest":RigFrequency is a complexType.
class contest2__RigFrequency
{ public:
/// Element station of type xs:string.
    std::string                          station                        1;	///< Required element.
/// Element networkLetter of type xs:int.
    int                                  networkLetter                  1;	///< Required element.
/// Element label of type xs:string.
    std::string                          label                          1;	///< Required element.
/// Element rigNumber of type xs:int.
    int                                  rigNumber                      1;	///< Required element.
/// Element xmitFreq of type xs:double.
    double                               xmitFreq                       1;	///< Required element.
/// Element recvFreq of type xs:double.
    double                               recvFreq                       1;	///< Required element.
/// Element mode of type xs:int.
    int                                  mode                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:xml-soap-Contest":ArrayOfRigFrequency is a complexType.
class contest2__ArrayOfRigFrequency
{ public:
/// Vector of contest2__RigFrequency* with length 0..unbounded
    std::vector<contest2__RigFrequency*> rf_USCOREel                    0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   urn:xml-soap-Contest                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   urn:xml-soap-Contest                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap contest3 service name:	ContestQsos_USCOREServiceBinding 
//gsoap contest3 service type:	ContestQsos_USCOREPort 
//gsoap contest3 service port:	http://localhost:8001 
//gsoap contest3 service namespace:	urn:ContestQsos 
//gsoap contest3 service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage ContestQsos_Service Definitions

@section ContestQsos_USCOREService_bindings Service Bindings
  - @ref ContestQsos_USCOREServiceBinding

@section ContestQsos_USCOREService_more More Information
- @ref page_notes "Notes"
- @ref page_XMLDataBinding "XML Data Binding"
- @ref SOAP_ENV__Header "SOAP Header Content"
- @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page ContestQsos_USCOREServiceBinding Binding "ContestQsos_USCOREServiceBinding"

@section ContestQsos_USCOREService_service Service Documentation "ContestQsos_Service"
Contest QSO Service

@section ContestQsos_USCOREServiceBinding_operations Operations of Binding  "ContestQsos_USCOREServiceBinding"
  - @ref contest3__GetSessionId
  - @ref contest3__AddAndGetLogSummary
  - @ref contest3__addAndGetQsos
  - @ref contest3__getQsosByKeyArray
  - @ref contest3__ColumnNamesToIndices
  - @ref contest3__ExchangeFrequencies

@section ContestQsos_USCOREServiceBinding_ports Endpoints of Binding  "ContestQsos_USCOREServiceBinding"
  - http://localhost:8001

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   ContestQsos_USCOREServiceBinding                                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   contest3__GetSessionId                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "contest3__GetSessionId" of service binding "ContestQsos_USCOREServiceBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_contest3__GetSessionId(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    std::string                        &response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int contest3__GetSessionId(
    struct soap *soap,
    // request parameters:
    // response parameters:
    std::string                        &response
  );
@endcode

C++ proxy class (defined in soapContestQsos_USCOREServiceBindingProxy.h):
@code
  class ContestQsos_USCOREServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapContestQsos_USCOREServiceBindingService.h):
@code
  class ContestQsos_USCOREServiceBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap contest3 service method-style:	GetSessionId rpc
//gsoap contest3 service method-encoding:	GetSessionId http://schemas.xmlsoap.org/soap/encoding/
//gsoap contest3 service method-action:	GetSessionId ""
int contest3__GetSessionId(
    std::string                        &response	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   contest3__AddAndGetLogSummary                                            *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "contest3__AddAndGetLogSummaryResponse" of service binding "ContestQsos_USCOREServiceBinding" operation "contest3__AddAndGetLogSummary"
struct contest3__AddAndGetLogSummaryResponse
{
    contest2__LogSummary*               _response;
};

/// Operation "contest3__AddAndGetLogSummary" of service binding "ContestQsos_USCOREServiceBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_contest3__AddAndGetLogSummary(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         SessionId,
    contest2__ArrayOfQso*               QsoAddArray,
    int                                 OldState,
    int                                 MaxRequested,
    // response parameters:
    struct contest3__AddAndGetLogSummaryResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int contest3__AddAndGetLogSummary(
    struct soap *soap,
    // request parameters:
    std::string                         SessionId,
    contest2__ArrayOfQso*               QsoAddArray,
    int                                 OldState,
    int                                 MaxRequested,
    // response parameters:
    struct contest3__AddAndGetLogSummaryResponse&
  );
@endcode

C++ proxy class (defined in soapContestQsos_USCOREServiceBindingProxy.h):
@code
  class ContestQsos_USCOREServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapContestQsos_USCOREServiceBindingService.h):
@code
  class ContestQsos_USCOREServiceBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap contest3 service method-style:	AddAndGetLogSummary rpc
//gsoap contest3 service method-encoding:	AddAndGetLogSummary http://schemas.xmlsoap.org/soap/encoding/
//gsoap contest3 service method-action:	AddAndGetLogSummary ""
int contest3__AddAndGetLogSummary(
    std::string                         _SessionId,	///< Request parameter
    contest2__ArrayOfQso*               _QsoAddArray,	///< Request parameter
    int                                 _OldState,	///< Request parameter
    int                                 _MaxRequested,	///< Request parameter
    struct contest3__AddAndGetLogSummaryResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   contest3__addAndGetQsos                                                  *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "contest3__addAndGetQsosResponse" of service binding "ContestQsos_USCOREServiceBinding" operation "contest3__addAndGetQsos"
struct contest3__addAndGetQsosResponse
{
    contest2__QsoUpdate*                _response;
};

/// Operation "contest3__addAndGetQsos" of service binding "ContestQsos_USCOREServiceBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_contest3__addAndGetQsos(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         SessionId,
    contest2__ArrayOfQso*               QsoAddArray,
    int                                 OldState,
    int                                 MaxRequested,
    // response parameters:
    struct contest3__addAndGetQsosResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int contest3__addAndGetQsos(
    struct soap *soap,
    // request parameters:
    std::string                         SessionId,
    contest2__ArrayOfQso*               QsoAddArray,
    int                                 OldState,
    int                                 MaxRequested,
    // response parameters:
    struct contest3__addAndGetQsosResponse&
  );
@endcode

C++ proxy class (defined in soapContestQsos_USCOREServiceBindingProxy.h):
@code
  class ContestQsos_USCOREServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapContestQsos_USCOREServiceBindingService.h):
@code
  class ContestQsos_USCOREServiceBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap contest3 service method-style:	addAndGetQsos rpc
//gsoap contest3 service method-encoding:	addAndGetQsos http://schemas.xmlsoap.org/soap/encoding/
//gsoap contest3 service method-action:	addAndGetQsos ""
int contest3__addAndGetQsos(
    std::string                         _SessionId,	///< Request parameter
    contest2__ArrayOfQso*               _QsoAddArray,	///< Request parameter
    int                                 _OldState,	///< Request parameter
    int                                 _MaxRequested,	///< Request parameter
    struct contest3__addAndGetQsosResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   contest3__getQsosByKeyArray                                              *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "contest3__getQsosByKeyArrayResponse" of service binding "ContestQsos_USCOREServiceBinding" operation "contest3__getQsosByKeyArray"
struct contest3__getQsosByKeyArrayResponse
{
    contest2__QsoUpdate*                _response;
};

/// Operation "contest3__getQsosByKeyArray" of service binding "ContestQsos_USCOREServiceBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_contest3__getQsosByKeyArray(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         SessionId,
    contest2__ArrayOfstring*            QsoKeyArray,
    // response parameters:
    struct contest3__getQsosByKeyArrayResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int contest3__getQsosByKeyArray(
    struct soap *soap,
    // request parameters:
    std::string                         SessionId,
    contest2__ArrayOfstring*            QsoKeyArray,
    // response parameters:
    struct contest3__getQsosByKeyArrayResponse&
  );
@endcode

C++ proxy class (defined in soapContestQsos_USCOREServiceBindingProxy.h):
@code
  class ContestQsos_USCOREServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapContestQsos_USCOREServiceBindingService.h):
@code
  class ContestQsos_USCOREServiceBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap contest3 service method-style:	getQsosByKeyArray rpc
//gsoap contest3 service method-encoding:	getQsosByKeyArray http://schemas.xmlsoap.org/soap/encoding/
//gsoap contest3 service method-action:	getQsosByKeyArray ""
int contest3__getQsosByKeyArray(
    std::string                         _SessionId,	///< Request parameter
    contest2__ArrayOfstring*            _QsoKeyArray,	///< Request parameter
    struct contest3__getQsosByKeyArrayResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   contest3__ColumnNamesToIndices                                           *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "contest3__ColumnNamesToIndicesResponse" of service binding "ContestQsos_USCOREServiceBinding" operation "contest3__ColumnNamesToIndices"
struct contest3__ColumnNamesToIndicesResponse
{
    contest2__ArrayOfint*               _response;
};

/// Operation "contest3__ColumnNamesToIndices" of service binding "ContestQsos_USCOREServiceBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_contest3__ColumnNamesToIndices(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         SessionId,
    contest2__ArrayOfstring*            ColumnNames,
    // response parameters:
    struct contest3__ColumnNamesToIndicesResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int contest3__ColumnNamesToIndices(
    struct soap *soap,
    // request parameters:
    std::string                         SessionId,
    contest2__ArrayOfstring*            ColumnNames,
    // response parameters:
    struct contest3__ColumnNamesToIndicesResponse&
  );
@endcode

C++ proxy class (defined in soapContestQsos_USCOREServiceBindingProxy.h):
@code
  class ContestQsos_USCOREServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapContestQsos_USCOREServiceBindingService.h):
@code
  class ContestQsos_USCOREServiceBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap contest3 service method-style:	ColumnNamesToIndices rpc
//gsoap contest3 service method-encoding:	ColumnNamesToIndices http://schemas.xmlsoap.org/soap/encoding/
//gsoap contest3 service method-action:	ColumnNamesToIndices ""
int contest3__ColumnNamesToIndices(
    std::string                         _SessionId,	///< Request parameter
    contest2__ArrayOfstring*            _ColumnNames,	///< Request parameter
    struct contest3__ColumnNamesToIndicesResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   contest3__ExchangeFrequencies                                            *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "contest3__ExchangeFrequenciesResponse" of service binding "ContestQsos_USCOREServiceBinding" operation "contest3__ExchangeFrequencies"
struct contest3__ExchangeFrequenciesResponse
{
    contest2__ArrayOfRigFrequency*      _response;
};

/// Operation "contest3__ExchangeFrequencies" of service binding "ContestQsos_USCOREServiceBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_contest3__ExchangeFrequencies(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    contest2__ArrayOfRigFrequency*      IncomingFreqs,
    // response parameters:
    struct contest3__ExchangeFrequenciesResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int contest3__ExchangeFrequencies(
    struct soap *soap,
    // request parameters:
    contest2__ArrayOfRigFrequency*      IncomingFreqs,
    // response parameters:
    struct contest3__ExchangeFrequenciesResponse&
  );
@endcode

C++ proxy class (defined in soapContestQsos_USCOREServiceBindingProxy.h):
@code
  class ContestQsos_USCOREServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapContestQsos_USCOREServiceBindingService.h):
@code
  class ContestQsos_USCOREServiceBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap contest3 service method-style:	ExchangeFrequencies rpc
//gsoap contest3 service method-encoding:	ExchangeFrequencies http://schemas.xmlsoap.org/soap/encoding/
//gsoap contest3 service method-action:	ExchangeFrequencies ""
int contest3__ExchangeFrequencies(
    contest2__ArrayOfRigFrequency*      _IncomingFreqs,	///< Request parameter
    struct contest3__ExchangeFrequenciesResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings are adopted from XML schemas as part of the WSDL types section or when running wsdl2h on a set of schemas.

The following readers and writers are C/C++ data type (de)serializers auto-generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the (de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in your code to import these data type and function declarations. Only use the soapcpp2-generated files in your project build. Do not include the wsdl2h-generated .h file in your code.

XML content can be retrieved from:
  - a FILE* fd, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a FILE* fd, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section contest2 Top-level root elements of schema "urn:xml-soap-Contest"

*/

/* End of ContestQsos.h */
