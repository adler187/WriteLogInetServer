/* C1Stub.h
   Generated by gSOAP 2.7.15 from ContestQsos.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef C1Stub_H
#define C1Stub_H
#include <vector>
#define SOAP_NAMESPACE_OF_contest2	"urn:xml-soap-Contest"
#ifndef WITH_NONAMESPACES
#define WITH_NONAMESPACES
#endif
#ifndef WITH_NOGLOBAL
#define WITH_NOGLOBAL
#endif
#include "stdsoap2.h"

namespace C1 {

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not redeclare here */

#endif

#if 0 /* volatile type: do not redeclare here */

#endif

#ifndef SOAP_TYPE_C1_contest2__ArrayOfstring
#define SOAP_TYPE_C1_contest2__ArrayOfstring (8)
/* contest2:ArrayOfstring */
class SOAP_CMAC contest2__ArrayOfstring
{
public:
	std::vector<std::string >str_USCOREel;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_C1_contest2__ArrayOfstring */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         contest2__ArrayOfstring() : soap(NULL) { this->soap_default(NULL); }
	virtual ~contest2__ArrayOfstring() { }
};
#endif

#ifndef SOAP_TYPE_C1_contest2__ArrayOfint
#define SOAP_TYPE_C1_contest2__ArrayOfint (9)
/* contest2:ArrayOfint */
class SOAP_CMAC contest2__ArrayOfint
{
public:
	std::vector<int >int_USCOREel;	/* optional element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE_C1_contest2__ArrayOfint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         contest2__ArrayOfint() : soap(NULL) { this->soap_default(NULL); }
	virtual ~contest2__ArrayOfint() { }
};
#endif

#ifndef SOAP_TYPE_C1_contest2__Qso
#define SOAP_TYPE_C1_contest2__Qso (10)
/* contest2:Qso */
class SOAP_CMAC contest2__Qso
{
public:
	int time64H;	/* required element of type xsd:int */
	int time64L;	/* required element of type xsd:int */
	double xmitFreq;	/* required element of type xsd:double */
	double recvFreq;	/* required element of type xsd:double */
	int band;	/* required element of type xsd:int */
	std::string station;	/* required element of type xsd:string */
	int mode;	/* required element of type xsd:int */
	int dupe;	/* required element of type xsd:int */
	int serial;	/* required element of type xsd:int */
	contest2__ArrayOfstring *qsoparts;	/* required element of type contest2:ArrayOfstring */
	int version;	/* required element of type xsd:int */
	std::string idKey;	/* required element of type xsd:string */
	std::string updatedBy;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_C1_contest2__Qso */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         contest2__Qso() : time64H(0), time64L(0), xmitFreq(0), recvFreq(0), band(0), mode(0), dupe(0), serial(0), qsoparts(NULL), version(0), soap(NULL) { this->soap_default(NULL); }
	virtual ~contest2__Qso() { }
};
#endif

#ifndef SOAP_TYPE_C1_contest2__ArrayOfQso
#define SOAP_TYPE_C1_contest2__ArrayOfQso (11)
/* contest2:ArrayOfQso */
class SOAP_CMAC contest2__ArrayOfQso
{
public:
	std::vector<contest2__Qso * >qso_USCOREel;	/* optional element of type contest2:Qso */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_C1_contest2__ArrayOfQso */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         contest2__ArrayOfQso() : soap(NULL) { this->soap_default(NULL); }
	virtual ~contest2__ArrayOfQso() { }
};
#endif

#ifndef SOAP_TYPE_C1_contest2__QsoUpdate
#define SOAP_TYPE_C1_contest2__QsoUpdate (12)
/* contest2:QsoUpdate */
class SOAP_CMAC contest2__QsoUpdate
{
public:
	contest2__ArrayOfQso *qsoArray;	/* required element of type contest2:ArrayOfQso */
	int logState;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_C1_contest2__QsoUpdate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         contest2__QsoUpdate() : qsoArray(NULL), logState(0), soap(NULL) { this->soap_default(NULL); }
	virtual ~contest2__QsoUpdate() { }
};
#endif

#ifndef SOAP_TYPE_C1_contest2__QsoIdVersion
#define SOAP_TYPE_C1_contest2__QsoIdVersion (13)
/* contest2:QsoIdVersion */
class SOAP_CMAC contest2__QsoIdVersion
{
public:
	int version;	/* required element of type xsd:int */
	std::string updatedBy;	/* required element of type xsd:string */
	std::string id;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_C1_contest2__QsoIdVersion */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         contest2__QsoIdVersion() : version(0), soap(NULL) { this->soap_default(NULL); }
	virtual ~contest2__QsoIdVersion() { }
};
#endif

#ifndef SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion
#define SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion (14)
/* contest2:ArrayOfQsoIdVersion */
class SOAP_CMAC contest2__ArrayOfQsoIdVersion
{
public:
	std::vector<contest2__QsoIdVersion * >id_USCOREel;	/* optional element of type contest2:QsoIdVersion */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         contest2__ArrayOfQsoIdVersion() : soap(NULL) { this->soap_default(NULL); }
	virtual ~contest2__ArrayOfQsoIdVersion() { }
};
#endif

#ifndef SOAP_TYPE_C1_contest2__LogSummary
#define SOAP_TYPE_C1_contest2__LogSummary (15)
/* contest2:LogSummary */
class SOAP_CMAC contest2__LogSummary
{
public:
	int logState;	/* required element of type xsd:int */
	contest2__ArrayOfQsoIdVersion *logSummaryIds;	/* required element of type contest2:ArrayOfQsoIdVersion */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_C1_contest2__LogSummary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         contest2__LogSummary() : logState(0), logSummaryIds(NULL), soap(NULL) { this->soap_default(NULL); }
	virtual ~contest2__LogSummary() { }
};
#endif

#ifndef SOAP_TYPE_C1_contest2__RigFrequency
#define SOAP_TYPE_C1_contest2__RigFrequency (16)
/* contest2:RigFrequency */
class SOAP_CMAC contest2__RigFrequency
{
public:
	std::string station;	/* required element of type xsd:string */
	int networkLetter;	/* required element of type xsd:int */
	std::string label;	/* required element of type xsd:string */
	int rigNumber;	/* required element of type xsd:int */
	double xmitFreq;	/* required element of type xsd:double */
	double recvFreq;	/* required element of type xsd:double */
	int mode;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_C1_contest2__RigFrequency */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         contest2__RigFrequency() : networkLetter(0), rigNumber(0), xmitFreq(0), recvFreq(0), mode(0), soap(NULL) { this->soap_default(NULL); }
	virtual ~contest2__RigFrequency() { }
};
#endif

#ifndef SOAP_TYPE_C1_contest2__ArrayOfRigFrequency
#define SOAP_TYPE_C1_contest2__ArrayOfRigFrequency (17)
/* contest2:ArrayOfRigFrequency */
class SOAP_CMAC contest2__ArrayOfRigFrequency
{
public:
	std::vector<contest2__RigFrequency * >rf_USCOREel;	/* optional element of type contest2:RigFrequency */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE_C1_contest2__ArrayOfRigFrequency */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         contest2__ArrayOfRigFrequency() : soap(NULL) { this->soap_default(NULL); }
	virtual ~contest2__ArrayOfRigFrequency() { }
};
#endif

#ifndef SOAP_TYPE_C1_contest3__GetSessionIdResponse
#define SOAP_TYPE_C1_contest3__GetSessionIdResponse (34)
/* contest3:GetSessionIdResponse */
struct contest3__GetSessionIdResponse
{
public:
	std::string response;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_C1_contest3__GetSessionId
#define SOAP_TYPE_C1_contest3__GetSessionId (35)
/* contest3:GetSessionId */
struct contest3__GetSessionId
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_C1_contest3__AddAndGetLogSummaryResponse
#define SOAP_TYPE_C1_contest3__AddAndGetLogSummaryResponse (36)
/* contest3:AddAndGetLogSummaryResponse */
struct contest3__AddAndGetLogSummaryResponse
{
public:
	contest2__LogSummary *_response;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type contest2:LogSummary */
};
#endif

#ifndef SOAP_TYPE_C1_contest3__AddAndGetLogSummary
#define SOAP_TYPE_C1_contest3__AddAndGetLogSummary (40)
/* contest3:AddAndGetLogSummary */
struct contest3__AddAndGetLogSummary
{
public:
	std::string _SessionId;	/* required element of type xsd:string */
	contest2__ArrayOfQso *_QsoAddArray;	/* optional element of type contest2:ArrayOfQso */
	int _OldState;	/* required element of type xsd:int */
	int _MaxRequested;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_C1_contest3__addAndGetQsosResponse
#define SOAP_TYPE_C1_contest3__addAndGetQsosResponse (41)
/* contest3:addAndGetQsosResponse */
struct contest3__addAndGetQsosResponse
{
public:
	contest2__QsoUpdate *_response;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type contest2:QsoUpdate */
};
#endif

#ifndef SOAP_TYPE_C1_contest3__addAndGetQsos
#define SOAP_TYPE_C1_contest3__addAndGetQsos (45)
/* contest3:addAndGetQsos */
struct contest3__addAndGetQsos
{
public:
	std::string _SessionId;	/* required element of type xsd:string */
	contest2__ArrayOfQso *_QsoAddArray;	/* optional element of type contest2:ArrayOfQso */
	int _OldState;	/* required element of type xsd:int */
	int _MaxRequested;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_C1_contest3__getQsosByKeyArrayResponse
#define SOAP_TYPE_C1_contest3__getQsosByKeyArrayResponse (46)
/* contest3:getQsosByKeyArrayResponse */
struct contest3__getQsosByKeyArrayResponse
{
public:
	contest2__QsoUpdate *_response;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type contest2:QsoUpdate */
};
#endif

#ifndef SOAP_TYPE_C1_contest3__getQsosByKeyArray
#define SOAP_TYPE_C1_contest3__getQsosByKeyArray (49)
/* contest3:getQsosByKeyArray */
struct contest3__getQsosByKeyArray
{
public:
	std::string _SessionId;	/* required element of type xsd:string */
	contest2__ArrayOfstring *_QsoKeyArray;	/* optional element of type contest2:ArrayOfstring */
};
#endif

#ifndef SOAP_TYPE_C1_contest3__ColumnNamesToIndicesResponse
#define SOAP_TYPE_C1_contest3__ColumnNamesToIndicesResponse (50)
/* contest3:ColumnNamesToIndicesResponse */
struct contest3__ColumnNamesToIndicesResponse
{
public:
	contest2__ArrayOfint *_response;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type contest2:ArrayOfint */
};
#endif

#ifndef SOAP_TYPE_C1_contest3__ColumnNamesToIndices
#define SOAP_TYPE_C1_contest3__ColumnNamesToIndices (54)
/* contest3:ColumnNamesToIndices */
struct contest3__ColumnNamesToIndices
{
public:
	std::string _SessionId;	/* required element of type xsd:string */
	contest2__ArrayOfstring *_ColumnNames;	/* optional element of type contest2:ArrayOfstring */
};
#endif

#ifndef SOAP_TYPE_C1_contest3__ExchangeFrequenciesResponse
#define SOAP_TYPE_C1_contest3__ExchangeFrequenciesResponse (55)
/* contest3:ExchangeFrequenciesResponse */
struct contest3__ExchangeFrequenciesResponse
{
public:
	contest2__ArrayOfRigFrequency *_response;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type contest2:ArrayOfRigFrequency */
};
#endif

#ifndef SOAP_TYPE_C1_contest3__ExchangeFrequencies
#define SOAP_TYPE_C1_contest3__ExchangeFrequencies (59)
/* contest3:ExchangeFrequencies */
struct contest3__ExchangeFrequencies
{
public:
	contest2__ArrayOfRigFrequency *_IncomingFreqs;	/* optional element of type contest2:ArrayOfRigFrequency */
};
#endif

#ifndef SOAP_TYPE_C1_SOAP_ENV__Header
#define SOAP_TYPE_C1_SOAP_ENV__Header (60)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_C1_SOAP_ENV__Code
#define SOAP_TYPE_C1_SOAP_ENV__Code (61)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_C1_SOAP_ENV__Detail
#define SOAP_TYPE_C1_SOAP_ENV__Detail (63)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_C1_SOAP_ENV__Reason
#define SOAP_TYPE_C1_SOAP_ENV__Reason (66)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_C1_SOAP_ENV__Fault
#define SOAP_TYPE_C1_SOAP_ENV__Fault (67)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE_C1__QName
#define SOAP_TYPE_C1__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE_C1__XML
#define SOAP_TYPE_C1__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operations                                                         *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 contest3__GetSessionId(struct soap*, std::string &response);

SOAP_FMAC5 int SOAP_FMAC6 contest3__AddAndGetLogSummary(struct soap*, std::string _SessionId, contest2__ArrayOfQso *_QsoAddArray, int _OldState, int _MaxRequested, struct contest3__AddAndGetLogSummaryResponse &_param_1);

SOAP_FMAC5 int SOAP_FMAC6 contest3__addAndGetQsos(struct soap*, std::string _SessionId, contest2__ArrayOfQso *_QsoAddArray, int _OldState, int _MaxRequested, struct contest3__addAndGetQsosResponse &_param_2);

SOAP_FMAC5 int SOAP_FMAC6 contest3__getQsosByKeyArray(struct soap*, std::string _SessionId, contest2__ArrayOfstring *_QsoKeyArray, struct contest3__getQsosByKeyArrayResponse &_param_3);

SOAP_FMAC5 int SOAP_FMAC6 contest3__ColumnNamesToIndices(struct soap*, std::string _SessionId, contest2__ArrayOfstring *_ColumnNames, struct contest3__ColumnNamesToIndicesResponse &_param_4);

SOAP_FMAC5 int SOAP_FMAC6 contest3__ExchangeFrequencies(struct soap*, contest2__ArrayOfRigFrequency *_IncomingFreqs, struct contest3__ExchangeFrequenciesResponse &_param_5);

/******************************************************************************\
 *                                                                            *
 * Skeletons                                                                  *
 *                                                                            *
\******************************************************************************/

SOAP_FMAC5 int SOAP_FMAC6 C1_serve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 C1_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_contest3__GetSessionId(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_contest3__AddAndGetLogSummary(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_contest3__addAndGetQsos(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_contest3__getQsosByKeyArray(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_contest3__ColumnNamesToIndices(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_contest3__ExchangeFrequencies(struct soap*);

} // namespace C1


#endif

/* End of C1Stub.h */
