/* C1C.cpp
   Generated by gSOAP 2.7.15 from ContestQsos.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "C1H.h"

namespace C1 {

SOAP_SOURCE_STAMP("@(#) C1C.cpp ver 2.7.15 2011-10-17 00:58:55 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	soap->header = soap_new_SOAP_ENV__Header(soap, -1);
		soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_C1_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_C1_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_C1_double:
		return soap_in_double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_C1_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_C1_contest2__ArrayOfRigFrequency:
		return soap_in_contest2__ArrayOfRigFrequency(soap, NULL, NULL, "contest2:ArrayOfRigFrequency");
	case SOAP_TYPE_C1_contest2__RigFrequency:
		return soap_in_contest2__RigFrequency(soap, NULL, NULL, "contest2:RigFrequency");
	case SOAP_TYPE_C1_contest2__LogSummary:
		return soap_in_contest2__LogSummary(soap, NULL, NULL, "contest2:LogSummary");
	case SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion:
		return soap_in_contest2__ArrayOfQsoIdVersion(soap, NULL, NULL, "contest2:ArrayOfQsoIdVersion");
	case SOAP_TYPE_C1_contest2__QsoIdVersion:
		return soap_in_contest2__QsoIdVersion(soap, NULL, NULL, "contest2:QsoIdVersion");
	case SOAP_TYPE_C1_contest2__QsoUpdate:
		return soap_in_contest2__QsoUpdate(soap, NULL, NULL, "contest2:QsoUpdate");
	case SOAP_TYPE_C1_contest2__ArrayOfQso:
		return soap_in_contest2__ArrayOfQso(soap, NULL, NULL, "contest2:ArrayOfQso");
	case SOAP_TYPE_C1_contest2__Qso:
		return soap_in_contest2__Qso(soap, NULL, NULL, "contest2:Qso");
	case SOAP_TYPE_C1_contest2__ArrayOfint:
		return soap_in_contest2__ArrayOfint(soap, NULL, NULL, "contest2:ArrayOfint");
	case SOAP_TYPE_C1_contest2__ArrayOfstring:
		return soap_in_contest2__ArrayOfstring(soap, NULL, NULL, "contest2:ArrayOfstring");
	case SOAP_TYPE_C1_contest3__ExchangeFrequencies:
		return soap_in_contest3__ExchangeFrequencies(soap, NULL, NULL, "contest3:ExchangeFrequencies");
	case SOAP_TYPE_C1_contest3__ExchangeFrequenciesResponse:
		return soap_in_contest3__ExchangeFrequenciesResponse(soap, NULL, NULL, "contest3:ExchangeFrequenciesResponse");
	case SOAP_TYPE_C1_contest3__ColumnNamesToIndices:
		return soap_in_contest3__ColumnNamesToIndices(soap, NULL, NULL, "contest3:ColumnNamesToIndices");
	case SOAP_TYPE_C1_contest3__ColumnNamesToIndicesResponse:
		return soap_in_contest3__ColumnNamesToIndicesResponse(soap, NULL, NULL, "contest3:ColumnNamesToIndicesResponse");
	case SOAP_TYPE_C1_contest3__getQsosByKeyArray:
		return soap_in_contest3__getQsosByKeyArray(soap, NULL, NULL, "contest3:getQsosByKeyArray");
	case SOAP_TYPE_C1_contest3__getQsosByKeyArrayResponse:
		return soap_in_contest3__getQsosByKeyArrayResponse(soap, NULL, NULL, "contest3:getQsosByKeyArrayResponse");
	case SOAP_TYPE_C1_contest3__addAndGetQsos:
		return soap_in_contest3__addAndGetQsos(soap, NULL, NULL, "contest3:addAndGetQsos");
	case SOAP_TYPE_C1_contest3__addAndGetQsosResponse:
		return soap_in_contest3__addAndGetQsosResponse(soap, NULL, NULL, "contest3:addAndGetQsosResponse");
	case SOAP_TYPE_C1_contest3__AddAndGetLogSummary:
		return soap_in_contest3__AddAndGetLogSummary(soap, NULL, NULL, "contest3:AddAndGetLogSummary");
	case SOAP_TYPE_C1_contest3__AddAndGetLogSummaryResponse:
		return soap_in_contest3__AddAndGetLogSummaryResponse(soap, NULL, NULL, "contest3:AddAndGetLogSummaryResponse");
	case SOAP_TYPE_C1_contest3__GetSessionId:
		return soap_in_contest3__GetSessionId(soap, NULL, NULL, "contest3:GetSessionId");
	case SOAP_TYPE_C1_contest3__GetSessionIdResponse:
		return soap_in_contest3__GetSessionIdResponse(soap, NULL, NULL, "contest3:GetSessionIdResponse");
	case SOAP_TYPE_C1_PointerTocontest2__ArrayOfRigFrequency:
		return soap_in_PointerTocontest2__ArrayOfRigFrequency(soap, NULL, NULL, "contest2:ArrayOfRigFrequency");
	case SOAP_TYPE_C1_PointerTocontest2__ArrayOfint:
		return soap_in_PointerTocontest2__ArrayOfint(soap, NULL, NULL, "contest2:ArrayOfint");
	case SOAP_TYPE_C1_PointerTocontest2__QsoUpdate:
		return soap_in_PointerTocontest2__QsoUpdate(soap, NULL, NULL, "contest2:QsoUpdate");
	case SOAP_TYPE_C1_PointerTocontest2__LogSummary:
		return soap_in_PointerTocontest2__LogSummary(soap, NULL, NULL, "contest2:LogSummary");
	case SOAP_TYPE_C1_PointerTocontest2__RigFrequency:
		return soap_in_PointerTocontest2__RigFrequency(soap, NULL, NULL, "contest2:RigFrequency");
	case SOAP_TYPE_C1_PointerTocontest2__ArrayOfQsoIdVersion:
		return soap_in_PointerTocontest2__ArrayOfQsoIdVersion(soap, NULL, NULL, "contest2:ArrayOfQsoIdVersion");
	case SOAP_TYPE_C1_PointerTocontest2__QsoIdVersion:
		return soap_in_PointerTocontest2__QsoIdVersion(soap, NULL, NULL, "contest2:QsoIdVersion");
	case SOAP_TYPE_C1_PointerTocontest2__ArrayOfQso:
		return soap_in_PointerTocontest2__ArrayOfQso(soap, NULL, NULL, "contest2:ArrayOfQso");
	case SOAP_TYPE_C1_PointerTocontest2__Qso:
		return soap_in_PointerTocontest2__Qso(soap, NULL, NULL, "contest2:Qso");
	case SOAP_TYPE_C1_PointerTocontest2__ArrayOfstring:
		return soap_in_PointerTocontest2__ArrayOfstring(soap, NULL, NULL, "contest2:ArrayOfstring");
	case SOAP_TYPE_C1__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_C1_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_C1_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest2:ArrayOfRigFrequency"))
		{	*type = SOAP_TYPE_C1_contest2__ArrayOfRigFrequency;
			return soap_in_contest2__ArrayOfRigFrequency(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest2:RigFrequency"))
		{	*type = SOAP_TYPE_C1_contest2__RigFrequency;
			return soap_in_contest2__RigFrequency(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest2:LogSummary"))
		{	*type = SOAP_TYPE_C1_contest2__LogSummary;
			return soap_in_contest2__LogSummary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest2:ArrayOfQsoIdVersion"))
		{	*type = SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion;
			return soap_in_contest2__ArrayOfQsoIdVersion(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest2:QsoIdVersion"))
		{	*type = SOAP_TYPE_C1_contest2__QsoIdVersion;
			return soap_in_contest2__QsoIdVersion(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest2:QsoUpdate"))
		{	*type = SOAP_TYPE_C1_contest2__QsoUpdate;
			return soap_in_contest2__QsoUpdate(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest2:ArrayOfQso"))
		{	*type = SOAP_TYPE_C1_contest2__ArrayOfQso;
			return soap_in_contest2__ArrayOfQso(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest2:Qso"))
		{	*type = SOAP_TYPE_C1_contest2__Qso;
			return soap_in_contest2__Qso(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest2:ArrayOfint"))
		{	*type = SOAP_TYPE_C1_contest2__ArrayOfint;
			return soap_in_contest2__ArrayOfint(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest2:ArrayOfstring"))
		{	*type = SOAP_TYPE_C1_contest2__ArrayOfstring;
			return soap_in_contest2__ArrayOfstring(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_C1_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_C1_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_C1_double;
			return soap_in_double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest3:ExchangeFrequencies"))
		{	*type = SOAP_TYPE_C1_contest3__ExchangeFrequencies;
			return soap_in_contest3__ExchangeFrequencies(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest3:ExchangeFrequenciesResponse"))
		{	*type = SOAP_TYPE_C1_contest3__ExchangeFrequenciesResponse;
			return soap_in_contest3__ExchangeFrequenciesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest3:ColumnNamesToIndices"))
		{	*type = SOAP_TYPE_C1_contest3__ColumnNamesToIndices;
			return soap_in_contest3__ColumnNamesToIndices(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest3:ColumnNamesToIndicesResponse"))
		{	*type = SOAP_TYPE_C1_contest3__ColumnNamesToIndicesResponse;
			return soap_in_contest3__ColumnNamesToIndicesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest3:getQsosByKeyArray"))
		{	*type = SOAP_TYPE_C1_contest3__getQsosByKeyArray;
			return soap_in_contest3__getQsosByKeyArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest3:getQsosByKeyArrayResponse"))
		{	*type = SOAP_TYPE_C1_contest3__getQsosByKeyArrayResponse;
			return soap_in_contest3__getQsosByKeyArrayResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest3:addAndGetQsos"))
		{	*type = SOAP_TYPE_C1_contest3__addAndGetQsos;
			return soap_in_contest3__addAndGetQsos(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest3:addAndGetQsosResponse"))
		{	*type = SOAP_TYPE_C1_contest3__addAndGetQsosResponse;
			return soap_in_contest3__addAndGetQsosResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest3:AddAndGetLogSummary"))
		{	*type = SOAP_TYPE_C1_contest3__AddAndGetLogSummary;
			return soap_in_contest3__AddAndGetLogSummary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest3:AddAndGetLogSummaryResponse"))
		{	*type = SOAP_TYPE_C1_contest3__AddAndGetLogSummaryResponse;
			return soap_in_contest3__AddAndGetLogSummaryResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest3:GetSessionId"))
		{	*type = SOAP_TYPE_C1_contest3__GetSessionId;
			return soap_in_contest3__GetSessionId(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest3:GetSessionIdResponse"))
		{	*type = SOAP_TYPE_C1_contest3__GetSessionIdResponse;
			return soap_in_contest3__GetSessionIdResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE_C1__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_C1_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_C1_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_C1_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_C1_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_C1_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_C1_contest2__ArrayOfRigFrequency:
		return ((contest2__ArrayOfRigFrequency *)ptr)->soap_out(soap, tag, id, "contest2:ArrayOfRigFrequency");
	case SOAP_TYPE_C1_contest2__RigFrequency:
		return ((contest2__RigFrequency *)ptr)->soap_out(soap, tag, id, "contest2:RigFrequency");
	case SOAP_TYPE_C1_contest2__LogSummary:
		return ((contest2__LogSummary *)ptr)->soap_out(soap, tag, id, "contest2:LogSummary");
	case SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion:
		return ((contest2__ArrayOfQsoIdVersion *)ptr)->soap_out(soap, tag, id, "contest2:ArrayOfQsoIdVersion");
	case SOAP_TYPE_C1_contest2__QsoIdVersion:
		return ((contest2__QsoIdVersion *)ptr)->soap_out(soap, tag, id, "contest2:QsoIdVersion");
	case SOAP_TYPE_C1_contest2__QsoUpdate:
		return ((contest2__QsoUpdate *)ptr)->soap_out(soap, tag, id, "contest2:QsoUpdate");
	case SOAP_TYPE_C1_contest2__ArrayOfQso:
		return ((contest2__ArrayOfQso *)ptr)->soap_out(soap, tag, id, "contest2:ArrayOfQso");
	case SOAP_TYPE_C1_contest2__Qso:
		return ((contest2__Qso *)ptr)->soap_out(soap, tag, id, "contest2:Qso");
	case SOAP_TYPE_C1_contest2__ArrayOfint:
		return ((contest2__ArrayOfint *)ptr)->soap_out(soap, tag, id, "contest2:ArrayOfint");
	case SOAP_TYPE_C1_contest2__ArrayOfstring:
		return ((contest2__ArrayOfstring *)ptr)->soap_out(soap, tag, id, "contest2:ArrayOfstring");
	case SOAP_TYPE_C1_contest3__ExchangeFrequencies:
		return soap_out_contest3__ExchangeFrequencies(soap, tag, id, (const struct contest3__ExchangeFrequencies *)ptr, "contest3:ExchangeFrequencies");
	case SOAP_TYPE_C1_contest3__ExchangeFrequenciesResponse:
		return soap_out_contest3__ExchangeFrequenciesResponse(soap, tag, id, (const struct contest3__ExchangeFrequenciesResponse *)ptr, "contest3:ExchangeFrequenciesResponse");
	case SOAP_TYPE_C1_contest3__ColumnNamesToIndices:
		return soap_out_contest3__ColumnNamesToIndices(soap, tag, id, (const struct contest3__ColumnNamesToIndices *)ptr, "contest3:ColumnNamesToIndices");
	case SOAP_TYPE_C1_contest3__ColumnNamesToIndicesResponse:
		return soap_out_contest3__ColumnNamesToIndicesResponse(soap, tag, id, (const struct contest3__ColumnNamesToIndicesResponse *)ptr, "contest3:ColumnNamesToIndicesResponse");
	case SOAP_TYPE_C1_contest3__getQsosByKeyArray:
		return soap_out_contest3__getQsosByKeyArray(soap, tag, id, (const struct contest3__getQsosByKeyArray *)ptr, "contest3:getQsosByKeyArray");
	case SOAP_TYPE_C1_contest3__getQsosByKeyArrayResponse:
		return soap_out_contest3__getQsosByKeyArrayResponse(soap, tag, id, (const struct contest3__getQsosByKeyArrayResponse *)ptr, "contest3:getQsosByKeyArrayResponse");
	case SOAP_TYPE_C1_contest3__addAndGetQsos:
		return soap_out_contest3__addAndGetQsos(soap, tag, id, (const struct contest3__addAndGetQsos *)ptr, "contest3:addAndGetQsos");
	case SOAP_TYPE_C1_contest3__addAndGetQsosResponse:
		return soap_out_contest3__addAndGetQsosResponse(soap, tag, id, (const struct contest3__addAndGetQsosResponse *)ptr, "contest3:addAndGetQsosResponse");
	case SOAP_TYPE_C1_contest3__AddAndGetLogSummary:
		return soap_out_contest3__AddAndGetLogSummary(soap, tag, id, (const struct contest3__AddAndGetLogSummary *)ptr, "contest3:AddAndGetLogSummary");
	case SOAP_TYPE_C1_contest3__AddAndGetLogSummaryResponse:
		return soap_out_contest3__AddAndGetLogSummaryResponse(soap, tag, id, (const struct contest3__AddAndGetLogSummaryResponse *)ptr, "contest3:AddAndGetLogSummaryResponse");
	case SOAP_TYPE_C1_contest3__GetSessionId:
		return soap_out_contest3__GetSessionId(soap, tag, id, (const struct contest3__GetSessionId *)ptr, "contest3:GetSessionId");
	case SOAP_TYPE_C1_contest3__GetSessionIdResponse:
		return soap_out_contest3__GetSessionIdResponse(soap, tag, id, (const struct contest3__GetSessionIdResponse *)ptr, "contest3:GetSessionIdResponse");
	case SOAP_TYPE_C1_PointerTocontest2__ArrayOfRigFrequency:
		return soap_out_PointerTocontest2__ArrayOfRigFrequency(soap, tag, id, (contest2__ArrayOfRigFrequency *const*)ptr, "contest2:ArrayOfRigFrequency");
	case SOAP_TYPE_C1_PointerTocontest2__ArrayOfint:
		return soap_out_PointerTocontest2__ArrayOfint(soap, tag, id, (contest2__ArrayOfint *const*)ptr, "contest2:ArrayOfint");
	case SOAP_TYPE_C1_PointerTocontest2__QsoUpdate:
		return soap_out_PointerTocontest2__QsoUpdate(soap, tag, id, (contest2__QsoUpdate *const*)ptr, "contest2:QsoUpdate");
	case SOAP_TYPE_C1_PointerTocontest2__LogSummary:
		return soap_out_PointerTocontest2__LogSummary(soap, tag, id, (contest2__LogSummary *const*)ptr, "contest2:LogSummary");
	case SOAP_TYPE_C1_PointerTocontest2__RigFrequency:
		return soap_out_PointerTocontest2__RigFrequency(soap, tag, id, (contest2__RigFrequency *const*)ptr, "contest2:RigFrequency");
	case SOAP_TYPE_C1_PointerTocontest2__ArrayOfQsoIdVersion:
		return soap_out_PointerTocontest2__ArrayOfQsoIdVersion(soap, tag, id, (contest2__ArrayOfQsoIdVersion *const*)ptr, "contest2:ArrayOfQsoIdVersion");
	case SOAP_TYPE_C1_PointerTocontest2__QsoIdVersion:
		return soap_out_PointerTocontest2__QsoIdVersion(soap, tag, id, (contest2__QsoIdVersion *const*)ptr, "contest2:QsoIdVersion");
	case SOAP_TYPE_C1_PointerTocontest2__ArrayOfQso:
		return soap_out_PointerTocontest2__ArrayOfQso(soap, tag, id, (contest2__ArrayOfQso *const*)ptr, "contest2:ArrayOfQso");
	case SOAP_TYPE_C1_PointerTocontest2__Qso:
		return soap_out_PointerTocontest2__Qso(soap, tag, id, (contest2__Qso *const*)ptr, "contest2:Qso");
	case SOAP_TYPE_C1_PointerTocontest2__ArrayOfstring:
		return soap_out_PointerTocontest2__ArrayOfstring(soap, tag, id, (contest2__ArrayOfstring *const*)ptr, "contest2:ArrayOfstring");
	case SOAP_TYPE_C1__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_C1_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_C1_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_C1_contest2__ArrayOfRigFrequency:
		((contest2__ArrayOfRigFrequency *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C1_contest2__RigFrequency:
		((contest2__RigFrequency *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C1_contest2__LogSummary:
		((contest2__LogSummary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion:
		((contest2__ArrayOfQsoIdVersion *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C1_contest2__QsoIdVersion:
		((contest2__QsoIdVersion *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C1_contest2__QsoUpdate:
		((contest2__QsoUpdate *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C1_contest2__ArrayOfQso:
		((contest2__ArrayOfQso *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C1_contest2__Qso:
		((contest2__Qso *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C1_contest2__ArrayOfint:
		((contest2__ArrayOfint *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C1_contest2__ArrayOfstring:
		((contest2__ArrayOfstring *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C1_contest3__ExchangeFrequencies:
		soap_serialize_contest3__ExchangeFrequencies(soap, (const struct contest3__ExchangeFrequencies *)ptr);
		break;
	case SOAP_TYPE_C1_contest3__ExchangeFrequenciesResponse:
		soap_serialize_contest3__ExchangeFrequenciesResponse(soap, (const struct contest3__ExchangeFrequenciesResponse *)ptr);
		break;
	case SOAP_TYPE_C1_contest3__ColumnNamesToIndices:
		soap_serialize_contest3__ColumnNamesToIndices(soap, (const struct contest3__ColumnNamesToIndices *)ptr);
		break;
	case SOAP_TYPE_C1_contest3__ColumnNamesToIndicesResponse:
		soap_serialize_contest3__ColumnNamesToIndicesResponse(soap, (const struct contest3__ColumnNamesToIndicesResponse *)ptr);
		break;
	case SOAP_TYPE_C1_contest3__getQsosByKeyArray:
		soap_serialize_contest3__getQsosByKeyArray(soap, (const struct contest3__getQsosByKeyArray *)ptr);
		break;
	case SOAP_TYPE_C1_contest3__getQsosByKeyArrayResponse:
		soap_serialize_contest3__getQsosByKeyArrayResponse(soap, (const struct contest3__getQsosByKeyArrayResponse *)ptr);
		break;
	case SOAP_TYPE_C1_contest3__addAndGetQsos:
		soap_serialize_contest3__addAndGetQsos(soap, (const struct contest3__addAndGetQsos *)ptr);
		break;
	case SOAP_TYPE_C1_contest3__addAndGetQsosResponse:
		soap_serialize_contest3__addAndGetQsosResponse(soap, (const struct contest3__addAndGetQsosResponse *)ptr);
		break;
	case SOAP_TYPE_C1_contest3__AddAndGetLogSummary:
		soap_serialize_contest3__AddAndGetLogSummary(soap, (const struct contest3__AddAndGetLogSummary *)ptr);
		break;
	case SOAP_TYPE_C1_contest3__AddAndGetLogSummaryResponse:
		soap_serialize_contest3__AddAndGetLogSummaryResponse(soap, (const struct contest3__AddAndGetLogSummaryResponse *)ptr);
		break;
	case SOAP_TYPE_C1_contest3__GetSessionId:
		soap_serialize_contest3__GetSessionId(soap, (const struct contest3__GetSessionId *)ptr);
		break;
	case SOAP_TYPE_C1_contest3__GetSessionIdResponse:
		soap_serialize_contest3__GetSessionIdResponse(soap, (const struct contest3__GetSessionIdResponse *)ptr);
		break;
	case SOAP_TYPE_C1_PointerTocontest2__ArrayOfRigFrequency:
		soap_serialize_PointerTocontest2__ArrayOfRigFrequency(soap, (contest2__ArrayOfRigFrequency *const*)ptr);
		break;
	case SOAP_TYPE_C1_PointerTocontest2__ArrayOfint:
		soap_serialize_PointerTocontest2__ArrayOfint(soap, (contest2__ArrayOfint *const*)ptr);
		break;
	case SOAP_TYPE_C1_PointerTocontest2__QsoUpdate:
		soap_serialize_PointerTocontest2__QsoUpdate(soap, (contest2__QsoUpdate *const*)ptr);
		break;
	case SOAP_TYPE_C1_PointerTocontest2__LogSummary:
		soap_serialize_PointerTocontest2__LogSummary(soap, (contest2__LogSummary *const*)ptr);
		break;
	case SOAP_TYPE_C1_PointerTocontest2__RigFrequency:
		soap_serialize_PointerTocontest2__RigFrequency(soap, (contest2__RigFrequency *const*)ptr);
		break;
	case SOAP_TYPE_C1_PointerTocontest2__ArrayOfQsoIdVersion:
		soap_serialize_PointerTocontest2__ArrayOfQsoIdVersion(soap, (contest2__ArrayOfQsoIdVersion *const*)ptr);
		break;
	case SOAP_TYPE_C1_PointerTocontest2__QsoIdVersion:
		soap_serialize_PointerTocontest2__QsoIdVersion(soap, (contest2__QsoIdVersion *const*)ptr);
		break;
	case SOAP_TYPE_C1_PointerTocontest2__ArrayOfQso:
		soap_serialize_PointerTocontest2__ArrayOfQso(soap, (contest2__ArrayOfQso *const*)ptr);
		break;
	case SOAP_TYPE_C1_PointerTocontest2__Qso:
		soap_serialize_PointerTocontest2__Qso(soap, (contest2__Qso *const*)ptr);
		break;
	case SOAP_TYPE_C1_PointerTocontest2__ArrayOfstring:
		soap_serialize_PointerTocontest2__ArrayOfstring(soap, (contest2__ArrayOfstring *const*)ptr);
		break;
	case SOAP_TYPE_C1__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_C1_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_C1_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest2__ArrayOfstring:
		return (void*)soap_instantiate_contest2__ArrayOfstring(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest2__ArrayOfint:
		return (void*)soap_instantiate_contest2__ArrayOfint(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest2__Qso:
		return (void*)soap_instantiate_contest2__Qso(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest2__ArrayOfQso:
		return (void*)soap_instantiate_contest2__ArrayOfQso(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest2__QsoUpdate:
		return (void*)soap_instantiate_contest2__QsoUpdate(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest2__QsoIdVersion:
		return (void*)soap_instantiate_contest2__QsoIdVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion:
		return (void*)soap_instantiate_contest2__ArrayOfQsoIdVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest2__LogSummary:
		return (void*)soap_instantiate_contest2__LogSummary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest2__RigFrequency:
		return (void*)soap_instantiate_contest2__RigFrequency(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest2__ArrayOfRigFrequency:
		return (void*)soap_instantiate_contest2__ArrayOfRigFrequency(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest3__GetSessionIdResponse:
		return (void*)soap_instantiate_contest3__GetSessionIdResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest3__GetSessionId:
		return (void*)soap_instantiate_contest3__GetSessionId(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest3__AddAndGetLogSummaryResponse:
		return (void*)soap_instantiate_contest3__AddAndGetLogSummaryResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest3__AddAndGetLogSummary:
		return (void*)soap_instantiate_contest3__AddAndGetLogSummary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest3__addAndGetQsosResponse:
		return (void*)soap_instantiate_contest3__addAndGetQsosResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest3__addAndGetQsos:
		return (void*)soap_instantiate_contest3__addAndGetQsos(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest3__getQsosByKeyArrayResponse:
		return (void*)soap_instantiate_contest3__getQsosByKeyArrayResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest3__getQsosByKeyArray:
		return (void*)soap_instantiate_contest3__getQsosByKeyArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest3__ColumnNamesToIndicesResponse:
		return (void*)soap_instantiate_contest3__ColumnNamesToIndicesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest3__ColumnNamesToIndices:
		return (void*)soap_instantiate_contest3__ColumnNamesToIndices(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest3__ExchangeFrequenciesResponse:
		return (void*)soap_instantiate_contest3__ExchangeFrequenciesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest3__ExchangeFrequencies:
		return (void*)soap_instantiate_contest3__ExchangeFrequencies(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C1_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C1_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C1_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C1_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C1_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__RigFrequency:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTocontest2__RigFrequency(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__QsoIdVersion:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTocontest2__QsoIdVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__Qso:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTocontest2__Qso(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_std__vectorTemplateOfint:
		return (void*)soap_instantiate_std__vectorTemplateOfint(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_std__vectorTemplateOfstd__string:
		return (void*)soap_instantiate_std__vectorTemplateOfstd__string(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_C1_std__string:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_C1_contest2__ArrayOfstring:
		if (p->size < 0)
			delete (contest2__ArrayOfstring*)p->ptr;
		else
			delete[] (contest2__ArrayOfstring*)p->ptr;
		break;
	case SOAP_TYPE_C1_contest2__ArrayOfint:
		if (p->size < 0)
			delete (contest2__ArrayOfint*)p->ptr;
		else
			delete[] (contest2__ArrayOfint*)p->ptr;
		break;
	case SOAP_TYPE_C1_contest2__Qso:
		if (p->size < 0)
			delete (contest2__Qso*)p->ptr;
		else
			delete[] (contest2__Qso*)p->ptr;
		break;
	case SOAP_TYPE_C1_contest2__ArrayOfQso:
		if (p->size < 0)
			delete (contest2__ArrayOfQso*)p->ptr;
		else
			delete[] (contest2__ArrayOfQso*)p->ptr;
		break;
	case SOAP_TYPE_C1_contest2__QsoUpdate:
		if (p->size < 0)
			delete (contest2__QsoUpdate*)p->ptr;
		else
			delete[] (contest2__QsoUpdate*)p->ptr;
		break;
	case SOAP_TYPE_C1_contest2__QsoIdVersion:
		if (p->size < 0)
			delete (contest2__QsoIdVersion*)p->ptr;
		else
			delete[] (contest2__QsoIdVersion*)p->ptr;
		break;
	case SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion:
		if (p->size < 0)
			delete (contest2__ArrayOfQsoIdVersion*)p->ptr;
		else
			delete[] (contest2__ArrayOfQsoIdVersion*)p->ptr;
		break;
	case SOAP_TYPE_C1_contest2__LogSummary:
		if (p->size < 0)
			delete (contest2__LogSummary*)p->ptr;
		else
			delete[] (contest2__LogSummary*)p->ptr;
		break;
	case SOAP_TYPE_C1_contest2__RigFrequency:
		if (p->size < 0)
			delete (contest2__RigFrequency*)p->ptr;
		else
			delete[] (contest2__RigFrequency*)p->ptr;
		break;
	case SOAP_TYPE_C1_contest2__ArrayOfRigFrequency:
		if (p->size < 0)
			delete (contest2__ArrayOfRigFrequency*)p->ptr;
		else
			delete[] (contest2__ArrayOfRigFrequency*)p->ptr;
		break;
	case SOAP_TYPE_C1_contest3__GetSessionIdResponse:
		if (p->size < 0)
			delete (struct contest3__GetSessionIdResponse*)p->ptr;
		else
			delete[] (struct contest3__GetSessionIdResponse*)p->ptr;
		break;
	case SOAP_TYPE_C1_contest3__GetSessionId:
		if (p->size < 0)
			delete (struct contest3__GetSessionId*)p->ptr;
		else
			delete[] (struct contest3__GetSessionId*)p->ptr;
		break;
	case SOAP_TYPE_C1_contest3__AddAndGetLogSummaryResponse:
		if (p->size < 0)
			delete (struct contest3__AddAndGetLogSummaryResponse*)p->ptr;
		else
			delete[] (struct contest3__AddAndGetLogSummaryResponse*)p->ptr;
		break;
	case SOAP_TYPE_C1_contest3__AddAndGetLogSummary:
		if (p->size < 0)
			delete (struct contest3__AddAndGetLogSummary*)p->ptr;
		else
			delete[] (struct contest3__AddAndGetLogSummary*)p->ptr;
		break;
	case SOAP_TYPE_C1_contest3__addAndGetQsosResponse:
		if (p->size < 0)
			delete (struct contest3__addAndGetQsosResponse*)p->ptr;
		else
			delete[] (struct contest3__addAndGetQsosResponse*)p->ptr;
		break;
	case SOAP_TYPE_C1_contest3__addAndGetQsos:
		if (p->size < 0)
			delete (struct contest3__addAndGetQsos*)p->ptr;
		else
			delete[] (struct contest3__addAndGetQsos*)p->ptr;
		break;
	case SOAP_TYPE_C1_contest3__getQsosByKeyArrayResponse:
		if (p->size < 0)
			delete (struct contest3__getQsosByKeyArrayResponse*)p->ptr;
		else
			delete[] (struct contest3__getQsosByKeyArrayResponse*)p->ptr;
		break;
	case SOAP_TYPE_C1_contest3__getQsosByKeyArray:
		if (p->size < 0)
			delete (struct contest3__getQsosByKeyArray*)p->ptr;
		else
			delete[] (struct contest3__getQsosByKeyArray*)p->ptr;
		break;
	case SOAP_TYPE_C1_contest3__ColumnNamesToIndicesResponse:
		if (p->size < 0)
			delete (struct contest3__ColumnNamesToIndicesResponse*)p->ptr;
		else
			delete[] (struct contest3__ColumnNamesToIndicesResponse*)p->ptr;
		break;
	case SOAP_TYPE_C1_contest3__ColumnNamesToIndices:
		if (p->size < 0)
			delete (struct contest3__ColumnNamesToIndices*)p->ptr;
		else
			delete[] (struct contest3__ColumnNamesToIndices*)p->ptr;
		break;
	case SOAP_TYPE_C1_contest3__ExchangeFrequenciesResponse:
		if (p->size < 0)
			delete (struct contest3__ExchangeFrequenciesResponse*)p->ptr;
		else
			delete[] (struct contest3__ExchangeFrequenciesResponse*)p->ptr;
		break;
	case SOAP_TYPE_C1_contest3__ExchangeFrequencies:
		if (p->size < 0)
			delete (struct contest3__ExchangeFrequencies*)p->ptr;
		else
			delete[] (struct contest3__ExchangeFrequencies*)p->ptr;
		break;
	case SOAP_TYPE_C1_SOAP_ENV__Header:
		if (p->size < 0)
			delete (struct SOAP_ENV__Header*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Header*)p->ptr;
		break;
	case SOAP_TYPE_C1_SOAP_ENV__Code:
		if (p->size < 0)
			delete (struct SOAP_ENV__Code*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Code*)p->ptr;
		break;
	case SOAP_TYPE_C1_SOAP_ENV__Detail:
		if (p->size < 0)
			delete (struct SOAP_ENV__Detail*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Detail*)p->ptr;
		break;
	case SOAP_TYPE_C1_SOAP_ENV__Reason:
		if (p->size < 0)
			delete (struct SOAP_ENV__Reason*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Reason*)p->ptr;
		break;
	case SOAP_TYPE_C1_SOAP_ENV__Fault:
		if (p->size < 0)
			delete (struct SOAP_ENV__Fault*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Fault*)p->ptr;
		break;
	case SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__RigFrequency:
		if (p->size < 0)
			delete (std::vector<contest2__RigFrequency * >*)p->ptr;
		else
			delete[] (std::vector<contest2__RigFrequency * >*)p->ptr;
		break;
	case SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__QsoIdVersion:
		if (p->size < 0)
			delete (std::vector<contest2__QsoIdVersion * >*)p->ptr;
		else
			delete[] (std::vector<contest2__QsoIdVersion * >*)p->ptr;
		break;
	case SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__Qso:
		if (p->size < 0)
			delete (std::vector<contest2__Qso * >*)p->ptr;
		else
			delete[] (std::vector<contest2__Qso * >*)p->ptr;
		break;
	case SOAP_TYPE_C1_std__vectorTemplateOfint:
		if (p->size < 0)
			delete (std::vector<int >*)p->ptr;
		else
			delete[] (std::vector<int >*)p->ptr;
		break;
	case SOAP_TYPE_C1_std__vectorTemplateOfstd__string:
		if (p->size < 0)
			delete (std::vector<std::string >*)p->ptr;
		else
			delete[] (std::vector<std::string >*)p->ptr;
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{	switch (tt)
	{
	case SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__RigFrequency:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<contest2__RigFrequency * >*)p)[len] = *(contest2__RigFrequency **)q;
		break;
	case SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__QsoIdVersion:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<contest2__QsoIdVersion * >*)p)[len] = *(contest2__QsoIdVersion **)q;
		break;
	case SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__Qso:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<contest2__Qso * >*)p)[len] = *(contest2__Qso **)q;
		break;
	case SOAP_TYPE_C1_std__vectorTemplateOfint:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<int >*)p)[len] = *(int *)q;
		break;
	case SOAP_TYPE_C1_std__vectorTemplateOfstd__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<std::string >*)p)[len] = *(std::string *)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_C1_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_C1_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C1_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_C1_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_C1_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C1_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap *soap, double *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_C1_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{	double *p;
	p = soap_indouble(soap, tag, a, type, SOAP_TYPE_C1_double);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C1_double);
	if (soap_out_double(soap, tag?tag:"double", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_C1_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_C1_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_C1_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_C1_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C1_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C1_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)new (std::string[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void contest2__ArrayOfRigFrequency::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTocontest2__RigFrequency(soap, &this->contest2__ArrayOfRigFrequency::rf_USCOREel);
	/* transient soap skipped */
}

void contest2__ArrayOfRigFrequency::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTocontest2__RigFrequency(soap, &this->contest2__ArrayOfRigFrequency::rf_USCOREel);
	/* transient soap skipped */
}

int contest2__ArrayOfRigFrequency::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest2__ArrayOfRigFrequency(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest2__ArrayOfRigFrequency(struct soap *soap, const char *tag, int id, const contest2__ArrayOfRigFrequency *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest2__ArrayOfRigFrequency), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTocontest2__RigFrequency(soap, "rf_el", -1, &(a->contest2__ArrayOfRigFrequency::rf_USCOREel), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *contest2__ArrayOfRigFrequency::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_contest2__ArrayOfRigFrequency(soap, tag, this, type);
}

SOAP_FMAC3 contest2__ArrayOfRigFrequency * SOAP_FMAC4 soap_in_contest2__ArrayOfRigFrequency(struct soap *soap, const char *tag, contest2__ArrayOfRigFrequency *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest2__ArrayOfRigFrequency *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest2__ArrayOfRigFrequency, sizeof(contest2__ArrayOfRigFrequency), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C1_contest2__ArrayOfRigFrequency)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (contest2__ArrayOfRigFrequency *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTocontest2__RigFrequency(soap, "rf_el", &(a->contest2__ArrayOfRigFrequency::rf_USCOREel), "contest2:RigFrequency"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (contest2__ArrayOfRigFrequency *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest2__ArrayOfRigFrequency, 0, sizeof(contest2__ArrayOfRigFrequency), 0, soap_copy_contest2__ArrayOfRigFrequency);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int contest2__ArrayOfRigFrequency::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C1_contest2__ArrayOfRigFrequency);
	if (this->soap_out(soap, tag?tag:"contest2:ArrayOfRigFrequency", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest2__ArrayOfRigFrequency::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest2__ArrayOfRigFrequency(soap, this, tag, type);
}

SOAP_FMAC3 contest2__ArrayOfRigFrequency * SOAP_FMAC4 soap_get_contest2__ArrayOfRigFrequency(struct soap *soap, contest2__ArrayOfRigFrequency *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest2__ArrayOfRigFrequency(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 contest2__ArrayOfRigFrequency * SOAP_FMAC2 soap_instantiate_contest2__ArrayOfRigFrequency(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest2__ArrayOfRigFrequency(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C1_contest2__ArrayOfRigFrequency, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (contest2__ArrayOfRigFrequency);
		if (size)
			*size = sizeof(contest2__ArrayOfRigFrequency);
		((contest2__ArrayOfRigFrequency*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (contest2__ArrayOfRigFrequency[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(contest2__ArrayOfRigFrequency);
		for (int i = 0; i < n; i++)
			((contest2__ArrayOfRigFrequency*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (contest2__ArrayOfRigFrequency*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_contest2__ArrayOfRigFrequency(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying contest2__ArrayOfRigFrequency %p -> %p\n", q, p));
	*(contest2__ArrayOfRigFrequency*)p = *(contest2__ArrayOfRigFrequency*)q;
}

void contest2__RigFrequency::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->contest2__RigFrequency::station);
	soap_default_int(soap, &this->contest2__RigFrequency::networkLetter);
	soap_default_std__string(soap, &this->contest2__RigFrequency::label);
	soap_default_int(soap, &this->contest2__RigFrequency::rigNumber);
	soap_default_double(soap, &this->contest2__RigFrequency::xmitFreq);
	soap_default_double(soap, &this->contest2__RigFrequency::recvFreq);
	soap_default_int(soap, &this->contest2__RigFrequency::mode);
	/* transient soap skipped */
}

void contest2__RigFrequency::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->contest2__RigFrequency::station);
	soap_serialize_std__string(soap, &this->contest2__RigFrequency::label);
	/* transient soap skipped */
}

int contest2__RigFrequency::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest2__RigFrequency(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest2__RigFrequency(struct soap *soap, const char *tag, int id, const contest2__RigFrequency *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest2__RigFrequency), type))
		return soap->error;
	if (soap_out_std__string(soap, "station", -1, &(a->contest2__RigFrequency::station), ""))
		return soap->error;
	if (soap_out_int(soap, "networkLetter", -1, &(a->contest2__RigFrequency::networkLetter), ""))
		return soap->error;
	if (soap_out_std__string(soap, "label", -1, &(a->contest2__RigFrequency::label), ""))
		return soap->error;
	if (soap_out_int(soap, "rigNumber", -1, &(a->contest2__RigFrequency::rigNumber), ""))
		return soap->error;
	if (soap_out_double(soap, "xmitFreq", -1, &(a->contest2__RigFrequency::xmitFreq), ""))
		return soap->error;
	if (soap_out_double(soap, "recvFreq", -1, &(a->contest2__RigFrequency::recvFreq), ""))
		return soap->error;
	if (soap_out_int(soap, "mode", -1, &(a->contest2__RigFrequency::mode), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *contest2__RigFrequency::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_contest2__RigFrequency(soap, tag, this, type);
}

SOAP_FMAC3 contest2__RigFrequency * SOAP_FMAC4 soap_in_contest2__RigFrequency(struct soap *soap, const char *tag, contest2__RigFrequency *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest2__RigFrequency *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest2__RigFrequency, sizeof(contest2__RigFrequency), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C1_contest2__RigFrequency)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (contest2__RigFrequency *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_station1 = 1;
	size_t soap_flag_networkLetter1 = 1;
	size_t soap_flag_label1 = 1;
	size_t soap_flag_rigNumber1 = 1;
	size_t soap_flag_xmitFreq1 = 1;
	size_t soap_flag_recvFreq1 = 1;
	size_t soap_flag_mode1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_station1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "station", &(a->contest2__RigFrequency::station), "xsd:string"))
				{	soap_flag_station1--;
					continue;
				}
			if (soap_flag_networkLetter1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "networkLetter", &(a->contest2__RigFrequency::networkLetter), "xsd:int"))
				{	soap_flag_networkLetter1--;
					continue;
				}
			if (soap_flag_label1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "label", &(a->contest2__RigFrequency::label), "xsd:string"))
				{	soap_flag_label1--;
					continue;
				}
			if (soap_flag_rigNumber1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "rigNumber", &(a->contest2__RigFrequency::rigNumber), "xsd:int"))
				{	soap_flag_rigNumber1--;
					continue;
				}
			if (soap_flag_xmitFreq1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "xmitFreq", &(a->contest2__RigFrequency::xmitFreq), "xsd:double"))
				{	soap_flag_xmitFreq1--;
					continue;
				}
			if (soap_flag_recvFreq1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "recvFreq", &(a->contest2__RigFrequency::recvFreq), "xsd:double"))
				{	soap_flag_recvFreq1--;
					continue;
				}
			if (soap_flag_mode1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "mode", &(a->contest2__RigFrequency::mode), "xsd:int"))
				{	soap_flag_mode1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (contest2__RigFrequency *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest2__RigFrequency, 0, sizeof(contest2__RigFrequency), 0, soap_copy_contest2__RigFrequency);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_station1 > 0 || soap_flag_networkLetter1 > 0 || soap_flag_label1 > 0 || soap_flag_rigNumber1 > 0 || soap_flag_xmitFreq1 > 0 || soap_flag_recvFreq1 > 0 || soap_flag_mode1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int contest2__RigFrequency::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C1_contest2__RigFrequency);
	if (this->soap_out(soap, tag?tag:"contest2:RigFrequency", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest2__RigFrequency::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest2__RigFrequency(soap, this, tag, type);
}

SOAP_FMAC3 contest2__RigFrequency * SOAP_FMAC4 soap_get_contest2__RigFrequency(struct soap *soap, contest2__RigFrequency *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest2__RigFrequency(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 contest2__RigFrequency * SOAP_FMAC2 soap_instantiate_contest2__RigFrequency(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest2__RigFrequency(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C1_contest2__RigFrequency, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (contest2__RigFrequency);
		if (size)
			*size = sizeof(contest2__RigFrequency);
		((contest2__RigFrequency*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (contest2__RigFrequency[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(contest2__RigFrequency);
		for (int i = 0; i < n; i++)
			((contest2__RigFrequency*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (contest2__RigFrequency*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_contest2__RigFrequency(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying contest2__RigFrequency %p -> %p\n", q, p));
	*(contest2__RigFrequency*)p = *(contest2__RigFrequency*)q;
}

void contest2__LogSummary::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->contest2__LogSummary::logState);
	this->contest2__LogSummary::logSummaryIds = NULL;
	/* transient soap skipped */
}

void contest2__LogSummary::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTocontest2__ArrayOfQsoIdVersion(soap, &this->contest2__LogSummary::logSummaryIds);
	/* transient soap skipped */
}

int contest2__LogSummary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest2__LogSummary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest2__LogSummary(struct soap *soap, const char *tag, int id, const contest2__LogSummary *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest2__LogSummary), type))
		return soap->error;
	if (soap_out_int(soap, "logState", -1, &(a->contest2__LogSummary::logState), ""))
		return soap->error;
	if (soap_out_PointerTocontest2__ArrayOfQsoIdVersion(soap, "logSummaryIds", -1, &(a->contest2__LogSummary::logSummaryIds), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *contest2__LogSummary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_contest2__LogSummary(soap, tag, this, type);
}

SOAP_FMAC3 contest2__LogSummary * SOAP_FMAC4 soap_in_contest2__LogSummary(struct soap *soap, const char *tag, contest2__LogSummary *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest2__LogSummary *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest2__LogSummary, sizeof(contest2__LogSummary), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C1_contest2__LogSummary)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (contest2__LogSummary *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_logState1 = 1;
	size_t soap_flag_logSummaryIds1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_logState1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "logState", &(a->contest2__LogSummary::logState), "xsd:int"))
				{	soap_flag_logState1--;
					continue;
				}
			if (soap_flag_logSummaryIds1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTocontest2__ArrayOfQsoIdVersion(soap, "logSummaryIds", &(a->contest2__LogSummary::logSummaryIds), "contest2:ArrayOfQsoIdVersion"))
				{	soap_flag_logSummaryIds1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (contest2__LogSummary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest2__LogSummary, 0, sizeof(contest2__LogSummary), 0, soap_copy_contest2__LogSummary);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_logState1 > 0 || soap_flag_logSummaryIds1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int contest2__LogSummary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C1_contest2__LogSummary);
	if (this->soap_out(soap, tag?tag:"contest2:LogSummary", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest2__LogSummary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest2__LogSummary(soap, this, tag, type);
}

SOAP_FMAC3 contest2__LogSummary * SOAP_FMAC4 soap_get_contest2__LogSummary(struct soap *soap, contest2__LogSummary *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest2__LogSummary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 contest2__LogSummary * SOAP_FMAC2 soap_instantiate_contest2__LogSummary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest2__LogSummary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C1_contest2__LogSummary, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (contest2__LogSummary);
		if (size)
			*size = sizeof(contest2__LogSummary);
		((contest2__LogSummary*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (contest2__LogSummary[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(contest2__LogSummary);
		for (int i = 0; i < n; i++)
			((contest2__LogSummary*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (contest2__LogSummary*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_contest2__LogSummary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying contest2__LogSummary %p -> %p\n", q, p));
	*(contest2__LogSummary*)p = *(contest2__LogSummary*)q;
}

void contest2__ArrayOfQsoIdVersion::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTocontest2__QsoIdVersion(soap, &this->contest2__ArrayOfQsoIdVersion::id_USCOREel);
	/* transient soap skipped */
}

void contest2__ArrayOfQsoIdVersion::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTocontest2__QsoIdVersion(soap, &this->contest2__ArrayOfQsoIdVersion::id_USCOREel);
	/* transient soap skipped */
}

int contest2__ArrayOfQsoIdVersion::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest2__ArrayOfQsoIdVersion(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest2__ArrayOfQsoIdVersion(struct soap *soap, const char *tag, int id, const contest2__ArrayOfQsoIdVersion *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTocontest2__QsoIdVersion(soap, "id_el", -1, &(a->contest2__ArrayOfQsoIdVersion::id_USCOREel), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *contest2__ArrayOfQsoIdVersion::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_contest2__ArrayOfQsoIdVersion(soap, tag, this, type);
}

SOAP_FMAC3 contest2__ArrayOfQsoIdVersion * SOAP_FMAC4 soap_in_contest2__ArrayOfQsoIdVersion(struct soap *soap, const char *tag, contest2__ArrayOfQsoIdVersion *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest2__ArrayOfQsoIdVersion *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion, sizeof(contest2__ArrayOfQsoIdVersion), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (contest2__ArrayOfQsoIdVersion *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTocontest2__QsoIdVersion(soap, "id_el", &(a->contest2__ArrayOfQsoIdVersion::id_USCOREel), "contest2:QsoIdVersion"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (contest2__ArrayOfQsoIdVersion *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion, 0, sizeof(contest2__ArrayOfQsoIdVersion), 0, soap_copy_contest2__ArrayOfQsoIdVersion);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int contest2__ArrayOfQsoIdVersion::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion);
	if (this->soap_out(soap, tag?tag:"contest2:ArrayOfQsoIdVersion", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest2__ArrayOfQsoIdVersion::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest2__ArrayOfQsoIdVersion(soap, this, tag, type);
}

SOAP_FMAC3 contest2__ArrayOfQsoIdVersion * SOAP_FMAC4 soap_get_contest2__ArrayOfQsoIdVersion(struct soap *soap, contest2__ArrayOfQsoIdVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest2__ArrayOfQsoIdVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 contest2__ArrayOfQsoIdVersion * SOAP_FMAC2 soap_instantiate_contest2__ArrayOfQsoIdVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest2__ArrayOfQsoIdVersion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (contest2__ArrayOfQsoIdVersion);
		if (size)
			*size = sizeof(contest2__ArrayOfQsoIdVersion);
		((contest2__ArrayOfQsoIdVersion*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (contest2__ArrayOfQsoIdVersion[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(contest2__ArrayOfQsoIdVersion);
		for (int i = 0; i < n; i++)
			((contest2__ArrayOfQsoIdVersion*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (contest2__ArrayOfQsoIdVersion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_contest2__ArrayOfQsoIdVersion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying contest2__ArrayOfQsoIdVersion %p -> %p\n", q, p));
	*(contest2__ArrayOfQsoIdVersion*)p = *(contest2__ArrayOfQsoIdVersion*)q;
}

void contest2__QsoIdVersion::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->contest2__QsoIdVersion::version);
	soap_default_std__string(soap, &this->contest2__QsoIdVersion::updatedBy);
	soap_default_std__string(soap, &this->contest2__QsoIdVersion::id);
	/* transient soap skipped */
}

void contest2__QsoIdVersion::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->contest2__QsoIdVersion::updatedBy);
	soap_serialize_std__string(soap, &this->contest2__QsoIdVersion::id);
	/* transient soap skipped */
}

int contest2__QsoIdVersion::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest2__QsoIdVersion(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest2__QsoIdVersion(struct soap *soap, const char *tag, int id, const contest2__QsoIdVersion *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest2__QsoIdVersion), type))
		return soap->error;
	if (soap_out_int(soap, "version", -1, &(a->contest2__QsoIdVersion::version), ""))
		return soap->error;
	if (soap_out_std__string(soap, "updatedBy", -1, &(a->contest2__QsoIdVersion::updatedBy), ""))
		return soap->error;
	if (soap_out_std__string(soap, "id", -1, &(a->contest2__QsoIdVersion::id), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *contest2__QsoIdVersion::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_contest2__QsoIdVersion(soap, tag, this, type);
}

SOAP_FMAC3 contest2__QsoIdVersion * SOAP_FMAC4 soap_in_contest2__QsoIdVersion(struct soap *soap, const char *tag, contest2__QsoIdVersion *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest2__QsoIdVersion *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest2__QsoIdVersion, sizeof(contest2__QsoIdVersion), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C1_contest2__QsoIdVersion)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (contest2__QsoIdVersion *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_version1 = 1;
	size_t soap_flag_updatedBy1 = 1;
	size_t soap_flag_id1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_version1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "version", &(a->contest2__QsoIdVersion::version), "xsd:int"))
				{	soap_flag_version1--;
					continue;
				}
			if (soap_flag_updatedBy1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "updatedBy", &(a->contest2__QsoIdVersion::updatedBy), "xsd:string"))
				{	soap_flag_updatedBy1--;
					continue;
				}
			if (soap_flag_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "id", &(a->contest2__QsoIdVersion::id), "xsd:string"))
				{	soap_flag_id1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (contest2__QsoIdVersion *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest2__QsoIdVersion, 0, sizeof(contest2__QsoIdVersion), 0, soap_copy_contest2__QsoIdVersion);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_version1 > 0 || soap_flag_updatedBy1 > 0 || soap_flag_id1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int contest2__QsoIdVersion::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C1_contest2__QsoIdVersion);
	if (this->soap_out(soap, tag?tag:"contest2:QsoIdVersion", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest2__QsoIdVersion::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest2__QsoIdVersion(soap, this, tag, type);
}

SOAP_FMAC3 contest2__QsoIdVersion * SOAP_FMAC4 soap_get_contest2__QsoIdVersion(struct soap *soap, contest2__QsoIdVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest2__QsoIdVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 contest2__QsoIdVersion * SOAP_FMAC2 soap_instantiate_contest2__QsoIdVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest2__QsoIdVersion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C1_contest2__QsoIdVersion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (contest2__QsoIdVersion);
		if (size)
			*size = sizeof(contest2__QsoIdVersion);
		((contest2__QsoIdVersion*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (contest2__QsoIdVersion[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(contest2__QsoIdVersion);
		for (int i = 0; i < n; i++)
			((contest2__QsoIdVersion*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (contest2__QsoIdVersion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_contest2__QsoIdVersion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying contest2__QsoIdVersion %p -> %p\n", q, p));
	*(contest2__QsoIdVersion*)p = *(contest2__QsoIdVersion*)q;
}

void contest2__QsoUpdate::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->contest2__QsoUpdate::qsoArray = NULL;
	soap_default_int(soap, &this->contest2__QsoUpdate::logState);
	/* transient soap skipped */
}

void contest2__QsoUpdate::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTocontest2__ArrayOfQso(soap, &this->contest2__QsoUpdate::qsoArray);
	/* transient soap skipped */
}

int contest2__QsoUpdate::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest2__QsoUpdate(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest2__QsoUpdate(struct soap *soap, const char *tag, int id, const contest2__QsoUpdate *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest2__QsoUpdate), type))
		return soap->error;
	if (soap_out_PointerTocontest2__ArrayOfQso(soap, "qsoArray", -1, &(a->contest2__QsoUpdate::qsoArray), ""))
		return soap->error;
	if (soap_out_int(soap, "logState", -1, &(a->contest2__QsoUpdate::logState), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *contest2__QsoUpdate::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_contest2__QsoUpdate(soap, tag, this, type);
}

SOAP_FMAC3 contest2__QsoUpdate * SOAP_FMAC4 soap_in_contest2__QsoUpdate(struct soap *soap, const char *tag, contest2__QsoUpdate *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest2__QsoUpdate *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest2__QsoUpdate, sizeof(contest2__QsoUpdate), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C1_contest2__QsoUpdate)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (contest2__QsoUpdate *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_qsoArray1 = 1;
	size_t soap_flag_logState1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_qsoArray1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTocontest2__ArrayOfQso(soap, "qsoArray", &(a->contest2__QsoUpdate::qsoArray), "contest2:ArrayOfQso"))
				{	soap_flag_qsoArray1--;
					continue;
				}
			if (soap_flag_logState1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "logState", &(a->contest2__QsoUpdate::logState), "xsd:int"))
				{	soap_flag_logState1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (contest2__QsoUpdate *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest2__QsoUpdate, 0, sizeof(contest2__QsoUpdate), 0, soap_copy_contest2__QsoUpdate);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_qsoArray1 > 0 || soap_flag_logState1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int contest2__QsoUpdate::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C1_contest2__QsoUpdate);
	if (this->soap_out(soap, tag?tag:"contest2:QsoUpdate", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest2__QsoUpdate::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest2__QsoUpdate(soap, this, tag, type);
}

SOAP_FMAC3 contest2__QsoUpdate * SOAP_FMAC4 soap_get_contest2__QsoUpdate(struct soap *soap, contest2__QsoUpdate *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest2__QsoUpdate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 contest2__QsoUpdate * SOAP_FMAC2 soap_instantiate_contest2__QsoUpdate(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest2__QsoUpdate(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C1_contest2__QsoUpdate, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (contest2__QsoUpdate);
		if (size)
			*size = sizeof(contest2__QsoUpdate);
		((contest2__QsoUpdate*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (contest2__QsoUpdate[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(contest2__QsoUpdate);
		for (int i = 0; i < n; i++)
			((contest2__QsoUpdate*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (contest2__QsoUpdate*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_contest2__QsoUpdate(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying contest2__QsoUpdate %p -> %p\n", q, p));
	*(contest2__QsoUpdate*)p = *(contest2__QsoUpdate*)q;
}

void contest2__ArrayOfQso::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTocontest2__Qso(soap, &this->contest2__ArrayOfQso::qso_USCOREel);
	/* transient soap skipped */
}

void contest2__ArrayOfQso::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTocontest2__Qso(soap, &this->contest2__ArrayOfQso::qso_USCOREel);
	/* transient soap skipped */
}

int contest2__ArrayOfQso::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest2__ArrayOfQso(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest2__ArrayOfQso(struct soap *soap, const char *tag, int id, const contest2__ArrayOfQso *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest2__ArrayOfQso), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTocontest2__Qso(soap, "qso_el", -1, &(a->contest2__ArrayOfQso::qso_USCOREel), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *contest2__ArrayOfQso::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_contest2__ArrayOfQso(soap, tag, this, type);
}

SOAP_FMAC3 contest2__ArrayOfQso * SOAP_FMAC4 soap_in_contest2__ArrayOfQso(struct soap *soap, const char *tag, contest2__ArrayOfQso *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest2__ArrayOfQso *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest2__ArrayOfQso, sizeof(contest2__ArrayOfQso), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C1_contest2__ArrayOfQso)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (contest2__ArrayOfQso *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTocontest2__Qso(soap, "qso_el", &(a->contest2__ArrayOfQso::qso_USCOREel), "contest2:Qso"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (contest2__ArrayOfQso *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest2__ArrayOfQso, 0, sizeof(contest2__ArrayOfQso), 0, soap_copy_contest2__ArrayOfQso);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int contest2__ArrayOfQso::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C1_contest2__ArrayOfQso);
	if (this->soap_out(soap, tag?tag:"contest2:ArrayOfQso", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest2__ArrayOfQso::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest2__ArrayOfQso(soap, this, tag, type);
}

SOAP_FMAC3 contest2__ArrayOfQso * SOAP_FMAC4 soap_get_contest2__ArrayOfQso(struct soap *soap, contest2__ArrayOfQso *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest2__ArrayOfQso(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 contest2__ArrayOfQso * SOAP_FMAC2 soap_instantiate_contest2__ArrayOfQso(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest2__ArrayOfQso(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C1_contest2__ArrayOfQso, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (contest2__ArrayOfQso);
		if (size)
			*size = sizeof(contest2__ArrayOfQso);
		((contest2__ArrayOfQso*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (contest2__ArrayOfQso[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(contest2__ArrayOfQso);
		for (int i = 0; i < n; i++)
			((contest2__ArrayOfQso*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (contest2__ArrayOfQso*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_contest2__ArrayOfQso(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying contest2__ArrayOfQso %p -> %p\n", q, p));
	*(contest2__ArrayOfQso*)p = *(contest2__ArrayOfQso*)q;
}

void contest2__Qso::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->contest2__Qso::time64H);
	soap_default_int(soap, &this->contest2__Qso::time64L);
	soap_default_double(soap, &this->contest2__Qso::xmitFreq);
	soap_default_double(soap, &this->contest2__Qso::recvFreq);
	soap_default_int(soap, &this->contest2__Qso::band);
	soap_default_std__string(soap, &this->contest2__Qso::station);
	soap_default_int(soap, &this->contest2__Qso::mode);
	soap_default_int(soap, &this->contest2__Qso::dupe);
	soap_default_int(soap, &this->contest2__Qso::serial);
	this->contest2__Qso::qsoparts = NULL;
	soap_default_int(soap, &this->contest2__Qso::version);
	soap_default_std__string(soap, &this->contest2__Qso::idKey);
	soap_default_std__string(soap, &this->contest2__Qso::updatedBy);
	/* transient soap skipped */
}

void contest2__Qso::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->contest2__Qso::station);
	soap_serialize_PointerTocontest2__ArrayOfstring(soap, &this->contest2__Qso::qsoparts);
	soap_serialize_std__string(soap, &this->contest2__Qso::idKey);
	soap_serialize_std__string(soap, &this->contest2__Qso::updatedBy);
	/* transient soap skipped */
}

int contest2__Qso::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest2__Qso(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest2__Qso(struct soap *soap, const char *tag, int id, const contest2__Qso *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest2__Qso), type))
		return soap->error;
	if (soap_out_int(soap, "time64H", -1, &(a->contest2__Qso::time64H), ""))
		return soap->error;
	if (soap_out_int(soap, "time64L", -1, &(a->contest2__Qso::time64L), ""))
		return soap->error;
	if (soap_out_double(soap, "xmitFreq", -1, &(a->contest2__Qso::xmitFreq), ""))
		return soap->error;
	if (soap_out_double(soap, "recvFreq", -1, &(a->contest2__Qso::recvFreq), ""))
		return soap->error;
	if (soap_out_int(soap, "band", -1, &(a->contest2__Qso::band), ""))
		return soap->error;
	if (soap_out_std__string(soap, "station", -1, &(a->contest2__Qso::station), ""))
		return soap->error;
	if (soap_out_int(soap, "mode", -1, &(a->contest2__Qso::mode), ""))
		return soap->error;
	if (soap_out_int(soap, "dupe", -1, &(a->contest2__Qso::dupe), ""))
		return soap->error;
	if (soap_out_int(soap, "serial", -1, &(a->contest2__Qso::serial), ""))
		return soap->error;
	if (soap_out_PointerTocontest2__ArrayOfstring(soap, "qsoparts", -1, &(a->contest2__Qso::qsoparts), ""))
		return soap->error;
	if (soap_out_int(soap, "version", -1, &(a->contest2__Qso::version), ""))
		return soap->error;
	if (soap_out_std__string(soap, "idKey", -1, &(a->contest2__Qso::idKey), ""))
		return soap->error;
	if (soap_out_std__string(soap, "updatedBy", -1, &(a->contest2__Qso::updatedBy), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *contest2__Qso::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_contest2__Qso(soap, tag, this, type);
}

SOAP_FMAC3 contest2__Qso * SOAP_FMAC4 soap_in_contest2__Qso(struct soap *soap, const char *tag, contest2__Qso *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest2__Qso *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest2__Qso, sizeof(contest2__Qso), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C1_contest2__Qso)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (contest2__Qso *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_time64H1 = 1;
	size_t soap_flag_time64L1 = 1;
	size_t soap_flag_xmitFreq1 = 1;
	size_t soap_flag_recvFreq1 = 1;
	size_t soap_flag_band1 = 1;
	size_t soap_flag_station1 = 1;
	size_t soap_flag_mode1 = 1;
	size_t soap_flag_dupe1 = 1;
	size_t soap_flag_serial1 = 1;
	size_t soap_flag_qsoparts1 = 1;
	size_t soap_flag_version1 = 1;
	size_t soap_flag_idKey1 = 1;
	size_t soap_flag_updatedBy1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_time64H1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "time64H", &(a->contest2__Qso::time64H), "xsd:int"))
				{	soap_flag_time64H1--;
					continue;
				}
			if (soap_flag_time64L1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "time64L", &(a->contest2__Qso::time64L), "xsd:int"))
				{	soap_flag_time64L1--;
					continue;
				}
			if (soap_flag_xmitFreq1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "xmitFreq", &(a->contest2__Qso::xmitFreq), "xsd:double"))
				{	soap_flag_xmitFreq1--;
					continue;
				}
			if (soap_flag_recvFreq1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "recvFreq", &(a->contest2__Qso::recvFreq), "xsd:double"))
				{	soap_flag_recvFreq1--;
					continue;
				}
			if (soap_flag_band1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "band", &(a->contest2__Qso::band), "xsd:int"))
				{	soap_flag_band1--;
					continue;
				}
			if (soap_flag_station1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "station", &(a->contest2__Qso::station), "xsd:string"))
				{	soap_flag_station1--;
					continue;
				}
			if (soap_flag_mode1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "mode", &(a->contest2__Qso::mode), "xsd:int"))
				{	soap_flag_mode1--;
					continue;
				}
			if (soap_flag_dupe1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "dupe", &(a->contest2__Qso::dupe), "xsd:int"))
				{	soap_flag_dupe1--;
					continue;
				}
			if (soap_flag_serial1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "serial", &(a->contest2__Qso::serial), "xsd:int"))
				{	soap_flag_serial1--;
					continue;
				}
			if (soap_flag_qsoparts1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTocontest2__ArrayOfstring(soap, "qsoparts", &(a->contest2__Qso::qsoparts), "contest2:ArrayOfstring"))
				{	soap_flag_qsoparts1--;
					continue;
				}
			if (soap_flag_version1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "version", &(a->contest2__Qso::version), "xsd:int"))
				{	soap_flag_version1--;
					continue;
				}
			if (soap_flag_idKey1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "idKey", &(a->contest2__Qso::idKey), "xsd:string"))
				{	soap_flag_idKey1--;
					continue;
				}
			if (soap_flag_updatedBy1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "updatedBy", &(a->contest2__Qso::updatedBy), "xsd:string"))
				{	soap_flag_updatedBy1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (contest2__Qso *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest2__Qso, 0, sizeof(contest2__Qso), 0, soap_copy_contest2__Qso);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_time64H1 > 0 || soap_flag_time64L1 > 0 || soap_flag_xmitFreq1 > 0 || soap_flag_recvFreq1 > 0 || soap_flag_band1 > 0 || soap_flag_station1 > 0 || soap_flag_mode1 > 0 || soap_flag_dupe1 > 0 || soap_flag_serial1 > 0 || soap_flag_qsoparts1 > 0 || soap_flag_version1 > 0 || soap_flag_idKey1 > 0 || soap_flag_updatedBy1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int contest2__Qso::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C1_contest2__Qso);
	if (this->soap_out(soap, tag?tag:"contest2:Qso", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest2__Qso::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest2__Qso(soap, this, tag, type);
}

SOAP_FMAC3 contest2__Qso * SOAP_FMAC4 soap_get_contest2__Qso(struct soap *soap, contest2__Qso *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest2__Qso(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 contest2__Qso * SOAP_FMAC2 soap_instantiate_contest2__Qso(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest2__Qso(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C1_contest2__Qso, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (contest2__Qso);
		if (size)
			*size = sizeof(contest2__Qso);
		((contest2__Qso*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (contest2__Qso[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(contest2__Qso);
		for (int i = 0; i < n; i++)
			((contest2__Qso*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (contest2__Qso*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_contest2__Qso(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying contest2__Qso %p -> %p\n", q, p));
	*(contest2__Qso*)p = *(contest2__Qso*)q;
}

void contest2__ArrayOfint::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfint(soap, &this->contest2__ArrayOfint::int_USCOREel);
	/* transient soap skipped */
}

void contest2__ArrayOfint::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfint(soap, &this->contest2__ArrayOfint::int_USCOREel);
	/* transient soap skipped */
}

int contest2__ArrayOfint::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest2__ArrayOfint(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest2__ArrayOfint(struct soap *soap, const char *tag, int id, const contest2__ArrayOfint *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest2__ArrayOfint), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfint(soap, "int_el", -1, &(a->contest2__ArrayOfint::int_USCOREel), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *contest2__ArrayOfint::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_contest2__ArrayOfint(soap, tag, this, type);
}

SOAP_FMAC3 contest2__ArrayOfint * SOAP_FMAC4 soap_in_contest2__ArrayOfint(struct soap *soap, const char *tag, contest2__ArrayOfint *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest2__ArrayOfint *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest2__ArrayOfint, sizeof(contest2__ArrayOfint), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C1_contest2__ArrayOfint)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (contest2__ArrayOfint *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfint(soap, "int_el", &(a->contest2__ArrayOfint::int_USCOREel), "xsd:int"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (contest2__ArrayOfint *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest2__ArrayOfint, 0, sizeof(contest2__ArrayOfint), 0, soap_copy_contest2__ArrayOfint);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int contest2__ArrayOfint::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C1_contest2__ArrayOfint);
	if (this->soap_out(soap, tag?tag:"contest2:ArrayOfint", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest2__ArrayOfint::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest2__ArrayOfint(soap, this, tag, type);
}

SOAP_FMAC3 contest2__ArrayOfint * SOAP_FMAC4 soap_get_contest2__ArrayOfint(struct soap *soap, contest2__ArrayOfint *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest2__ArrayOfint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 contest2__ArrayOfint * SOAP_FMAC2 soap_instantiate_contest2__ArrayOfint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest2__ArrayOfint(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C1_contest2__ArrayOfint, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (contest2__ArrayOfint);
		if (size)
			*size = sizeof(contest2__ArrayOfint);
		((contest2__ArrayOfint*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (contest2__ArrayOfint[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(contest2__ArrayOfint);
		for (int i = 0; i < n; i++)
			((contest2__ArrayOfint*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (contest2__ArrayOfint*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_contest2__ArrayOfint(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying contest2__ArrayOfint %p -> %p\n", q, p));
	*(contest2__ArrayOfint*)p = *(contest2__ArrayOfint*)q;
}

void contest2__ArrayOfstring::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfstd__string(soap, &this->contest2__ArrayOfstring::str_USCOREel);
	/* transient soap skipped */
}

void contest2__ArrayOfstring::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfstd__string(soap, &this->contest2__ArrayOfstring::str_USCOREel);
	/* transient soap skipped */
}

int contest2__ArrayOfstring::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest2__ArrayOfstring(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest2__ArrayOfstring(struct soap *soap, const char *tag, int id, const contest2__ArrayOfstring *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest2__ArrayOfstring), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfstd__string(soap, "str_el", -1, &(a->contest2__ArrayOfstring::str_USCOREel), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *contest2__ArrayOfstring::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_contest2__ArrayOfstring(soap, tag, this, type);
}

SOAP_FMAC3 contest2__ArrayOfstring * SOAP_FMAC4 soap_in_contest2__ArrayOfstring(struct soap *soap, const char *tag, contest2__ArrayOfstring *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest2__ArrayOfstring *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest2__ArrayOfstring, sizeof(contest2__ArrayOfstring), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C1_contest2__ArrayOfstring)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (contest2__ArrayOfstring *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfstd__string(soap, "str_el", &(a->contest2__ArrayOfstring::str_USCOREel), "xsd:string"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (contest2__ArrayOfstring *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest2__ArrayOfstring, 0, sizeof(contest2__ArrayOfstring), 0, soap_copy_contest2__ArrayOfstring);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int contest2__ArrayOfstring::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C1_contest2__ArrayOfstring);
	if (this->soap_out(soap, tag?tag:"contest2:ArrayOfstring", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest2__ArrayOfstring::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest2__ArrayOfstring(soap, this, tag, type);
}

SOAP_FMAC3 contest2__ArrayOfstring * SOAP_FMAC4 soap_get_contest2__ArrayOfstring(struct soap *soap, contest2__ArrayOfstring *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest2__ArrayOfstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 contest2__ArrayOfstring * SOAP_FMAC2 soap_instantiate_contest2__ArrayOfstring(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest2__ArrayOfstring(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C1_contest2__ArrayOfstring, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (contest2__ArrayOfstring);
		if (size)
			*size = sizeof(contest2__ArrayOfstring);
		((contest2__ArrayOfstring*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (contest2__ArrayOfstring[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(contest2__ArrayOfstring);
		for (int i = 0; i < n; i++)
			((contest2__ArrayOfstring*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (contest2__ArrayOfstring*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_contest2__ArrayOfstring(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying contest2__ArrayOfstring %p -> %p\n", q, p));
	*(contest2__ArrayOfstring*)p = *(contest2__ArrayOfstring*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C1_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C1_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)new (struct SOAP_ENV__Fault[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C1_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C1_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)new (struct SOAP_ENV__Reason[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag_fault = 1;
	size_t soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C1_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C1_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)new (struct SOAP_ENV__Detail[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C1_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C1_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)new (struct SOAP_ENV__Code[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C1_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C1_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)new (struct SOAP_ENV__Header[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest3__ExchangeFrequencies(struct soap *soap, struct contest3__ExchangeFrequencies *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->_IncomingFreqs = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest3__ExchangeFrequencies(struct soap *soap, const struct contest3__ExchangeFrequencies *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTocontest2__ArrayOfRigFrequency(soap, &a->_IncomingFreqs);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest3__ExchangeFrequencies(struct soap *soap, const char *tag, int id, const struct contest3__ExchangeFrequencies *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest3__ExchangeFrequencies), type))
		return soap->error;
	if (soap_out_PointerTocontest2__ArrayOfRigFrequency(soap, "IncomingFreqs", -1, &a->_IncomingFreqs, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct contest3__ExchangeFrequencies * SOAP_FMAC4 soap_in_contest3__ExchangeFrequencies(struct soap *soap, const char *tag, struct contest3__ExchangeFrequencies *a, const char *type)
{
	size_t soap_flag__IncomingFreqs = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct contest3__ExchangeFrequencies *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest3__ExchangeFrequencies, sizeof(struct contest3__ExchangeFrequencies), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_contest3__ExchangeFrequencies(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__IncomingFreqs && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTocontest2__ArrayOfRigFrequency(soap, NULL, &a->_IncomingFreqs, "contest2:ArrayOfRigFrequency"))
				{	soap_flag__IncomingFreqs--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct contest3__ExchangeFrequencies *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest3__ExchangeFrequencies, 0, sizeof(struct contest3__ExchangeFrequencies), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest3__ExchangeFrequencies(struct soap *soap, const struct contest3__ExchangeFrequencies *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C1_contest3__ExchangeFrequencies);
	if (soap_out_contest3__ExchangeFrequencies(soap, tag?tag:"contest3:ExchangeFrequencies", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct contest3__ExchangeFrequencies * SOAP_FMAC4 soap_get_contest3__ExchangeFrequencies(struct soap *soap, struct contest3__ExchangeFrequencies *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest3__ExchangeFrequencies(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct contest3__ExchangeFrequencies * SOAP_FMAC2 soap_instantiate_contest3__ExchangeFrequencies(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest3__ExchangeFrequencies(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C1_contest3__ExchangeFrequencies, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct contest3__ExchangeFrequencies);
		if (size)
			*size = sizeof(struct contest3__ExchangeFrequencies);
	}
	else
	{	cp->ptr = (void*)new (struct contest3__ExchangeFrequencies[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct contest3__ExchangeFrequencies);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct contest3__ExchangeFrequencies*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_contest3__ExchangeFrequencies(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct contest3__ExchangeFrequencies %p -> %p\n", q, p));
	*(struct contest3__ExchangeFrequencies*)p = *(struct contest3__ExchangeFrequencies*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest3__ExchangeFrequenciesResponse(struct soap *soap, struct contest3__ExchangeFrequenciesResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->_response = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest3__ExchangeFrequenciesResponse(struct soap *soap, const struct contest3__ExchangeFrequenciesResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTocontest2__ArrayOfRigFrequency(soap, &a->_response);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest3__ExchangeFrequenciesResponse(struct soap *soap, const char *tag, int id, const struct contest3__ExchangeFrequenciesResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest3__ExchangeFrequenciesResponse), type))
		return soap->error;
	if (soap_out_PointerTocontest2__ArrayOfRigFrequency(soap, "response", -1, &a->_response, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct contest3__ExchangeFrequenciesResponse * SOAP_FMAC4 soap_in_contest3__ExchangeFrequenciesResponse(struct soap *soap, const char *tag, struct contest3__ExchangeFrequenciesResponse *a, const char *type)
{
	size_t soap_flag__response = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct contest3__ExchangeFrequenciesResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest3__ExchangeFrequenciesResponse, sizeof(struct contest3__ExchangeFrequenciesResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_contest3__ExchangeFrequenciesResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__response && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTocontest2__ArrayOfRigFrequency(soap, NULL, &a->_response, "contest2:ArrayOfRigFrequency"))
				{	soap_flag__response--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct contest3__ExchangeFrequenciesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest3__ExchangeFrequenciesResponse, 0, sizeof(struct contest3__ExchangeFrequenciesResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest3__ExchangeFrequenciesResponse(struct soap *soap, const struct contest3__ExchangeFrequenciesResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C1_contest3__ExchangeFrequenciesResponse);
	if (soap_out_contest3__ExchangeFrequenciesResponse(soap, tag?tag:"contest3:ExchangeFrequenciesResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct contest3__ExchangeFrequenciesResponse * SOAP_FMAC4 soap_get_contest3__ExchangeFrequenciesResponse(struct soap *soap, struct contest3__ExchangeFrequenciesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest3__ExchangeFrequenciesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct contest3__ExchangeFrequenciesResponse * SOAP_FMAC2 soap_instantiate_contest3__ExchangeFrequenciesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest3__ExchangeFrequenciesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C1_contest3__ExchangeFrequenciesResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct contest3__ExchangeFrequenciesResponse);
		if (size)
			*size = sizeof(struct contest3__ExchangeFrequenciesResponse);
	}
	else
	{	cp->ptr = (void*)new (struct contest3__ExchangeFrequenciesResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct contest3__ExchangeFrequenciesResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct contest3__ExchangeFrequenciesResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_contest3__ExchangeFrequenciesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct contest3__ExchangeFrequenciesResponse %p -> %p\n", q, p));
	*(struct contest3__ExchangeFrequenciesResponse*)p = *(struct contest3__ExchangeFrequenciesResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest3__ColumnNamesToIndices(struct soap *soap, struct contest3__ColumnNamesToIndices *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->_SessionId);
	a->_ColumnNames = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest3__ColumnNamesToIndices(struct soap *soap, const struct contest3__ColumnNamesToIndices *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->_SessionId);
	soap_serialize_PointerTocontest2__ArrayOfstring(soap, &a->_ColumnNames);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest3__ColumnNamesToIndices(struct soap *soap, const char *tag, int id, const struct contest3__ColumnNamesToIndices *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest3__ColumnNamesToIndices), type))
		return soap->error;
	if (soap_out_std__string(soap, "SessionId", -1, &a->_SessionId, ""))
		return soap->error;
	if (soap_out_PointerTocontest2__ArrayOfstring(soap, "ColumnNames", -1, &a->_ColumnNames, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct contest3__ColumnNamesToIndices * SOAP_FMAC4 soap_in_contest3__ColumnNamesToIndices(struct soap *soap, const char *tag, struct contest3__ColumnNamesToIndices *a, const char *type)
{
	size_t soap_flag__SessionId = 1;
	size_t soap_flag__ColumnNames = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct contest3__ColumnNamesToIndices *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest3__ColumnNamesToIndices, sizeof(struct contest3__ColumnNamesToIndices), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_contest3__ColumnNamesToIndices(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__SessionId && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_SessionId, "xsd:string"))
				{	soap_flag__SessionId--;
					continue;
				}
			if (soap_flag__ColumnNames && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTocontest2__ArrayOfstring(soap, NULL, &a->_ColumnNames, "contest2:ArrayOfstring"))
				{	soap_flag__ColumnNames--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct contest3__ColumnNamesToIndices *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest3__ColumnNamesToIndices, 0, sizeof(struct contest3__ColumnNamesToIndices), 0, soap_copy_contest3__ColumnNamesToIndices);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__SessionId > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest3__ColumnNamesToIndices(struct soap *soap, const struct contest3__ColumnNamesToIndices *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C1_contest3__ColumnNamesToIndices);
	if (soap_out_contest3__ColumnNamesToIndices(soap, tag?tag:"contest3:ColumnNamesToIndices", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct contest3__ColumnNamesToIndices * SOAP_FMAC4 soap_get_contest3__ColumnNamesToIndices(struct soap *soap, struct contest3__ColumnNamesToIndices *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest3__ColumnNamesToIndices(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct contest3__ColumnNamesToIndices * SOAP_FMAC2 soap_instantiate_contest3__ColumnNamesToIndices(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest3__ColumnNamesToIndices(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C1_contest3__ColumnNamesToIndices, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct contest3__ColumnNamesToIndices);
		if (size)
			*size = sizeof(struct contest3__ColumnNamesToIndices);
	}
	else
	{	cp->ptr = (void*)new (struct contest3__ColumnNamesToIndices[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct contest3__ColumnNamesToIndices);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct contest3__ColumnNamesToIndices*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_contest3__ColumnNamesToIndices(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct contest3__ColumnNamesToIndices %p -> %p\n", q, p));
	*(struct contest3__ColumnNamesToIndices*)p = *(struct contest3__ColumnNamesToIndices*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest3__ColumnNamesToIndicesResponse(struct soap *soap, struct contest3__ColumnNamesToIndicesResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->_response = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest3__ColumnNamesToIndicesResponse(struct soap *soap, const struct contest3__ColumnNamesToIndicesResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTocontest2__ArrayOfint(soap, &a->_response);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest3__ColumnNamesToIndicesResponse(struct soap *soap, const char *tag, int id, const struct contest3__ColumnNamesToIndicesResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest3__ColumnNamesToIndicesResponse), type))
		return soap->error;
	if (soap_out_PointerTocontest2__ArrayOfint(soap, "response", -1, &a->_response, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct contest3__ColumnNamesToIndicesResponse * SOAP_FMAC4 soap_in_contest3__ColumnNamesToIndicesResponse(struct soap *soap, const char *tag, struct contest3__ColumnNamesToIndicesResponse *a, const char *type)
{
	size_t soap_flag__response = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct contest3__ColumnNamesToIndicesResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest3__ColumnNamesToIndicesResponse, sizeof(struct contest3__ColumnNamesToIndicesResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_contest3__ColumnNamesToIndicesResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__response && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTocontest2__ArrayOfint(soap, NULL, &a->_response, "contest2:ArrayOfint"))
				{	soap_flag__response--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct contest3__ColumnNamesToIndicesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest3__ColumnNamesToIndicesResponse, 0, sizeof(struct contest3__ColumnNamesToIndicesResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest3__ColumnNamesToIndicesResponse(struct soap *soap, const struct contest3__ColumnNamesToIndicesResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C1_contest3__ColumnNamesToIndicesResponse);
	if (soap_out_contest3__ColumnNamesToIndicesResponse(soap, tag?tag:"contest3:ColumnNamesToIndicesResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct contest3__ColumnNamesToIndicesResponse * SOAP_FMAC4 soap_get_contest3__ColumnNamesToIndicesResponse(struct soap *soap, struct contest3__ColumnNamesToIndicesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest3__ColumnNamesToIndicesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct contest3__ColumnNamesToIndicesResponse * SOAP_FMAC2 soap_instantiate_contest3__ColumnNamesToIndicesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest3__ColumnNamesToIndicesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C1_contest3__ColumnNamesToIndicesResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct contest3__ColumnNamesToIndicesResponse);
		if (size)
			*size = sizeof(struct contest3__ColumnNamesToIndicesResponse);
	}
	else
	{	cp->ptr = (void*)new (struct contest3__ColumnNamesToIndicesResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct contest3__ColumnNamesToIndicesResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct contest3__ColumnNamesToIndicesResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_contest3__ColumnNamesToIndicesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct contest3__ColumnNamesToIndicesResponse %p -> %p\n", q, p));
	*(struct contest3__ColumnNamesToIndicesResponse*)p = *(struct contest3__ColumnNamesToIndicesResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest3__getQsosByKeyArray(struct soap *soap, struct contest3__getQsosByKeyArray *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->_SessionId);
	a->_QsoKeyArray = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest3__getQsosByKeyArray(struct soap *soap, const struct contest3__getQsosByKeyArray *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->_SessionId);
	soap_serialize_PointerTocontest2__ArrayOfstring(soap, &a->_QsoKeyArray);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest3__getQsosByKeyArray(struct soap *soap, const char *tag, int id, const struct contest3__getQsosByKeyArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest3__getQsosByKeyArray), type))
		return soap->error;
	if (soap_out_std__string(soap, "SessionId", -1, &a->_SessionId, ""))
		return soap->error;
	if (soap_out_PointerTocontest2__ArrayOfstring(soap, "QsoKeyArray", -1, &a->_QsoKeyArray, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct contest3__getQsosByKeyArray * SOAP_FMAC4 soap_in_contest3__getQsosByKeyArray(struct soap *soap, const char *tag, struct contest3__getQsosByKeyArray *a, const char *type)
{
	size_t soap_flag__SessionId = 1;
	size_t soap_flag__QsoKeyArray = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct contest3__getQsosByKeyArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest3__getQsosByKeyArray, sizeof(struct contest3__getQsosByKeyArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_contest3__getQsosByKeyArray(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__SessionId && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_SessionId, "xsd:string"))
				{	soap_flag__SessionId--;
					continue;
				}
			if (soap_flag__QsoKeyArray && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTocontest2__ArrayOfstring(soap, NULL, &a->_QsoKeyArray, "contest2:ArrayOfstring"))
				{	soap_flag__QsoKeyArray--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct contest3__getQsosByKeyArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest3__getQsosByKeyArray, 0, sizeof(struct contest3__getQsosByKeyArray), 0, soap_copy_contest3__getQsosByKeyArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__SessionId > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest3__getQsosByKeyArray(struct soap *soap, const struct contest3__getQsosByKeyArray *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C1_contest3__getQsosByKeyArray);
	if (soap_out_contest3__getQsosByKeyArray(soap, tag?tag:"contest3:getQsosByKeyArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct contest3__getQsosByKeyArray * SOAP_FMAC4 soap_get_contest3__getQsosByKeyArray(struct soap *soap, struct contest3__getQsosByKeyArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest3__getQsosByKeyArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct contest3__getQsosByKeyArray * SOAP_FMAC2 soap_instantiate_contest3__getQsosByKeyArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest3__getQsosByKeyArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C1_contest3__getQsosByKeyArray, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct contest3__getQsosByKeyArray);
		if (size)
			*size = sizeof(struct contest3__getQsosByKeyArray);
	}
	else
	{	cp->ptr = (void*)new (struct contest3__getQsosByKeyArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct contest3__getQsosByKeyArray);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct contest3__getQsosByKeyArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_contest3__getQsosByKeyArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct contest3__getQsosByKeyArray %p -> %p\n", q, p));
	*(struct contest3__getQsosByKeyArray*)p = *(struct contest3__getQsosByKeyArray*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest3__getQsosByKeyArrayResponse(struct soap *soap, struct contest3__getQsosByKeyArrayResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->_response = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest3__getQsosByKeyArrayResponse(struct soap *soap, const struct contest3__getQsosByKeyArrayResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTocontest2__QsoUpdate(soap, &a->_response);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest3__getQsosByKeyArrayResponse(struct soap *soap, const char *tag, int id, const struct contest3__getQsosByKeyArrayResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest3__getQsosByKeyArrayResponse), type))
		return soap->error;
	if (soap_out_PointerTocontest2__QsoUpdate(soap, "response", -1, &a->_response, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct contest3__getQsosByKeyArrayResponse * SOAP_FMAC4 soap_in_contest3__getQsosByKeyArrayResponse(struct soap *soap, const char *tag, struct contest3__getQsosByKeyArrayResponse *a, const char *type)
{
	size_t soap_flag__response = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct contest3__getQsosByKeyArrayResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest3__getQsosByKeyArrayResponse, sizeof(struct contest3__getQsosByKeyArrayResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_contest3__getQsosByKeyArrayResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__response && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTocontest2__QsoUpdate(soap, NULL, &a->_response, "contest2:QsoUpdate"))
				{	soap_flag__response--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct contest3__getQsosByKeyArrayResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest3__getQsosByKeyArrayResponse, 0, sizeof(struct contest3__getQsosByKeyArrayResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest3__getQsosByKeyArrayResponse(struct soap *soap, const struct contest3__getQsosByKeyArrayResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C1_contest3__getQsosByKeyArrayResponse);
	if (soap_out_contest3__getQsosByKeyArrayResponse(soap, tag?tag:"contest3:getQsosByKeyArrayResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct contest3__getQsosByKeyArrayResponse * SOAP_FMAC4 soap_get_contest3__getQsosByKeyArrayResponse(struct soap *soap, struct contest3__getQsosByKeyArrayResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest3__getQsosByKeyArrayResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct contest3__getQsosByKeyArrayResponse * SOAP_FMAC2 soap_instantiate_contest3__getQsosByKeyArrayResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest3__getQsosByKeyArrayResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C1_contest3__getQsosByKeyArrayResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct contest3__getQsosByKeyArrayResponse);
		if (size)
			*size = sizeof(struct contest3__getQsosByKeyArrayResponse);
	}
	else
	{	cp->ptr = (void*)new (struct contest3__getQsosByKeyArrayResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct contest3__getQsosByKeyArrayResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct contest3__getQsosByKeyArrayResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_contest3__getQsosByKeyArrayResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct contest3__getQsosByKeyArrayResponse %p -> %p\n", q, p));
	*(struct contest3__getQsosByKeyArrayResponse*)p = *(struct contest3__getQsosByKeyArrayResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest3__addAndGetQsos(struct soap *soap, struct contest3__addAndGetQsos *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->_SessionId);
	a->_QsoAddArray = NULL;
	soap_default_int(soap, &a->_OldState);
	soap_default_int(soap, &a->_MaxRequested);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest3__addAndGetQsos(struct soap *soap, const struct contest3__addAndGetQsos *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->_SessionId);
	soap_serialize_PointerTocontest2__ArrayOfQso(soap, &a->_QsoAddArray);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest3__addAndGetQsos(struct soap *soap, const char *tag, int id, const struct contest3__addAndGetQsos *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest3__addAndGetQsos), type))
		return soap->error;
	if (soap_out_std__string(soap, "SessionId", -1, &a->_SessionId, ""))
		return soap->error;
	if (soap_out_PointerTocontest2__ArrayOfQso(soap, "QsoAddArray", -1, &a->_QsoAddArray, ""))
		return soap->error;
	if (soap_out_int(soap, "OldState", -1, &a->_OldState, ""))
		return soap->error;
	if (soap_out_int(soap, "MaxRequested", -1, &a->_MaxRequested, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct contest3__addAndGetQsos * SOAP_FMAC4 soap_in_contest3__addAndGetQsos(struct soap *soap, const char *tag, struct contest3__addAndGetQsos *a, const char *type)
{
	size_t soap_flag__SessionId = 1;
	size_t soap_flag__QsoAddArray = 1;
	size_t soap_flag__OldState = 1;
	size_t soap_flag__MaxRequested = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct contest3__addAndGetQsos *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest3__addAndGetQsos, sizeof(struct contest3__addAndGetQsos), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_contest3__addAndGetQsos(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__SessionId && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_SessionId, "xsd:string"))
				{	soap_flag__SessionId--;
					continue;
				}
			if (soap_flag__QsoAddArray && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTocontest2__ArrayOfQso(soap, NULL, &a->_QsoAddArray, "contest2:ArrayOfQso"))
				{	soap_flag__QsoAddArray--;
					continue;
				}
			if (soap_flag__OldState && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, NULL, &a->_OldState, "xsd:int"))
				{	soap_flag__OldState--;
					continue;
				}
			if (soap_flag__MaxRequested && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, NULL, &a->_MaxRequested, "xsd:int"))
				{	soap_flag__MaxRequested--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct contest3__addAndGetQsos *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest3__addAndGetQsos, 0, sizeof(struct contest3__addAndGetQsos), 0, soap_copy_contest3__addAndGetQsos);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__SessionId > 0 || soap_flag__OldState > 0 || soap_flag__MaxRequested > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest3__addAndGetQsos(struct soap *soap, const struct contest3__addAndGetQsos *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C1_contest3__addAndGetQsos);
	if (soap_out_contest3__addAndGetQsos(soap, tag?tag:"contest3:addAndGetQsos", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct contest3__addAndGetQsos * SOAP_FMAC4 soap_get_contest3__addAndGetQsos(struct soap *soap, struct contest3__addAndGetQsos *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest3__addAndGetQsos(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct contest3__addAndGetQsos * SOAP_FMAC2 soap_instantiate_contest3__addAndGetQsos(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest3__addAndGetQsos(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C1_contest3__addAndGetQsos, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct contest3__addAndGetQsos);
		if (size)
			*size = sizeof(struct contest3__addAndGetQsos);
	}
	else
	{	cp->ptr = (void*)new (struct contest3__addAndGetQsos[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct contest3__addAndGetQsos);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct contest3__addAndGetQsos*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_contest3__addAndGetQsos(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct contest3__addAndGetQsos %p -> %p\n", q, p));
	*(struct contest3__addAndGetQsos*)p = *(struct contest3__addAndGetQsos*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest3__addAndGetQsosResponse(struct soap *soap, struct contest3__addAndGetQsosResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->_response = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest3__addAndGetQsosResponse(struct soap *soap, const struct contest3__addAndGetQsosResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTocontest2__QsoUpdate(soap, &a->_response);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest3__addAndGetQsosResponse(struct soap *soap, const char *tag, int id, const struct contest3__addAndGetQsosResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest3__addAndGetQsosResponse), type))
		return soap->error;
	if (soap_out_PointerTocontest2__QsoUpdate(soap, "response", -1, &a->_response, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct contest3__addAndGetQsosResponse * SOAP_FMAC4 soap_in_contest3__addAndGetQsosResponse(struct soap *soap, const char *tag, struct contest3__addAndGetQsosResponse *a, const char *type)
{
	size_t soap_flag__response = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct contest3__addAndGetQsosResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest3__addAndGetQsosResponse, sizeof(struct contest3__addAndGetQsosResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_contest3__addAndGetQsosResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__response && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTocontest2__QsoUpdate(soap, NULL, &a->_response, "contest2:QsoUpdate"))
				{	soap_flag__response--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct contest3__addAndGetQsosResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest3__addAndGetQsosResponse, 0, sizeof(struct contest3__addAndGetQsosResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest3__addAndGetQsosResponse(struct soap *soap, const struct contest3__addAndGetQsosResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C1_contest3__addAndGetQsosResponse);
	if (soap_out_contest3__addAndGetQsosResponse(soap, tag?tag:"contest3:addAndGetQsosResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct contest3__addAndGetQsosResponse * SOAP_FMAC4 soap_get_contest3__addAndGetQsosResponse(struct soap *soap, struct contest3__addAndGetQsosResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest3__addAndGetQsosResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct contest3__addAndGetQsosResponse * SOAP_FMAC2 soap_instantiate_contest3__addAndGetQsosResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest3__addAndGetQsosResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C1_contest3__addAndGetQsosResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct contest3__addAndGetQsosResponse);
		if (size)
			*size = sizeof(struct contest3__addAndGetQsosResponse);
	}
	else
	{	cp->ptr = (void*)new (struct contest3__addAndGetQsosResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct contest3__addAndGetQsosResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct contest3__addAndGetQsosResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_contest3__addAndGetQsosResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct contest3__addAndGetQsosResponse %p -> %p\n", q, p));
	*(struct contest3__addAndGetQsosResponse*)p = *(struct contest3__addAndGetQsosResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest3__AddAndGetLogSummary(struct soap *soap, struct contest3__AddAndGetLogSummary *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->_SessionId);
	a->_QsoAddArray = NULL;
	soap_default_int(soap, &a->_OldState);
	soap_default_int(soap, &a->_MaxRequested);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest3__AddAndGetLogSummary(struct soap *soap, const struct contest3__AddAndGetLogSummary *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->_SessionId);
	soap_serialize_PointerTocontest2__ArrayOfQso(soap, &a->_QsoAddArray);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest3__AddAndGetLogSummary(struct soap *soap, const char *tag, int id, const struct contest3__AddAndGetLogSummary *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest3__AddAndGetLogSummary), type))
		return soap->error;
	if (soap_out_std__string(soap, "SessionId", -1, &a->_SessionId, ""))
		return soap->error;
	if (soap_out_PointerTocontest2__ArrayOfQso(soap, "QsoAddArray", -1, &a->_QsoAddArray, ""))
		return soap->error;
	if (soap_out_int(soap, "OldState", -1, &a->_OldState, ""))
		return soap->error;
	if (soap_out_int(soap, "MaxRequested", -1, &a->_MaxRequested, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct contest3__AddAndGetLogSummary * SOAP_FMAC4 soap_in_contest3__AddAndGetLogSummary(struct soap *soap, const char *tag, struct contest3__AddAndGetLogSummary *a, const char *type)
{
	size_t soap_flag__SessionId = 1;
	size_t soap_flag__QsoAddArray = 1;
	size_t soap_flag__OldState = 1;
	size_t soap_flag__MaxRequested = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct contest3__AddAndGetLogSummary *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest3__AddAndGetLogSummary, sizeof(struct contest3__AddAndGetLogSummary), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_contest3__AddAndGetLogSummary(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__SessionId && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_SessionId, "xsd:string"))
				{	soap_flag__SessionId--;
					continue;
				}
			if (soap_flag__QsoAddArray && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTocontest2__ArrayOfQso(soap, NULL, &a->_QsoAddArray, "contest2:ArrayOfQso"))
				{	soap_flag__QsoAddArray--;
					continue;
				}
			if (soap_flag__OldState && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, NULL, &a->_OldState, "xsd:int"))
				{	soap_flag__OldState--;
					continue;
				}
			if (soap_flag__MaxRequested && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, NULL, &a->_MaxRequested, "xsd:int"))
				{	soap_flag__MaxRequested--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct contest3__AddAndGetLogSummary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest3__AddAndGetLogSummary, 0, sizeof(struct contest3__AddAndGetLogSummary), 0, soap_copy_contest3__AddAndGetLogSummary);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__SessionId > 0 || soap_flag__OldState > 0 || soap_flag__MaxRequested > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest3__AddAndGetLogSummary(struct soap *soap, const struct contest3__AddAndGetLogSummary *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C1_contest3__AddAndGetLogSummary);
	if (soap_out_contest3__AddAndGetLogSummary(soap, tag?tag:"contest3:AddAndGetLogSummary", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct contest3__AddAndGetLogSummary * SOAP_FMAC4 soap_get_contest3__AddAndGetLogSummary(struct soap *soap, struct contest3__AddAndGetLogSummary *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest3__AddAndGetLogSummary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct contest3__AddAndGetLogSummary * SOAP_FMAC2 soap_instantiate_contest3__AddAndGetLogSummary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest3__AddAndGetLogSummary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C1_contest3__AddAndGetLogSummary, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct contest3__AddAndGetLogSummary);
		if (size)
			*size = sizeof(struct contest3__AddAndGetLogSummary);
	}
	else
	{	cp->ptr = (void*)new (struct contest3__AddAndGetLogSummary[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct contest3__AddAndGetLogSummary);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct contest3__AddAndGetLogSummary*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_contest3__AddAndGetLogSummary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct contest3__AddAndGetLogSummary %p -> %p\n", q, p));
	*(struct contest3__AddAndGetLogSummary*)p = *(struct contest3__AddAndGetLogSummary*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest3__AddAndGetLogSummaryResponse(struct soap *soap, struct contest3__AddAndGetLogSummaryResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->_response = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest3__AddAndGetLogSummaryResponse(struct soap *soap, const struct contest3__AddAndGetLogSummaryResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTocontest2__LogSummary(soap, &a->_response);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest3__AddAndGetLogSummaryResponse(struct soap *soap, const char *tag, int id, const struct contest3__AddAndGetLogSummaryResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest3__AddAndGetLogSummaryResponse), type))
		return soap->error;
	if (soap_out_PointerTocontest2__LogSummary(soap, "response", -1, &a->_response, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct contest3__AddAndGetLogSummaryResponse * SOAP_FMAC4 soap_in_contest3__AddAndGetLogSummaryResponse(struct soap *soap, const char *tag, struct contest3__AddAndGetLogSummaryResponse *a, const char *type)
{
	size_t soap_flag__response = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct contest3__AddAndGetLogSummaryResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest3__AddAndGetLogSummaryResponse, sizeof(struct contest3__AddAndGetLogSummaryResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_contest3__AddAndGetLogSummaryResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__response && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTocontest2__LogSummary(soap, NULL, &a->_response, "contest2:LogSummary"))
				{	soap_flag__response--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct contest3__AddAndGetLogSummaryResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest3__AddAndGetLogSummaryResponse, 0, sizeof(struct contest3__AddAndGetLogSummaryResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest3__AddAndGetLogSummaryResponse(struct soap *soap, const struct contest3__AddAndGetLogSummaryResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C1_contest3__AddAndGetLogSummaryResponse);
	if (soap_out_contest3__AddAndGetLogSummaryResponse(soap, tag?tag:"contest3:AddAndGetLogSummaryResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct contest3__AddAndGetLogSummaryResponse * SOAP_FMAC4 soap_get_contest3__AddAndGetLogSummaryResponse(struct soap *soap, struct contest3__AddAndGetLogSummaryResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest3__AddAndGetLogSummaryResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct contest3__AddAndGetLogSummaryResponse * SOAP_FMAC2 soap_instantiate_contest3__AddAndGetLogSummaryResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest3__AddAndGetLogSummaryResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C1_contest3__AddAndGetLogSummaryResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct contest3__AddAndGetLogSummaryResponse);
		if (size)
			*size = sizeof(struct contest3__AddAndGetLogSummaryResponse);
	}
	else
	{	cp->ptr = (void*)new (struct contest3__AddAndGetLogSummaryResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct contest3__AddAndGetLogSummaryResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct contest3__AddAndGetLogSummaryResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_contest3__AddAndGetLogSummaryResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct contest3__AddAndGetLogSummaryResponse %p -> %p\n", q, p));
	*(struct contest3__AddAndGetLogSummaryResponse*)p = *(struct contest3__AddAndGetLogSummaryResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest3__GetSessionId(struct soap *soap, struct contest3__GetSessionId *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest3__GetSessionId(struct soap *soap, const struct contest3__GetSessionId *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest3__GetSessionId(struct soap *soap, const char *tag, int id, const struct contest3__GetSessionId *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest3__GetSessionId), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct contest3__GetSessionId * SOAP_FMAC4 soap_in_contest3__GetSessionId(struct soap *soap, const char *tag, struct contest3__GetSessionId *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct contest3__GetSessionId *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest3__GetSessionId, sizeof(struct contest3__GetSessionId), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_contest3__GetSessionId(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct contest3__GetSessionId *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest3__GetSessionId, 0, sizeof(struct contest3__GetSessionId), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest3__GetSessionId(struct soap *soap, const struct contest3__GetSessionId *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C1_contest3__GetSessionId);
	if (soap_out_contest3__GetSessionId(soap, tag?tag:"contest3:GetSessionId", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct contest3__GetSessionId * SOAP_FMAC4 soap_get_contest3__GetSessionId(struct soap *soap, struct contest3__GetSessionId *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest3__GetSessionId(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct contest3__GetSessionId * SOAP_FMAC2 soap_instantiate_contest3__GetSessionId(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest3__GetSessionId(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C1_contest3__GetSessionId, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct contest3__GetSessionId);
		if (size)
			*size = sizeof(struct contest3__GetSessionId);
	}
	else
	{	cp->ptr = (void*)new (struct contest3__GetSessionId[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct contest3__GetSessionId);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct contest3__GetSessionId*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_contest3__GetSessionId(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct contest3__GetSessionId %p -> %p\n", q, p));
	*(struct contest3__GetSessionId*)p = *(struct contest3__GetSessionId*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest3__GetSessionIdResponse(struct soap *soap, struct contest3__GetSessionIdResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->response);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest3__GetSessionIdResponse(struct soap *soap, const struct contest3__GetSessionIdResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->response);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest3__GetSessionIdResponse(struct soap *soap, const char *tag, int id, const struct contest3__GetSessionIdResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest3__GetSessionIdResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "response", -1, &a->response, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct contest3__GetSessionIdResponse * SOAP_FMAC4 soap_in_contest3__GetSessionIdResponse(struct soap *soap, const char *tag, struct contest3__GetSessionIdResponse *a, const char *type)
{
	size_t soap_flag_response = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct contest3__GetSessionIdResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest3__GetSessionIdResponse, sizeof(struct contest3__GetSessionIdResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_contest3__GetSessionIdResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_response && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "response", &a->response, "xsd:string"))
				{	soap_flag_response--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct contest3__GetSessionIdResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest3__GetSessionIdResponse, 0, sizeof(struct contest3__GetSessionIdResponse), 0, soap_copy_contest3__GetSessionIdResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_response > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest3__GetSessionIdResponse(struct soap *soap, const struct contest3__GetSessionIdResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C1_contest3__GetSessionIdResponse);
	if (soap_out_contest3__GetSessionIdResponse(soap, tag?tag:"contest3:GetSessionIdResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct contest3__GetSessionIdResponse * SOAP_FMAC4 soap_get_contest3__GetSessionIdResponse(struct soap *soap, struct contest3__GetSessionIdResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest3__GetSessionIdResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct contest3__GetSessionIdResponse * SOAP_FMAC2 soap_instantiate_contest3__GetSessionIdResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest3__GetSessionIdResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C1_contest3__GetSessionIdResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct contest3__GetSessionIdResponse);
		if (size)
			*size = sizeof(struct contest3__GetSessionIdResponse);
	}
	else
	{	cp->ptr = (void*)new (struct contest3__GetSessionIdResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct contest3__GetSessionIdResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct contest3__GetSessionIdResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_contest3__GetSessionIdResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct contest3__GetSessionIdResponse %p -> %p\n", q, p));
	*(struct contest3__GetSessionIdResponse*)p = *(struct contest3__GetSessionIdResponse*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C1_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C1_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C1_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C1_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C1_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C1_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C1_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C1_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C1_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C1_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C1_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C1_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest2__ArrayOfRigFrequency(struct soap *soap, contest2__ArrayOfRigFrequency *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C1_contest2__ArrayOfRigFrequency))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest2__ArrayOfRigFrequency(struct soap *soap, const char *tag, int id, contest2__ArrayOfRigFrequency *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C1_contest2__ArrayOfRigFrequency);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 contest2__ArrayOfRigFrequency ** SOAP_FMAC4 soap_in_PointerTocontest2__ArrayOfRigFrequency(struct soap *soap, const char *tag, contest2__ArrayOfRigFrequency **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest2__ArrayOfRigFrequency **)soap_malloc(soap, sizeof(contest2__ArrayOfRigFrequency *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest2__ArrayOfRigFrequency *)soap_instantiate_contest2__ArrayOfRigFrequency(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	contest2__ArrayOfRigFrequency ** p = (contest2__ArrayOfRigFrequency **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C1_contest2__ArrayOfRigFrequency, sizeof(contest2__ArrayOfRigFrequency), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest2__ArrayOfRigFrequency(struct soap *soap, contest2__ArrayOfRigFrequency *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C1_PointerTocontest2__ArrayOfRigFrequency);
	if (soap_out_PointerTocontest2__ArrayOfRigFrequency(soap, tag?tag:"contest2:ArrayOfRigFrequency", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest2__ArrayOfRigFrequency ** SOAP_FMAC4 soap_get_PointerTocontest2__ArrayOfRigFrequency(struct soap *soap, contest2__ArrayOfRigFrequency **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest2__ArrayOfRigFrequency(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest2__ArrayOfint(struct soap *soap, contest2__ArrayOfint *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C1_contest2__ArrayOfint))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest2__ArrayOfint(struct soap *soap, const char *tag, int id, contest2__ArrayOfint *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C1_contest2__ArrayOfint);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 contest2__ArrayOfint ** SOAP_FMAC4 soap_in_PointerTocontest2__ArrayOfint(struct soap *soap, const char *tag, contest2__ArrayOfint **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest2__ArrayOfint **)soap_malloc(soap, sizeof(contest2__ArrayOfint *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest2__ArrayOfint *)soap_instantiate_contest2__ArrayOfint(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	contest2__ArrayOfint ** p = (contest2__ArrayOfint **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C1_contest2__ArrayOfint, sizeof(contest2__ArrayOfint), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest2__ArrayOfint(struct soap *soap, contest2__ArrayOfint *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C1_PointerTocontest2__ArrayOfint);
	if (soap_out_PointerTocontest2__ArrayOfint(soap, tag?tag:"contest2:ArrayOfint", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest2__ArrayOfint ** SOAP_FMAC4 soap_get_PointerTocontest2__ArrayOfint(struct soap *soap, contest2__ArrayOfint **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest2__ArrayOfint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest2__QsoUpdate(struct soap *soap, contest2__QsoUpdate *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C1_contest2__QsoUpdate))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest2__QsoUpdate(struct soap *soap, const char *tag, int id, contest2__QsoUpdate *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C1_contest2__QsoUpdate);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 contest2__QsoUpdate ** SOAP_FMAC4 soap_in_PointerTocontest2__QsoUpdate(struct soap *soap, const char *tag, contest2__QsoUpdate **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest2__QsoUpdate **)soap_malloc(soap, sizeof(contest2__QsoUpdate *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest2__QsoUpdate *)soap_instantiate_contest2__QsoUpdate(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	contest2__QsoUpdate ** p = (contest2__QsoUpdate **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C1_contest2__QsoUpdate, sizeof(contest2__QsoUpdate), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest2__QsoUpdate(struct soap *soap, contest2__QsoUpdate *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C1_PointerTocontest2__QsoUpdate);
	if (soap_out_PointerTocontest2__QsoUpdate(soap, tag?tag:"contest2:QsoUpdate", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest2__QsoUpdate ** SOAP_FMAC4 soap_get_PointerTocontest2__QsoUpdate(struct soap *soap, contest2__QsoUpdate **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest2__QsoUpdate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest2__LogSummary(struct soap *soap, contest2__LogSummary *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C1_contest2__LogSummary))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest2__LogSummary(struct soap *soap, const char *tag, int id, contest2__LogSummary *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C1_contest2__LogSummary);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 contest2__LogSummary ** SOAP_FMAC4 soap_in_PointerTocontest2__LogSummary(struct soap *soap, const char *tag, contest2__LogSummary **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest2__LogSummary **)soap_malloc(soap, sizeof(contest2__LogSummary *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest2__LogSummary *)soap_instantiate_contest2__LogSummary(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	contest2__LogSummary ** p = (contest2__LogSummary **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C1_contest2__LogSummary, sizeof(contest2__LogSummary), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest2__LogSummary(struct soap *soap, contest2__LogSummary *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C1_PointerTocontest2__LogSummary);
	if (soap_out_PointerTocontest2__LogSummary(soap, tag?tag:"contest2:LogSummary", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest2__LogSummary ** SOAP_FMAC4 soap_get_PointerTocontest2__LogSummary(struct soap *soap, contest2__LogSummary **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest2__LogSummary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest2__RigFrequency(struct soap *soap, contest2__RigFrequency *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C1_contest2__RigFrequency))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest2__RigFrequency(struct soap *soap, const char *tag, int id, contest2__RigFrequency *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C1_contest2__RigFrequency);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 contest2__RigFrequency ** SOAP_FMAC4 soap_in_PointerTocontest2__RigFrequency(struct soap *soap, const char *tag, contest2__RigFrequency **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest2__RigFrequency **)soap_malloc(soap, sizeof(contest2__RigFrequency *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest2__RigFrequency *)soap_instantiate_contest2__RigFrequency(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	contest2__RigFrequency ** p = (contest2__RigFrequency **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C1_contest2__RigFrequency, sizeof(contest2__RigFrequency), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest2__RigFrequency(struct soap *soap, contest2__RigFrequency *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C1_PointerTocontest2__RigFrequency);
	if (soap_out_PointerTocontest2__RigFrequency(soap, tag?tag:"contest2:RigFrequency", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest2__RigFrequency ** SOAP_FMAC4 soap_get_PointerTocontest2__RigFrequency(struct soap *soap, contest2__RigFrequency **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest2__RigFrequency(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest2__ArrayOfQsoIdVersion(struct soap *soap, contest2__ArrayOfQsoIdVersion *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest2__ArrayOfQsoIdVersion(struct soap *soap, const char *tag, int id, contest2__ArrayOfQsoIdVersion *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 contest2__ArrayOfQsoIdVersion ** SOAP_FMAC4 soap_in_PointerTocontest2__ArrayOfQsoIdVersion(struct soap *soap, const char *tag, contest2__ArrayOfQsoIdVersion **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest2__ArrayOfQsoIdVersion **)soap_malloc(soap, sizeof(contest2__ArrayOfQsoIdVersion *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest2__ArrayOfQsoIdVersion *)soap_instantiate_contest2__ArrayOfQsoIdVersion(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	contest2__ArrayOfQsoIdVersion ** p = (contest2__ArrayOfQsoIdVersion **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion, sizeof(contest2__ArrayOfQsoIdVersion), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest2__ArrayOfQsoIdVersion(struct soap *soap, contest2__ArrayOfQsoIdVersion *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C1_PointerTocontest2__ArrayOfQsoIdVersion);
	if (soap_out_PointerTocontest2__ArrayOfQsoIdVersion(soap, tag?tag:"contest2:ArrayOfQsoIdVersion", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest2__ArrayOfQsoIdVersion ** SOAP_FMAC4 soap_get_PointerTocontest2__ArrayOfQsoIdVersion(struct soap *soap, contest2__ArrayOfQsoIdVersion **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest2__ArrayOfQsoIdVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest2__QsoIdVersion(struct soap *soap, contest2__QsoIdVersion *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C1_contest2__QsoIdVersion))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest2__QsoIdVersion(struct soap *soap, const char *tag, int id, contest2__QsoIdVersion *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C1_contest2__QsoIdVersion);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 contest2__QsoIdVersion ** SOAP_FMAC4 soap_in_PointerTocontest2__QsoIdVersion(struct soap *soap, const char *tag, contest2__QsoIdVersion **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest2__QsoIdVersion **)soap_malloc(soap, sizeof(contest2__QsoIdVersion *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest2__QsoIdVersion *)soap_instantiate_contest2__QsoIdVersion(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	contest2__QsoIdVersion ** p = (contest2__QsoIdVersion **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C1_contest2__QsoIdVersion, sizeof(contest2__QsoIdVersion), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest2__QsoIdVersion(struct soap *soap, contest2__QsoIdVersion *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C1_PointerTocontest2__QsoIdVersion);
	if (soap_out_PointerTocontest2__QsoIdVersion(soap, tag?tag:"contest2:QsoIdVersion", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest2__QsoIdVersion ** SOAP_FMAC4 soap_get_PointerTocontest2__QsoIdVersion(struct soap *soap, contest2__QsoIdVersion **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest2__QsoIdVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest2__ArrayOfQso(struct soap *soap, contest2__ArrayOfQso *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C1_contest2__ArrayOfQso))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest2__ArrayOfQso(struct soap *soap, const char *tag, int id, contest2__ArrayOfQso *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C1_contest2__ArrayOfQso);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 contest2__ArrayOfQso ** SOAP_FMAC4 soap_in_PointerTocontest2__ArrayOfQso(struct soap *soap, const char *tag, contest2__ArrayOfQso **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest2__ArrayOfQso **)soap_malloc(soap, sizeof(contest2__ArrayOfQso *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest2__ArrayOfQso *)soap_instantiate_contest2__ArrayOfQso(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	contest2__ArrayOfQso ** p = (contest2__ArrayOfQso **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C1_contest2__ArrayOfQso, sizeof(contest2__ArrayOfQso), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest2__ArrayOfQso(struct soap *soap, contest2__ArrayOfQso *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C1_PointerTocontest2__ArrayOfQso);
	if (soap_out_PointerTocontest2__ArrayOfQso(soap, tag?tag:"contest2:ArrayOfQso", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest2__ArrayOfQso ** SOAP_FMAC4 soap_get_PointerTocontest2__ArrayOfQso(struct soap *soap, contest2__ArrayOfQso **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest2__ArrayOfQso(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest2__Qso(struct soap *soap, contest2__Qso *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C1_contest2__Qso))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest2__Qso(struct soap *soap, const char *tag, int id, contest2__Qso *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C1_contest2__Qso);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 contest2__Qso ** SOAP_FMAC4 soap_in_PointerTocontest2__Qso(struct soap *soap, const char *tag, contest2__Qso **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest2__Qso **)soap_malloc(soap, sizeof(contest2__Qso *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest2__Qso *)soap_instantiate_contest2__Qso(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	contest2__Qso ** p = (contest2__Qso **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C1_contest2__Qso, sizeof(contest2__Qso), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest2__Qso(struct soap *soap, contest2__Qso *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C1_PointerTocontest2__Qso);
	if (soap_out_PointerTocontest2__Qso(soap, tag?tag:"contest2:Qso", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest2__Qso ** SOAP_FMAC4 soap_get_PointerTocontest2__Qso(struct soap *soap, contest2__Qso **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest2__Qso(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest2__ArrayOfstring(struct soap *soap, contest2__ArrayOfstring *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C1_contest2__ArrayOfstring))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest2__ArrayOfstring(struct soap *soap, const char *tag, int id, contest2__ArrayOfstring *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C1_contest2__ArrayOfstring);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 contest2__ArrayOfstring ** SOAP_FMAC4 soap_in_PointerTocontest2__ArrayOfstring(struct soap *soap, const char *tag, contest2__ArrayOfstring **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest2__ArrayOfstring **)soap_malloc(soap, sizeof(contest2__ArrayOfstring *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest2__ArrayOfstring *)soap_instantiate_contest2__ArrayOfstring(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	contest2__ArrayOfstring ** p = (contest2__ArrayOfstring **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C1_contest2__ArrayOfstring, sizeof(contest2__ArrayOfstring), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest2__ArrayOfstring(struct soap *soap, contest2__ArrayOfstring *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C1_PointerTocontest2__ArrayOfstring);
	if (soap_out_PointerTocontest2__ArrayOfstring(soap, tag?tag:"contest2:ArrayOfstring", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest2__ArrayOfstring ** SOAP_FMAC4 soap_get_PointerTocontest2__ArrayOfstring(struct soap *soap, contest2__ArrayOfstring **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest2__ArrayOfstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_C1__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_C1__QName, 2, -1, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C1__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_C1_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_C1_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_C1_string, 1, -1, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C1_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTocontest2__RigFrequency(struct soap *soap, std::vector<contest2__RigFrequency * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTocontest2__RigFrequency(struct soap *soap, const std::vector<contest2__RigFrequency * >*a)
{
	for (std::vector<contest2__RigFrequency * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTocontest2__RigFrequency(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTocontest2__RigFrequency(struct soap *soap, const char *tag, int id, const std::vector<contest2__RigFrequency * >*a, const char *type)
{
	for (std::vector<contest2__RigFrequency * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTocontest2__RigFrequency(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<contest2__RigFrequency * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTocontest2__RigFrequency(struct soap *soap, const char *tag, std::vector<contest2__RigFrequency * >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerTocontest2__RigFrequency(soap, -1)))
		return NULL;
	contest2__RigFrequency *n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_C1_contest2__RigFrequency, SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__RigFrequency, sizeof(contest2__RigFrequency), 1))
				break;
			if (!soap_in_PointerTocontest2__RigFrequency(soap, tag, NULL, "contest2:RigFrequency"))
				break;
		}
		else
		{
			if (!soap_in_PointerTocontest2__RigFrequency(soap, tag, &n, "contest2:RigFrequency"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<contest2__RigFrequency * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTocontest2__RigFrequency(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTocontest2__RigFrequency(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__RigFrequency, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (std::vector<contest2__RigFrequency * >);
		if (size)
			*size = sizeof(std::vector<contest2__RigFrequency * >);
	}
	else
	{	cp->ptr = (void*)new (std::vector<contest2__RigFrequency * >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<contest2__RigFrequency * >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<contest2__RigFrequency * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTocontest2__RigFrequency(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<contest2__RigFrequency * > %p -> %p\n", q, p));
	*(std::vector<contest2__RigFrequency * >*)p = *(std::vector<contest2__RigFrequency * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTocontest2__QsoIdVersion(struct soap *soap, std::vector<contest2__QsoIdVersion * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTocontest2__QsoIdVersion(struct soap *soap, const std::vector<contest2__QsoIdVersion * >*a)
{
	for (std::vector<contest2__QsoIdVersion * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTocontest2__QsoIdVersion(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTocontest2__QsoIdVersion(struct soap *soap, const char *tag, int id, const std::vector<contest2__QsoIdVersion * >*a, const char *type)
{
	for (std::vector<contest2__QsoIdVersion * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTocontest2__QsoIdVersion(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<contest2__QsoIdVersion * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTocontest2__QsoIdVersion(struct soap *soap, const char *tag, std::vector<contest2__QsoIdVersion * >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerTocontest2__QsoIdVersion(soap, -1)))
		return NULL;
	contest2__QsoIdVersion *n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_C1_contest2__QsoIdVersion, SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__QsoIdVersion, sizeof(contest2__QsoIdVersion), 1))
				break;
			if (!soap_in_PointerTocontest2__QsoIdVersion(soap, tag, NULL, "contest2:QsoIdVersion"))
				break;
		}
		else
		{
			if (!soap_in_PointerTocontest2__QsoIdVersion(soap, tag, &n, "contest2:QsoIdVersion"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<contest2__QsoIdVersion * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTocontest2__QsoIdVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTocontest2__QsoIdVersion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__QsoIdVersion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (std::vector<contest2__QsoIdVersion * >);
		if (size)
			*size = sizeof(std::vector<contest2__QsoIdVersion * >);
	}
	else
	{	cp->ptr = (void*)new (std::vector<contest2__QsoIdVersion * >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<contest2__QsoIdVersion * >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<contest2__QsoIdVersion * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTocontest2__QsoIdVersion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<contest2__QsoIdVersion * > %p -> %p\n", q, p));
	*(std::vector<contest2__QsoIdVersion * >*)p = *(std::vector<contest2__QsoIdVersion * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTocontest2__Qso(struct soap *soap, std::vector<contest2__Qso * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTocontest2__Qso(struct soap *soap, const std::vector<contest2__Qso * >*a)
{
	for (std::vector<contest2__Qso * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTocontest2__Qso(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTocontest2__Qso(struct soap *soap, const char *tag, int id, const std::vector<contest2__Qso * >*a, const char *type)
{
	for (std::vector<contest2__Qso * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTocontest2__Qso(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<contest2__Qso * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTocontest2__Qso(struct soap *soap, const char *tag, std::vector<contest2__Qso * >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerTocontest2__Qso(soap, -1)))
		return NULL;
	contest2__Qso *n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_C1_contest2__Qso, SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__Qso, sizeof(contest2__Qso), 1))
				break;
			if (!soap_in_PointerTocontest2__Qso(soap, tag, NULL, "contest2:Qso"))
				break;
		}
		else
		{
			if (!soap_in_PointerTocontest2__Qso(soap, tag, &n, "contest2:Qso"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<contest2__Qso * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTocontest2__Qso(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTocontest2__Qso(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__Qso, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (std::vector<contest2__Qso * >);
		if (size)
			*size = sizeof(std::vector<contest2__Qso * >);
	}
	else
	{	cp->ptr = (void*)new (std::vector<contest2__Qso * >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<contest2__Qso * >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<contest2__Qso * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTocontest2__Qso(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<contest2__Qso * > %p -> %p\n", q, p));
	*(std::vector<contest2__Qso * >*)p = *(std::vector<contest2__Qso * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfint(struct soap *soap, std::vector<int >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfint(struct soap *soap, const std::vector<int >*a)
{
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfint(struct soap *soap, const char *tag, int id, const std::vector<int >*a, const char *type)
{
	for (std::vector<int >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_int(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<int >* SOAP_FMAC4 soap_in_std__vectorTemplateOfint(struct soap *soap, const char *tag, std::vector<int >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfint(soap, -1)))
		return NULL;
	int n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		soap_default_int(soap, &n);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_C1_int, SOAP_TYPE_C1_std__vectorTemplateOfint, sizeof(int), 0))
				break;
			if (!soap_in_int(soap, tag, NULL, "xsd:int"))
				break;
		}
		else
		{
			if (!soap_in_int(soap, tag, &n, "xsd:int"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<int > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfint(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C1_std__vectorTemplateOfint, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (std::vector<int >);
		if (size)
			*size = sizeof(std::vector<int >);
	}
	else
	{	cp->ptr = (void*)new (std::vector<int >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<int >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<int >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfint(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<int > %p -> %p\n", q, p));
	*(std::vector<int >*)p = *(std::vector<int >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap *soap, std::vector<std::string >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap *soap, const std::vector<std::string >*a)
{
	for (std::vector<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_std__string(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, int id, const std::vector<std::string >*a, const char *type)
{
	for (std::vector<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_std__string(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, std::vector<std::string >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfstd__string(soap, -1)))
		return NULL;
	std::string n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		soap_default_std__string(soap, &n);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_C1_std__string, SOAP_TYPE_C1_std__vectorTemplateOfstd__string, sizeof(std::string), 0))
				break;
			if (!soap_in_std__string(soap, tag, NULL, "xsd:string"))
				break;
		}
		else
		{
			if (!soap_in_std__string(soap, tag, &n, "xsd:string"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfstd__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C1_std__vectorTemplateOfstd__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (std::vector<std::string >);
		if (size)
			*size = sizeof(std::vector<std::string >);
	}
	else
	{	cp->ptr = (void*)new (std::vector<std::string >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<std::string >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<std::string >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfstd__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<std::string > %p -> %p\n", q, p));
	*(std::vector<std::string >*)p = *(std::vector<std::string >*)q;
}

} // namespace C1


#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of C1C.cpp */
