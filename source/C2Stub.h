/* C2Stub.h
   Generated by gSOAP 2.7.15 from ContestQsos2.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef C2Stub_H
#define C2Stub_H
#include <vector>
#define SOAP_NAMESPACE_OF_contest22	"urn:ContestQsos2/Imports"
#define SOAP_NAMESPACE_OF_contest23	"urn:ContestQsos2"
#define SOAP_NAMESPACE_OF_contest24	"http://schemas.microsoft.com/2003/10/Serialization/"
#define SOAP_NAMESPACE_OF_contest25	"http://schemas.datacontract.org/2004/07/ContestQsos"
#define SOAP_NAMESPACE_OF_contest26	"http://schemas.microsoft.com/2003/10/Serialization/Arrays"
#ifndef WITH_NONAMESPACES
#define WITH_NONAMESPACES
#endif
#ifndef WITH_NOGLOBAL
#define WITH_NOGLOBAL
#endif
#include "stdsoap2.h"

namespace C2 {

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE_C2_xsd__QName
#define SOAP_TYPE_C2_xsd__QName (15)
typedef std::string xsd__QName;
#endif


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not redeclare here */

#endif

#ifndef SOAP_TYPE_C2_xsd__anyType
#define SOAP_TYPE_C2_xsd__anyType (8)
/* Primitive xsd:anyType schema type: */
class SOAP_CMAC xsd__anyType
{
public:
	char *__item;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_C2_xsd__anyType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__anyType() : __item(NULL), soap(NULL) { this->soap_default(NULL); }
	virtual ~xsd__anyType() { }
};
#endif

#if 0 /* volatile type: do not redeclare here */

#endif

#ifndef SOAP_TYPE_C2_xsd__ID_
#define SOAP_TYPE_C2_xsd__ID_ (12)
/* Primitive xsd:ID schema type: */
class SOAP_CMAC xsd__ID_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_C2_xsd__ID_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__ID_()  { this->soap_default(NULL); }
	virtual ~xsd__ID_() { }
};
#endif

#ifndef SOAP_TYPE_C2_xsd__IDREF_
#define SOAP_TYPE_C2_xsd__IDREF_ (14)
/* Primitive xsd:IDREF schema type: */
class SOAP_CMAC xsd__IDREF_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_C2_xsd__IDREF_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__IDREF_()  { this->soap_default(NULL); }
	virtual ~xsd__IDREF_() { }
};
#endif

#ifndef SOAP_TYPE_C2_xsd__QName_
#define SOAP_TYPE_C2_xsd__QName_ (16)
/* Primitive xsd:QName schema type: */
class SOAP_CMAC xsd__QName_ : public xsd__anyType
{
public:
	xsd__QName __item;
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_C2_xsd__QName_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__QName_()  { this->soap_default(NULL); }
	virtual ~xsd__QName_() { }
};
#endif

#ifndef SOAP_TYPE_C2_xsd__anyURI_
#define SOAP_TYPE_C2_xsd__anyURI_ (18)
/* Primitive xsd:anyURI schema type: */
class SOAP_CMAC xsd__anyURI_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE_C2_xsd__anyURI_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__anyURI_()  { this->soap_default(NULL); }
	virtual ~xsd__anyURI_() { }
};
#endif

#ifndef SOAP_TYPE_C2_xsd__base64Binary
#define SOAP_TYPE_C2_xsd__base64Binary (19)
/* Base64 schema type: */
class SOAP_CMAC xsd__base64Binary
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE_C2_xsd__base64Binary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary() : __ptr(NULL), __size(0), id(NULL), type(NULL), options(NULL), soap(NULL) { this->soap_default(NULL); }
	virtual ~xsd__base64Binary() { }
};
#endif

#ifndef SOAP_TYPE_C2_xsd__base64Binary_
#define SOAP_TYPE_C2_xsd__base64Binary_ (23)
/* Primitive xsd:base64Binary schema type: */
class SOAP_CMAC xsd__base64Binary_ : public xsd__anyType
{
public:
	xsd__base64Binary __item;
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE_C2_xsd__base64Binary_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary_()  { this->soap_default(NULL); }
	virtual ~xsd__base64Binary_() { }
};
#endif

#ifndef SOAP_TYPE_C2_xsd__boolean
#define SOAP_TYPE_C2_xsd__boolean (24)
/* Primitive xsd:boolean schema type: */
class SOAP_CMAC xsd__boolean : public xsd__anyType
{
public:
	bool __item;
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE_C2_xsd__boolean */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__boolean() : __item((bool)0) { this->soap_default(NULL); }
	virtual ~xsd__boolean() { }
};
#endif

#ifndef SOAP_TYPE_C2_xsd__byte_
#define SOAP_TYPE_C2_xsd__byte_ (27)
/* Primitive xsd:byte schema type: */
class SOAP_CMAC xsd__byte_ : public xsd__anyType
{
public:
	char __item;
public:
	virtual int soap_type() const { return 27; } /* = unique id SOAP_TYPE_C2_xsd__byte_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__byte_() : __item(0) { this->soap_default(NULL); }
	virtual ~xsd__byte_() { }
};
#endif

#ifndef SOAP_TYPE_C2_xsd__dateTime
#define SOAP_TYPE_C2_xsd__dateTime (28)
/* Primitive xsd:dateTime schema type: */
class SOAP_CMAC xsd__dateTime : public xsd__anyType
{
public:
	time_t __item;
public:
	virtual int soap_type() const { return 28; } /* = unique id SOAP_TYPE_C2_xsd__dateTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__dateTime() : __item(0) { this->soap_default(NULL); }
	virtual ~xsd__dateTime() { }
};
#endif

#ifndef SOAP_TYPE_C2_xsd__decimal_
#define SOAP_TYPE_C2_xsd__decimal_ (31)
/* Primitive xsd:decimal schema type: */
class SOAP_CMAC xsd__decimal_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 31; } /* = unique id SOAP_TYPE_C2_xsd__decimal_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__decimal_()  { this->soap_default(NULL); }
	virtual ~xsd__decimal_() { }
};
#endif

#ifndef SOAP_TYPE_C2_xsd__double
#define SOAP_TYPE_C2_xsd__double (32)
/* Primitive xsd:double schema type: */
class SOAP_CMAC xsd__double : public xsd__anyType
{
public:
	double __item;
public:
	virtual int soap_type() const { return 32; } /* = unique id SOAP_TYPE_C2_xsd__double */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__double() : __item(0) { this->soap_default(NULL); }
	virtual ~xsd__double() { }
};
#endif

#ifndef SOAP_TYPE_C2_xsd__duration_
#define SOAP_TYPE_C2_xsd__duration_ (35)
/* Primitive xsd:duration schema type: */
class SOAP_CMAC xsd__duration_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 35; } /* = unique id SOAP_TYPE_C2_xsd__duration_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__duration_()  { this->soap_default(NULL); }
	virtual ~xsd__duration_() { }
};
#endif

#ifndef SOAP_TYPE_C2_xsd__float
#define SOAP_TYPE_C2_xsd__float (36)
/* Primitive xsd:float schema type: */
class SOAP_CMAC xsd__float : public xsd__anyType
{
public:
	float __item;
public:
	virtual int soap_type() const { return 36; } /* = unique id SOAP_TYPE_C2_xsd__float */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__float() : __item(0) { this->soap_default(NULL); }
	virtual ~xsd__float() { }
};
#endif

#ifndef SOAP_TYPE_C2_xsd__int
#define SOAP_TYPE_C2_xsd__int (38)
/* Primitive xsd:int schema type: */
class SOAP_CMAC xsd__int : public xsd__anyType
{
public:
	int __item;
public:
	virtual int soap_type() const { return 38; } /* = unique id SOAP_TYPE_C2_xsd__int */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__int() : __item(0) { this->soap_default(NULL); }
	virtual ~xsd__int() { }
};
#endif

#ifndef SOAP_TYPE_C2_xsd__long
#define SOAP_TYPE_C2_xsd__long (39)
/* Primitive xsd:long schema type: */
class SOAP_CMAC xsd__long : public xsd__anyType
{
public:
	LONG64 __item;
public:
	virtual int soap_type() const { return 39; } /* = unique id SOAP_TYPE_C2_xsd__long */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__long() : __item(0) { this->soap_default(NULL); }
	virtual ~xsd__long() { }
};
#endif

#ifndef SOAP_TYPE_C2_xsd__short
#define SOAP_TYPE_C2_xsd__short (41)
/* Primitive xsd:short schema type: */
class SOAP_CMAC xsd__short : public xsd__anyType
{
public:
	short __item;
public:
	virtual int soap_type() const { return 41; } /* = unique id SOAP_TYPE_C2_xsd__short */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__short() : __item(0) { this->soap_default(NULL); }
	virtual ~xsd__short() { }
};
#endif

#ifndef SOAP_TYPE_C2_xsd__string
#define SOAP_TYPE_C2_xsd__string (43)
/* Primitive xsd:string schema type: */
class SOAP_CMAC xsd__string : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 43; } /* = unique id SOAP_TYPE_C2_xsd__string */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__string()  { this->soap_default(NULL); }
	virtual ~xsd__string() { }
};
#endif

#ifndef SOAP_TYPE_C2_xsd__unsignedByte_
#define SOAP_TYPE_C2_xsd__unsignedByte_ (45)
/* Primitive xsd:unsignedByte schema type: */
class SOAP_CMAC xsd__unsignedByte_ : public xsd__anyType
{
public:
	unsigned char __item;
public:
	virtual int soap_type() const { return 45; } /* = unique id SOAP_TYPE_C2_xsd__unsignedByte_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__unsignedByte_() : __item(0) { this->soap_default(NULL); }
	virtual ~xsd__unsignedByte_() { }
};
#endif

#ifndef SOAP_TYPE_C2_xsd__unsignedInt
#define SOAP_TYPE_C2_xsd__unsignedInt (46)
/* Primitive xsd:unsignedInt schema type: */
class SOAP_CMAC xsd__unsignedInt : public xsd__anyType
{
public:
	unsigned int __item;
public:
	virtual int soap_type() const { return 46; } /* = unique id SOAP_TYPE_C2_xsd__unsignedInt */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__unsignedInt() : __item(0) { this->soap_default(NULL); }
	virtual ~xsd__unsignedInt() { }
};
#endif

#ifndef SOAP_TYPE_C2_xsd__unsignedLong
#define SOAP_TYPE_C2_xsd__unsignedLong (47)
/* Primitive xsd:unsignedLong schema type: */
class SOAP_CMAC xsd__unsignedLong : public xsd__anyType
{
public:
	ULONG64 __item;
public:
	virtual int soap_type() const { return 47; } /* = unique id SOAP_TYPE_C2_xsd__unsignedLong */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__unsignedLong() : __item(0) { this->soap_default(NULL); }
	virtual ~xsd__unsignedLong() { }
};
#endif

#ifndef SOAP_TYPE_C2_xsd__unsignedShort
#define SOAP_TYPE_C2_xsd__unsignedShort (49)
/* Primitive xsd:unsignedShort schema type: */
class SOAP_CMAC xsd__unsignedShort : public xsd__anyType
{
public:
	unsigned short __item;
public:
	virtual int soap_type() const { return 49; } /* = unique id SOAP_TYPE_C2_xsd__unsignedShort */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__unsignedShort() : __item(0) { this->soap_default(NULL); }
	virtual ~xsd__unsignedShort() { }
};
#endif

#ifndef SOAP_TYPE_C2_contest24__char__
#define SOAP_TYPE_C2_contest24__char__ (74)
/* Primitive contest24:char schema type: */
class SOAP_CMAC contest24__char__ : public xsd__anyType
{
public:
	int __item;
public:
	virtual int soap_type() const { return 74; } /* = unique id SOAP_TYPE_C2_contest24__char__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         contest24__char__() : __item(0) { this->soap_default(NULL); }
	virtual ~contest24__char__() { }
};
#endif

#ifndef SOAP_TYPE_C2_contest24__duration__
#define SOAP_TYPE_C2_contest24__duration__ (76)
/* Primitive contest24:duration schema type: */
class SOAP_CMAC contest24__duration__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 76; } /* = unique id SOAP_TYPE_C2_contest24__duration__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         contest24__duration__()  { this->soap_default(NULL); }
	virtual ~contest24__duration__() { }
};
#endif

#ifndef SOAP_TYPE_C2_contest24__guid__
#define SOAP_TYPE_C2_contest24__guid__ (78)
/* Primitive contest24:guid schema type: */
class SOAP_CMAC contest24__guid__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 78; } /* = unique id SOAP_TYPE_C2_contest24__guid__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         contest24__guid__()  { this->soap_default(NULL); }
	virtual ~contest24__guid__() { }
};
#endif

#ifndef SOAP_TYPE_C2__contest23__GetSessionId
#define SOAP_TYPE_C2__contest23__GetSessionId (51)
/* contest23:GetSessionId */
class SOAP_CMAC _contest23__GetSessionId
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 51; } /* = unique id SOAP_TYPE_C2__contest23__GetSessionId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _contest23__GetSessionId() : soap(NULL) { this->soap_default(NULL); }
	virtual ~_contest23__GetSessionId() { }
};
#endif

#ifndef SOAP_TYPE_C2__contest23__GetSessionIdResponse
#define SOAP_TYPE_C2__contest23__GetSessionIdResponse (52)
/* contest23:GetSessionIdResponse */
class SOAP_CMAC _contest23__GetSessionIdResponse
{
public:
	std::string GetSessionIdResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 52; } /* = unique id SOAP_TYPE_C2__contest23__GetSessionIdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _contest23__GetSessionIdResponse() : soap(NULL) { this->soap_default(NULL); }
	virtual ~_contest23__GetSessionIdResponse() { }
};
#endif

#ifndef SOAP_TYPE_C2__contest23__addAndGetQsos
#define SOAP_TYPE_C2__contest23__addAndGetQsos (53)
/* contest23:addAndGetQsos */
class SOAP_CMAC _contest23__addAndGetQsos
{
public:
	std::string SessionId;	/* required element of type xsd:string */
	class contest25__ArrayOfQso *QsoAddArray;	/* required element of type contest25:ArrayOfQso */
	int OldState;	/* required element of type xsd:int */
	int MaxRequested;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 53; } /* = unique id SOAP_TYPE_C2__contest23__addAndGetQsos */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _contest23__addAndGetQsos() : QsoAddArray(NULL), OldState(0), MaxRequested(0), soap(NULL) { this->soap_default(NULL); }
	virtual ~_contest23__addAndGetQsos() { }
};
#endif

#ifndef SOAP_TYPE_C2__contest23__addAndGetQsosResponse
#define SOAP_TYPE_C2__contest23__addAndGetQsosResponse (54)
/* contest23:addAndGetQsosResponse */
class SOAP_CMAC _contest23__addAndGetQsosResponse
{
public:
	class contest25__QsoUpdate *addAndGetQsosResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type contest25:QsoUpdate */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 54; } /* = unique id SOAP_TYPE_C2__contest23__addAndGetQsosResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _contest23__addAndGetQsosResponse() : addAndGetQsosResult(NULL), soap(NULL) { this->soap_default(NULL); }
	virtual ~_contest23__addAndGetQsosResponse() { }
};
#endif

#ifndef SOAP_TYPE_C2__contest23__AddAndGetLogSummary
#define SOAP_TYPE_C2__contest23__AddAndGetLogSummary (55)
/* contest23:AddAndGetLogSummary */
class SOAP_CMAC _contest23__AddAndGetLogSummary
{
public:
	std::string SessionId;	/* required element of type xsd:string */
	contest25__ArrayOfQso *QsoAddArray;	/* required element of type contest25:ArrayOfQso */
	int OldState;	/* required element of type xsd:int */
	int MaxRequested;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 55; } /* = unique id SOAP_TYPE_C2__contest23__AddAndGetLogSummary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _contest23__AddAndGetLogSummary() : QsoAddArray(NULL), OldState(0), MaxRequested(0), soap(NULL) { this->soap_default(NULL); }
	virtual ~_contest23__AddAndGetLogSummary() { }
};
#endif

#ifndef SOAP_TYPE_C2__contest23__AddAndGetLogSummaryResponse
#define SOAP_TYPE_C2__contest23__AddAndGetLogSummaryResponse (56)
/* contest23:AddAndGetLogSummaryResponse */
class SOAP_CMAC _contest23__AddAndGetLogSummaryResponse
{
public:
	class contest25__LogSummary *AddAndGetLogSummaryResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type contest25:LogSummary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 56; } /* = unique id SOAP_TYPE_C2__contest23__AddAndGetLogSummaryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _contest23__AddAndGetLogSummaryResponse() : AddAndGetLogSummaryResult(NULL), soap(NULL) { this->soap_default(NULL); }
	virtual ~_contest23__AddAndGetLogSummaryResponse() { }
};
#endif

#ifndef SOAP_TYPE_C2__contest23__getQsosByKeyArray
#define SOAP_TYPE_C2__contest23__getQsosByKeyArray (57)
/* contest23:getQsosByKeyArray */
class SOAP_CMAC _contest23__getQsosByKeyArray
{
public:
	std::string SessionId;	/* required element of type xsd:string */
	class contest26__ArrayOfstring *QsoKeyArray;	/* required element of type contest26:ArrayOfstring */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 57; } /* = unique id SOAP_TYPE_C2__contest23__getQsosByKeyArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _contest23__getQsosByKeyArray() : QsoKeyArray(NULL), soap(NULL) { this->soap_default(NULL); }
	virtual ~_contest23__getQsosByKeyArray() { }
};
#endif

#ifndef SOAP_TYPE_C2__contest23__getQsosByKeyArrayResponse
#define SOAP_TYPE_C2__contest23__getQsosByKeyArrayResponse (58)
/* contest23:getQsosByKeyArrayResponse */
class SOAP_CMAC _contest23__getQsosByKeyArrayResponse
{
public:
	contest25__QsoUpdate *getQsosByKeyArrayResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type contest25:QsoUpdate */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 58; } /* = unique id SOAP_TYPE_C2__contest23__getQsosByKeyArrayResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _contest23__getQsosByKeyArrayResponse() : getQsosByKeyArrayResult(NULL), soap(NULL) { this->soap_default(NULL); }
	virtual ~_contest23__getQsosByKeyArrayResponse() { }
};
#endif

#ifndef SOAP_TYPE_C2__contest23__ColumnNamesToIndices
#define SOAP_TYPE_C2__contest23__ColumnNamesToIndices (59)
/* contest23:ColumnNamesToIndices */
class SOAP_CMAC _contest23__ColumnNamesToIndices
{
public:
	std::string SessionId;	/* required element of type xsd:string */
	contest26__ArrayOfstring *ColumnNames;	/* required element of type contest26:ArrayOfstring */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 59; } /* = unique id SOAP_TYPE_C2__contest23__ColumnNamesToIndices */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _contest23__ColumnNamesToIndices() : ColumnNames(NULL), soap(NULL) { this->soap_default(NULL); }
	virtual ~_contest23__ColumnNamesToIndices() { }
};
#endif

#ifndef SOAP_TYPE_C2__contest23__ColumnNamesToIndicesResponse
#define SOAP_TYPE_C2__contest23__ColumnNamesToIndicesResponse (60)
/* contest23:ColumnNamesToIndicesResponse */
class SOAP_CMAC _contest23__ColumnNamesToIndicesResponse
{
public:
	class contest26__ArrayOfint *ColumnNamesToIndicesResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type contest26:ArrayOfint */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 60; } /* = unique id SOAP_TYPE_C2__contest23__ColumnNamesToIndicesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _contest23__ColumnNamesToIndicesResponse() : ColumnNamesToIndicesResult(NULL), soap(NULL) { this->soap_default(NULL); }
	virtual ~_contest23__ColumnNamesToIndicesResponse() { }
};
#endif

#ifndef SOAP_TYPE_C2__contest23__ExchangeFrequencies
#define SOAP_TYPE_C2__contest23__ExchangeFrequencies (61)
/* contest23:ExchangeFrequencies */
class SOAP_CMAC _contest23__ExchangeFrequencies
{
public:
	class contest25__ArrayOfRigFrequency *IncomingFreqs;	/* required element of type contest25:ArrayOfRigFrequency */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 61; } /* = unique id SOAP_TYPE_C2__contest23__ExchangeFrequencies */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _contest23__ExchangeFrequencies() : IncomingFreqs(NULL), soap(NULL) { this->soap_default(NULL); }
	virtual ~_contest23__ExchangeFrequencies() { }
};
#endif

#ifndef SOAP_TYPE_C2__contest23__ExchangeFrequenciesResponse
#define SOAP_TYPE_C2__contest23__ExchangeFrequenciesResponse (62)
/* contest23:ExchangeFrequenciesResponse */
class SOAP_CMAC _contest23__ExchangeFrequenciesResponse
{
public:
	contest25__ArrayOfRigFrequency *ExchangeFrequenciesResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type contest25:ArrayOfRigFrequency */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 62; } /* = unique id SOAP_TYPE_C2__contest23__ExchangeFrequenciesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _contest23__ExchangeFrequenciesResponse() : ExchangeFrequenciesResult(NULL), soap(NULL) { this->soap_default(NULL); }
	virtual ~_contest23__ExchangeFrequenciesResponse() { }
};
#endif

#ifndef SOAP_TYPE_C2_contest25__ArrayOfQso
#define SOAP_TYPE_C2_contest25__ArrayOfQso (63)
/* contest25:ArrayOfQso */
class SOAP_CMAC contest25__ArrayOfQso : public xsd__anyType
{
public:
	std::vector<class contest25__Qso * >Qso;	/* required element of type contest25:Qso */
public:
	virtual int soap_type() const { return 63; } /* = unique id SOAP_TYPE_C2_contest25__ArrayOfQso */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         contest25__ArrayOfQso()  { this->soap_default(NULL); }
	virtual ~contest25__ArrayOfQso() { }
};
#endif

#ifndef SOAP_TYPE_C2_contest25__Qso
#define SOAP_TYPE_C2_contest25__Qso (64)
/* contest25:Qso */
class SOAP_CMAC contest25__Qso : public xsd__anyType
{
public:
	int band;	/* required element of type xsd:int */
	int dupe;	/* required element of type xsd:int */
	std::string idKey;	/* required element of type xsd:string */
	int mode;	/* required element of type xsd:int */
	contest26__ArrayOfstring *qsoparts;	/* required element of type contest26:ArrayOfstring */
	double recvFreq;	/* required element of type xsd:double */
	int serial;	/* required element of type xsd:int */
	std::string station;	/* required element of type xsd:string */
	int time64H;	/* required element of type xsd:int */
	int time64L;	/* required element of type xsd:int */
	std::string updatedBy;	/* required element of type xsd:string */
	int version;	/* required element of type xsd:int */
	double xmitFreq;	/* required element of type xsd:double */
public:
	virtual int soap_type() const { return 64; } /* = unique id SOAP_TYPE_C2_contest25__Qso */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         contest25__Qso() : band(0), dupe(0), mode(0), qsoparts(NULL), recvFreq(0), serial(0), time64H(0), time64L(0), version(0), xmitFreq(0) { this->soap_default(NULL); }
	virtual ~contest25__Qso() { }
};
#endif

#ifndef SOAP_TYPE_C2_contest25__QsoUpdate
#define SOAP_TYPE_C2_contest25__QsoUpdate (65)
/* contest25:QsoUpdate */
class SOAP_CMAC contest25__QsoUpdate : public xsd__anyType
{
public:
	int logState;	/* required element of type xsd:int */
	contest25__ArrayOfQso *qsoArray;	/* required element of type contest25:ArrayOfQso */
public:
	virtual int soap_type() const { return 65; } /* = unique id SOAP_TYPE_C2_contest25__QsoUpdate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         contest25__QsoUpdate() : logState(0), qsoArray(NULL) { this->soap_default(NULL); }
	virtual ~contest25__QsoUpdate() { }
};
#endif

#ifndef SOAP_TYPE_C2_contest25__LogSummary
#define SOAP_TYPE_C2_contest25__LogSummary (66)
/* contest25:LogSummary */
class SOAP_CMAC contest25__LogSummary : public xsd__anyType
{
public:
	int logState;	/* required element of type xsd:int */
	class contest25__ArrayOfQsoIdVersion *logSummaryIds;	/* required element of type contest25:ArrayOfQsoIdVersion */
public:
	virtual int soap_type() const { return 66; } /* = unique id SOAP_TYPE_C2_contest25__LogSummary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         contest25__LogSummary() : logState(0), logSummaryIds(NULL) { this->soap_default(NULL); }
	virtual ~contest25__LogSummary() { }
};
#endif

#ifndef SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion
#define SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion (67)
/* contest25:ArrayOfQsoIdVersion */
class SOAP_CMAC contest25__ArrayOfQsoIdVersion : public xsd__anyType
{
public:
	std::vector<class contest25__QsoIdVersion * >QsoIdVersion;	/* required element of type contest25:QsoIdVersion */
public:
	virtual int soap_type() const { return 67; } /* = unique id SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         contest25__ArrayOfQsoIdVersion()  { this->soap_default(NULL); }
	virtual ~contest25__ArrayOfQsoIdVersion() { }
};
#endif

#ifndef SOAP_TYPE_C2_contest25__QsoIdVersion
#define SOAP_TYPE_C2_contest25__QsoIdVersion (68)
/* contest25:QsoIdVersion */
class SOAP_CMAC contest25__QsoIdVersion : public xsd__anyType
{
public:
	std::string id;	/* required element of type xsd:string */
	std::string updatedBy;	/* required element of type xsd:string */
	int version;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 68; } /* = unique id SOAP_TYPE_C2_contest25__QsoIdVersion */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         contest25__QsoIdVersion() : version(0) { this->soap_default(NULL); }
	virtual ~contest25__QsoIdVersion() { }
};
#endif

#ifndef SOAP_TYPE_C2_contest25__ArrayOfRigFrequency
#define SOAP_TYPE_C2_contest25__ArrayOfRigFrequency (69)
/* contest25:ArrayOfRigFrequency */
class SOAP_CMAC contest25__ArrayOfRigFrequency : public xsd__anyType
{
public:
	std::vector<class contest25__RigFrequency * >RigFrequency;	/* required element of type contest25:RigFrequency */
public:
	virtual int soap_type() const { return 69; } /* = unique id SOAP_TYPE_C2_contest25__ArrayOfRigFrequency */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         contest25__ArrayOfRigFrequency()  { this->soap_default(NULL); }
	virtual ~contest25__ArrayOfRigFrequency() { }
};
#endif

#ifndef SOAP_TYPE_C2_contest25__RigFrequency
#define SOAP_TYPE_C2_contest25__RigFrequency (70)
/* contest25:RigFrequency */
class SOAP_CMAC contest25__RigFrequency : public xsd__anyType
{
public:
	std::string label;	/* required element of type xsd:string */
	int mode;	/* required element of type xsd:int */
	int networkLetter;	/* required element of type xsd:int */
	double recvFreq;	/* required element of type xsd:double */
	int rigNumber;	/* required element of type xsd:int */
	std::string station;	/* required element of type xsd:string */
	double xmitFreq;	/* required element of type xsd:double */
public:
	virtual int soap_type() const { return 70; } /* = unique id SOAP_TYPE_C2_contest25__RigFrequency */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         contest25__RigFrequency() : mode(0), networkLetter(0), recvFreq(0), rigNumber(0), xmitFreq(0) { this->soap_default(NULL); }
	virtual ~contest25__RigFrequency() { }
};
#endif

#ifndef SOAP_TYPE_C2_contest26__ArrayOfstring
#define SOAP_TYPE_C2_contest26__ArrayOfstring (71)
/* contest26:ArrayOfstring */
class SOAP_CMAC contest26__ArrayOfstring : public xsd__anyType
{
public:
	std::vector<std::string >string;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 71; } /* = unique id SOAP_TYPE_C2_contest26__ArrayOfstring */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         contest26__ArrayOfstring()  { this->soap_default(NULL); }
	virtual ~contest26__ArrayOfstring() { }
};
#endif

#ifndef SOAP_TYPE_C2_contest26__ArrayOfint
#define SOAP_TYPE_C2_contest26__ArrayOfint (72)
/* contest26:ArrayOfint */
class SOAP_CMAC contest26__ArrayOfint : public xsd__anyType
{
public:
	std::vector<int >int_;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 72; } /* = unique id SOAP_TYPE_C2_contest26__ArrayOfint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         contest26__ArrayOfint()  { this->soap_default(NULL); }
	virtual ~contest26__ArrayOfint() { }
};
#endif

#ifndef SOAP_TYPE_C2___contest21__GetSessionId
#define SOAP_TYPE_C2___contest21__GetSessionId (97)
/* Operation wrapper: */
struct __contest21__GetSessionId
{
public:
	_contest23__GetSessionId *contest23__GetSessionId;	/* optional element of type contest23:GetSessionId */
};
#endif

#ifndef SOAP_TYPE_C2___contest21__addAndGetQsos
#define SOAP_TYPE_C2___contest21__addAndGetQsos (101)
/* Operation wrapper: */
struct __contest21__addAndGetQsos
{
public:
	_contest23__addAndGetQsos *contest23__addAndGetQsos;	/* optional element of type contest23:addAndGetQsos */
};
#endif

#ifndef SOAP_TYPE_C2___contest21__AddAndGetLogSummary
#define SOAP_TYPE_C2___contest21__AddAndGetLogSummary (105)
/* Operation wrapper: */
struct __contest21__AddAndGetLogSummary
{
public:
	_contest23__AddAndGetLogSummary *contest23__AddAndGetLogSummary;	/* optional element of type contest23:AddAndGetLogSummary */
};
#endif

#ifndef SOAP_TYPE_C2___contest21__getQsosByKeyArray
#define SOAP_TYPE_C2___contest21__getQsosByKeyArray (109)
/* Operation wrapper: */
struct __contest21__getQsosByKeyArray
{
public:
	_contest23__getQsosByKeyArray *contest23__getQsosByKeyArray;	/* optional element of type contest23:getQsosByKeyArray */
};
#endif

#ifndef SOAP_TYPE_C2___contest21__ColumnNamesToIndices
#define SOAP_TYPE_C2___contest21__ColumnNamesToIndices (113)
/* Operation wrapper: */
struct __contest21__ColumnNamesToIndices
{
public:
	_contest23__ColumnNamesToIndices *contest23__ColumnNamesToIndices;	/* optional element of type contest23:ColumnNamesToIndices */
};
#endif

#ifndef SOAP_TYPE_C2___contest21__ExchangeFrequencies
#define SOAP_TYPE_C2___contest21__ExchangeFrequencies (117)
/* Operation wrapper: */
struct __contest21__ExchangeFrequencies
{
public:
	_contest23__ExchangeFrequencies *contest23__ExchangeFrequencies;	/* optional element of type contest23:ExchangeFrequencies */
};
#endif

#ifndef SOAP_TYPE_C2_SOAP_ENV__Header
#define SOAP_TYPE_C2_SOAP_ENV__Header (118)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_C2_SOAP_ENV__Code
#define SOAP_TYPE_C2_SOAP_ENV__Code (119)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_C2_SOAP_ENV__Detail
#define SOAP_TYPE_C2_SOAP_ENV__Detail (121)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_C2_SOAP_ENV__Reason
#define SOAP_TYPE_C2_SOAP_ENV__Reason (124)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_C2_SOAP_ENV__Fault
#define SOAP_TYPE_C2_SOAP_ENV__Fault (125)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE_C2__QName
#define SOAP_TYPE_C2__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE_C2__XML
#define SOAP_TYPE_C2__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_C2_xsd__ID
#define SOAP_TYPE_C2_xsd__ID (11)
typedef std::string xsd__ID;
#endif

#ifndef SOAP_TYPE_C2_xsd__IDREF
#define SOAP_TYPE_C2_xsd__IDREF (13)
typedef std::string xsd__IDREF;
#endif

#ifndef SOAP_TYPE_C2_xsd__anyURI
#define SOAP_TYPE_C2_xsd__anyURI (17)
typedef std::string xsd__anyURI;
#endif

#ifndef SOAP_TYPE_C2_xsd__byte
#define SOAP_TYPE_C2_xsd__byte (26)
typedef char xsd__byte;
#endif

#ifndef SOAP_TYPE_C2_xsd__decimal
#define SOAP_TYPE_C2_xsd__decimal (30)
typedef std::string xsd__decimal;
#endif

#ifndef SOAP_TYPE_C2_xsd__duration
#define SOAP_TYPE_C2_xsd__duration (34)
typedef std::string xsd__duration;
#endif

#ifndef SOAP_TYPE_C2_xsd__unsignedByte
#define SOAP_TYPE_C2_xsd__unsignedByte (44)
typedef unsigned char xsd__unsignedByte;
#endif

#ifndef SOAP_TYPE_C2_contest24__char
#define SOAP_TYPE_C2_contest24__char (73)
typedef int contest24__char;
#endif

#ifndef SOAP_TYPE_C2_contest24__duration
#define SOAP_TYPE_C2_contest24__duration (75)
typedef std::string contest24__duration;
#endif

#ifndef SOAP_TYPE_C2_contest24__guid
#define SOAP_TYPE_C2_contest24__guid (77)
typedef std::string contest24__guid;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operations                                                         *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 __contest21__GetSessionId(struct soap*, _contest23__GetSessionId *contest23__GetSessionId, _contest23__GetSessionIdResponse *contest23__GetSessionIdResponse);

SOAP_FMAC5 int SOAP_FMAC6 __contest21__addAndGetQsos(struct soap*, _contest23__addAndGetQsos *contest23__addAndGetQsos, _contest23__addAndGetQsosResponse *contest23__addAndGetQsosResponse);

SOAP_FMAC5 int SOAP_FMAC6 __contest21__AddAndGetLogSummary(struct soap*, _contest23__AddAndGetLogSummary *contest23__AddAndGetLogSummary, _contest23__AddAndGetLogSummaryResponse *contest23__AddAndGetLogSummaryResponse);

SOAP_FMAC5 int SOAP_FMAC6 __contest21__getQsosByKeyArray(struct soap*, _contest23__getQsosByKeyArray *contest23__getQsosByKeyArray, _contest23__getQsosByKeyArrayResponse *contest23__getQsosByKeyArrayResponse);

SOAP_FMAC5 int SOAP_FMAC6 __contest21__ColumnNamesToIndices(struct soap*, _contest23__ColumnNamesToIndices *contest23__ColumnNamesToIndices, _contest23__ColumnNamesToIndicesResponse *contest23__ColumnNamesToIndicesResponse);

SOAP_FMAC5 int SOAP_FMAC6 __contest21__ExchangeFrequencies(struct soap*, _contest23__ExchangeFrequencies *contest23__ExchangeFrequencies, _contest23__ExchangeFrequenciesResponse *contest23__ExchangeFrequenciesResponse);

/******************************************************************************\
 *                                                                            *
 * Skeletons                                                                  *
 *                                                                            *
\******************************************************************************/

SOAP_FMAC5 int SOAP_FMAC6 C2_serve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 C2_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___contest21__GetSessionId(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___contest21__addAndGetQsos(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___contest21__AddAndGetLogSummary(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___contest21__getQsosByKeyArray(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___contest21__ColumnNamesToIndices(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___contest21__ExchangeFrequencies(struct soap*);

} // namespace C2


#endif

/* End of C2Stub.h */
