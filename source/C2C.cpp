/* C2C.cpp
   Generated by gSOAP 2.7.15 from ContestQsos2.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "C2H.h"

namespace C2 {

SOAP_SOURCE_STAMP("@(#) C2C.cpp ver 2.7.15 2011-10-17 13:09:42 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	soap->header = soap_new_SOAP_ENV__Header(soap, -1);
		soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_C2_xsd__byte:
		return soap_in_xsd__byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_C2_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_C2_short:
		return soap_in_short(soap, NULL, NULL, "xsd:short");
	case SOAP_TYPE_C2_contest24__char:
		return soap_in_contest24__char(soap, NULL, NULL, "contest24:char");
	case SOAP_TYPE_C2_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_C2_LONG64:
		return soap_in_LONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_C2_float:
		return soap_in_float(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_C2_double:
		return soap_in_double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_C2_xsd__unsignedByte:
		return soap_in_xsd__unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_C2_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_C2_unsignedShort:
		return soap_in_unsignedShort(soap, NULL, NULL, "xsd:unsignedShort");
	case SOAP_TYPE_C2_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_C2_unsignedLONG64:
		return soap_in_unsignedLONG64(soap, NULL, NULL, "xsd:unsignedLong");
	case SOAP_TYPE_C2_time:
		return soap_in_time(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_C2_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_C2_contest24__guid__:
		return soap_in_contest24__guid__(soap, NULL, NULL, "contest24:guid");
	case SOAP_TYPE_C2_contest24__guid:
		return soap_in_contest24__guid(soap, NULL, NULL, "contest24:guid");
	case SOAP_TYPE_C2_contest24__duration__:
		return soap_in_contest24__duration__(soap, NULL, NULL, "contest24:duration");
	case SOAP_TYPE_C2_contest24__duration:
		return soap_in_contest24__duration(soap, NULL, NULL, "contest24:duration");
	case SOAP_TYPE_C2_contest24__char__:
		return soap_in_contest24__char__(soap, NULL, NULL, "contest24:char");
	case SOAP_TYPE_C2_contest26__ArrayOfint:
		return soap_in_contest26__ArrayOfint(soap, NULL, NULL, "contest26:ArrayOfint");
	case SOAP_TYPE_C2_contest26__ArrayOfstring:
		return soap_in_contest26__ArrayOfstring(soap, NULL, NULL, "contest26:ArrayOfstring");
	case SOAP_TYPE_C2_contest25__RigFrequency:
		return soap_in_contest25__RigFrequency(soap, NULL, NULL, "contest25:RigFrequency");
	case SOAP_TYPE_C2_contest25__ArrayOfRigFrequency:
		return soap_in_contest25__ArrayOfRigFrequency(soap, NULL, NULL, "contest25:ArrayOfRigFrequency");
	case SOAP_TYPE_C2_contest25__QsoIdVersion:
		return soap_in_contest25__QsoIdVersion(soap, NULL, NULL, "contest25:QsoIdVersion");
	case SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion:
		return soap_in_contest25__ArrayOfQsoIdVersion(soap, NULL, NULL, "contest25:ArrayOfQsoIdVersion");
	case SOAP_TYPE_C2_contest25__LogSummary:
		return soap_in_contest25__LogSummary(soap, NULL, NULL, "contest25:LogSummary");
	case SOAP_TYPE_C2_contest25__QsoUpdate:
		return soap_in_contest25__QsoUpdate(soap, NULL, NULL, "contest25:QsoUpdate");
	case SOAP_TYPE_C2_contest25__Qso:
		return soap_in_contest25__Qso(soap, NULL, NULL, "contest25:Qso");
	case SOAP_TYPE_C2_contest25__ArrayOfQso:
		return soap_in_contest25__ArrayOfQso(soap, NULL, NULL, "contest25:ArrayOfQso");
	case SOAP_TYPE_C2_xsd__unsignedShort:
		return soap_in_xsd__unsignedShort(soap, NULL, NULL, "xsd:unsignedShort");
	case SOAP_TYPE_C2_xsd__unsignedLong:
		return soap_in_xsd__unsignedLong(soap, NULL, NULL, "xsd:unsignedLong");
	case SOAP_TYPE_C2_xsd__unsignedInt:
		return soap_in_xsd__unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_C2_xsd__unsignedByte_:
		return soap_in_xsd__unsignedByte_(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_C2_xsd__string:
		return soap_in_xsd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_C2_xsd__short:
		return soap_in_xsd__short(soap, NULL, NULL, "xsd:short");
	case SOAP_TYPE_C2_xsd__long:
		return soap_in_xsd__long(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_C2_xsd__int:
		return soap_in_xsd__int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_C2_xsd__float:
		return soap_in_xsd__float(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_C2_xsd__duration_:
		return soap_in_xsd__duration_(soap, NULL, NULL, "xsd:duration");
	case SOAP_TYPE_C2_xsd__duration:
		return soap_in_xsd__duration(soap, NULL, NULL, "xsd:duration");
	case SOAP_TYPE_C2_xsd__double:
		return soap_in_xsd__double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_C2_xsd__decimal_:
		return soap_in_xsd__decimal_(soap, NULL, NULL, "xsd:decimal");
	case SOAP_TYPE_C2_xsd__decimal:
		return soap_in_xsd__decimal(soap, NULL, NULL, "xsd:decimal");
	case SOAP_TYPE_C2_xsd__dateTime:
		return soap_in_xsd__dateTime(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_C2_xsd__byte_:
		return soap_in_xsd__byte_(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_C2_xsd__boolean:
		return soap_in_xsd__boolean(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_C2_xsd__base64Binary_:
		return soap_in_xsd__base64Binary_(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_C2_xsd__base64Binary:
		return soap_in_xsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_C2_xsd__anyURI_:
		return soap_in_xsd__anyURI_(soap, NULL, NULL, "xsd:anyURI");
	case SOAP_TYPE_C2_xsd__anyURI:
		return soap_in_xsd__anyURI(soap, NULL, NULL, "xsd:anyURI");
	case SOAP_TYPE_C2_xsd__QName_:
		return soap_in_xsd__QName_(soap, NULL, NULL, "xsd:QName");
	case SOAP_TYPE_C2_xsd__QName:
		return soap_in_xsd__QName(soap, NULL, NULL, "xsd:QName");
	case SOAP_TYPE_C2_xsd__IDREF_:
		return soap_in_xsd__IDREF_(soap, NULL, NULL, "xsd:IDREF");
	case SOAP_TYPE_C2_xsd__IDREF:
		return soap_in_xsd__IDREF(soap, NULL, NULL, "xsd:IDREF");
	case SOAP_TYPE_C2_xsd__ID_:
		return soap_in_xsd__ID_(soap, NULL, NULL, "xsd:ID");
	case SOAP_TYPE_C2_xsd__ID:
		return soap_in_xsd__ID(soap, NULL, NULL, "xsd:ID");
	case SOAP_TYPE_C2_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_C2_xsd__anyType:
		return soap_in_xsd__anyType(soap, NULL, NULL, "xsd:anyType");
	case SOAP_TYPE_C2_PointerTo_contest23__ExchangeFrequenciesResponse:
		return soap_in_PointerTo_contest23__ExchangeFrequenciesResponse(soap, NULL, NULL, "contest23:ExchangeFrequenciesResponse");
	case SOAP_TYPE_C2_PointerTo_contest23__ExchangeFrequencies:
		return soap_in_PointerTo_contest23__ExchangeFrequencies(soap, NULL, NULL, "contest23:ExchangeFrequencies");
	case SOAP_TYPE_C2_PointerTo_contest23__ColumnNamesToIndicesResponse:
		return soap_in_PointerTo_contest23__ColumnNamesToIndicesResponse(soap, NULL, NULL, "contest23:ColumnNamesToIndicesResponse");
	case SOAP_TYPE_C2_PointerTo_contest23__ColumnNamesToIndices:
		return soap_in_PointerTo_contest23__ColumnNamesToIndices(soap, NULL, NULL, "contest23:ColumnNamesToIndices");
	case SOAP_TYPE_C2_PointerTo_contest23__getQsosByKeyArrayResponse:
		return soap_in_PointerTo_contest23__getQsosByKeyArrayResponse(soap, NULL, NULL, "contest23:getQsosByKeyArrayResponse");
	case SOAP_TYPE_C2_PointerTo_contest23__getQsosByKeyArray:
		return soap_in_PointerTo_contest23__getQsosByKeyArray(soap, NULL, NULL, "contest23:getQsosByKeyArray");
	case SOAP_TYPE_C2_PointerTo_contest23__AddAndGetLogSummaryResponse:
		return soap_in_PointerTo_contest23__AddAndGetLogSummaryResponse(soap, NULL, NULL, "contest23:AddAndGetLogSummaryResponse");
	case SOAP_TYPE_C2_PointerTo_contest23__AddAndGetLogSummary:
		return soap_in_PointerTo_contest23__AddAndGetLogSummary(soap, NULL, NULL, "contest23:AddAndGetLogSummary");
	case SOAP_TYPE_C2_PointerTo_contest23__addAndGetQsosResponse:
		return soap_in_PointerTo_contest23__addAndGetQsosResponse(soap, NULL, NULL, "contest23:addAndGetQsosResponse");
	case SOAP_TYPE_C2_PointerTo_contest23__addAndGetQsos:
		return soap_in_PointerTo_contest23__addAndGetQsos(soap, NULL, NULL, "contest23:addAndGetQsos");
	case SOAP_TYPE_C2_PointerTo_contest23__GetSessionIdResponse:
		return soap_in_PointerTo_contest23__GetSessionIdResponse(soap, NULL, NULL, "contest23:GetSessionIdResponse");
	case SOAP_TYPE_C2_PointerTo_contest23__GetSessionId:
		return soap_in_PointerTo_contest23__GetSessionId(soap, NULL, NULL, "contest23:GetSessionId");
	case SOAP_TYPE_C2_PointerTocontest25__RigFrequency:
		return soap_in_PointerTocontest25__RigFrequency(soap, NULL, NULL, "contest25:RigFrequency");
	case SOAP_TYPE_C2_PointerTocontest25__QsoIdVersion:
		return soap_in_PointerTocontest25__QsoIdVersion(soap, NULL, NULL, "contest25:QsoIdVersion");
	case SOAP_TYPE_C2_PointerTocontest25__ArrayOfQsoIdVersion:
		return soap_in_PointerTocontest25__ArrayOfQsoIdVersion(soap, NULL, NULL, "contest25:ArrayOfQsoIdVersion");
	case SOAP_TYPE_C2_PointerTocontest25__Qso:
		return soap_in_PointerTocontest25__Qso(soap, NULL, NULL, "contest25:Qso");
	case SOAP_TYPE_C2_PointerTocontest25__ArrayOfRigFrequency:
		return soap_in_PointerTocontest25__ArrayOfRigFrequency(soap, NULL, NULL, "contest25:ArrayOfRigFrequency");
	case SOAP_TYPE_C2_PointerTocontest26__ArrayOfint:
		return soap_in_PointerTocontest26__ArrayOfint(soap, NULL, NULL, "contest26:ArrayOfint");
	case SOAP_TYPE_C2_PointerTocontest26__ArrayOfstring:
		return soap_in_PointerTocontest26__ArrayOfstring(soap, NULL, NULL, "contest26:ArrayOfstring");
	case SOAP_TYPE_C2_PointerTocontest25__LogSummary:
		return soap_in_PointerTocontest25__LogSummary(soap, NULL, NULL, "contest25:LogSummary");
	case SOAP_TYPE_C2_PointerTocontest25__QsoUpdate:
		return soap_in_PointerTocontest25__QsoUpdate(soap, NULL, NULL, "contest25:QsoUpdate");
	case SOAP_TYPE_C2_PointerTocontest25__ArrayOfQso:
		return soap_in_PointerTocontest25__ArrayOfQso(soap, NULL, NULL, "contest25:ArrayOfQso");
	case SOAP_TYPE_C2_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_C2__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_C2_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "contest24:guid"))
		{	*type = SOAP_TYPE_C2_contest24__guid__;
			return soap_in_contest24__guid__(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest24:guid"))
		{	*type = SOAP_TYPE_C2_contest24__guid;
			return soap_in_contest24__guid(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest24:duration"))
		{	*type = SOAP_TYPE_C2_contest24__duration__;
			return soap_in_contest24__duration__(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest24:duration"))
		{	*type = SOAP_TYPE_C2_contest24__duration;
			return soap_in_contest24__duration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest24:char"))
		{	*type = SOAP_TYPE_C2_contest24__char__;
			return soap_in_contest24__char__(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest26:ArrayOfint"))
		{	*type = SOAP_TYPE_C2_contest26__ArrayOfint;
			return soap_in_contest26__ArrayOfint(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest26:ArrayOfstring"))
		{	*type = SOAP_TYPE_C2_contest26__ArrayOfstring;
			return soap_in_contest26__ArrayOfstring(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest25:RigFrequency"))
		{	*type = SOAP_TYPE_C2_contest25__RigFrequency;
			return soap_in_contest25__RigFrequency(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest25:ArrayOfRigFrequency"))
		{	*type = SOAP_TYPE_C2_contest25__ArrayOfRigFrequency;
			return soap_in_contest25__ArrayOfRigFrequency(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest25:QsoIdVersion"))
		{	*type = SOAP_TYPE_C2_contest25__QsoIdVersion;
			return soap_in_contest25__QsoIdVersion(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest25:ArrayOfQsoIdVersion"))
		{	*type = SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion;
			return soap_in_contest25__ArrayOfQsoIdVersion(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest25:LogSummary"))
		{	*type = SOAP_TYPE_C2_contest25__LogSummary;
			return soap_in_contest25__LogSummary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest25:QsoUpdate"))
		{	*type = SOAP_TYPE_C2_contest25__QsoUpdate;
			return soap_in_contest25__QsoUpdate(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest25:Qso"))
		{	*type = SOAP_TYPE_C2_contest25__Qso;
			return soap_in_contest25__Qso(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest25:ArrayOfQso"))
		{	*type = SOAP_TYPE_C2_contest25__ArrayOfQso;
			return soap_in_contest25__ArrayOfQso(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedShort"))
		{	*type = SOAP_TYPE_C2_xsd__unsignedShort;
			return soap_in_xsd__unsignedShort(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedLong"))
		{	*type = SOAP_TYPE_C2_xsd__unsignedLong;
			return soap_in_xsd__unsignedLong(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_C2_xsd__unsignedInt;
			return soap_in_xsd__unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_C2_xsd__unsignedByte_;
			return soap_in_xsd__unsignedByte_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_C2_xsd__string;
			return soap_in_xsd__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:short"))
		{	*type = SOAP_TYPE_C2_xsd__short;
			return soap_in_xsd__short(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_C2_xsd__long;
			return soap_in_xsd__long(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_C2_xsd__int;
			return soap_in_xsd__int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_C2_xsd__float;
			return soap_in_xsd__float(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:duration"))
		{	*type = SOAP_TYPE_C2_xsd__duration_;
			return soap_in_xsd__duration_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:duration"))
		{	*type = SOAP_TYPE_C2_xsd__duration;
			return soap_in_xsd__duration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_C2_xsd__double;
			return soap_in_xsd__double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:decimal"))
		{	*type = SOAP_TYPE_C2_xsd__decimal_;
			return soap_in_xsd__decimal_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:decimal"))
		{	*type = SOAP_TYPE_C2_xsd__decimal;
			return soap_in_xsd__decimal(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_C2_xsd__dateTime;
			return soap_in_xsd__dateTime(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_C2_xsd__byte_;
			return soap_in_xsd__byte_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_C2_xsd__boolean;
			return soap_in_xsd__boolean(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_C2_xsd__base64Binary_;
			return soap_in_xsd__base64Binary_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_C2_xsd__base64Binary;
			return soap_in_xsd__base64Binary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyURI"))
		{	*type = SOAP_TYPE_C2_xsd__anyURI_;
			return soap_in_xsd__anyURI_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyURI"))
		{	*type = SOAP_TYPE_C2_xsd__anyURI;
			return soap_in_xsd__anyURI(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	*type = SOAP_TYPE_C2_xsd__QName_;
			return soap_in_xsd__QName_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	*type = SOAP_TYPE_C2_xsd__QName;
			return soap_in_xsd__QName(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:IDREF"))
		{	*type = SOAP_TYPE_C2_xsd__IDREF_;
			return soap_in_xsd__IDREF_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:IDREF"))
		{	*type = SOAP_TYPE_C2_xsd__IDREF;
			return soap_in_xsd__IDREF(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:ID"))
		{	*type = SOAP_TYPE_C2_xsd__ID_;
			return soap_in_xsd__ID_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:ID"))
		{	*type = SOAP_TYPE_C2_xsd__ID;
			return soap_in_xsd__ID(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_C2_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyType"))
		{	*type = SOAP_TYPE_C2_xsd__anyType;
			return soap_in_xsd__anyType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_C2_xsd__byte;
			return soap_in_xsd__byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_C2_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:short"))
		{	*type = SOAP_TYPE_C2_short;
			return soap_in_short(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest24:char"))
		{	*type = SOAP_TYPE_C2_contest24__char;
			return soap_in_contest24__char(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_C2_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_C2_LONG64;
			return soap_in_LONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_C2_float;
			return soap_in_float(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_C2_double;
			return soap_in_double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_C2_xsd__unsignedByte;
			return soap_in_xsd__unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_C2_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedShort"))
		{	*type = SOAP_TYPE_C2_unsignedShort;
			return soap_in_unsignedShort(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_C2_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedLong"))
		{	*type = SOAP_TYPE_C2_unsignedLONG64;
			return soap_in_unsignedLONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_C2_time;
			return soap_in_time(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_C2_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE_C2__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_C2_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "contest23:ExchangeFrequenciesResponse"))
		{	*type = SOAP_TYPE_C2__contest23__ExchangeFrequenciesResponse;
			return soap_in__contest23__ExchangeFrequenciesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest23:ExchangeFrequencies"))
		{	*type = SOAP_TYPE_C2__contest23__ExchangeFrequencies;
			return soap_in__contest23__ExchangeFrequencies(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest23:ColumnNamesToIndicesResponse"))
		{	*type = SOAP_TYPE_C2__contest23__ColumnNamesToIndicesResponse;
			return soap_in__contest23__ColumnNamesToIndicesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest23:ColumnNamesToIndices"))
		{	*type = SOAP_TYPE_C2__contest23__ColumnNamesToIndices;
			return soap_in__contest23__ColumnNamesToIndices(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest23:getQsosByKeyArrayResponse"))
		{	*type = SOAP_TYPE_C2__contest23__getQsosByKeyArrayResponse;
			return soap_in__contest23__getQsosByKeyArrayResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest23:getQsosByKeyArray"))
		{	*type = SOAP_TYPE_C2__contest23__getQsosByKeyArray;
			return soap_in__contest23__getQsosByKeyArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest23:AddAndGetLogSummaryResponse"))
		{	*type = SOAP_TYPE_C2__contest23__AddAndGetLogSummaryResponse;
			return soap_in__contest23__AddAndGetLogSummaryResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest23:AddAndGetLogSummary"))
		{	*type = SOAP_TYPE_C2__contest23__AddAndGetLogSummary;
			return soap_in__contest23__AddAndGetLogSummary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest23:addAndGetQsosResponse"))
		{	*type = SOAP_TYPE_C2__contest23__addAndGetQsosResponse;
			return soap_in__contest23__addAndGetQsosResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest23:addAndGetQsos"))
		{	*type = SOAP_TYPE_C2__contest23__addAndGetQsos;
			return soap_in__contest23__addAndGetQsos(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest23:GetSessionIdResponse"))
		{	*type = SOAP_TYPE_C2__contest23__GetSessionIdResponse;
			return soap_in__contest23__GetSessionIdResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest23:GetSessionId"))
		{	*type = SOAP_TYPE_C2__contest23__GetSessionId;
			return soap_in__contest23__GetSessionId(soap, NULL, NULL, NULL);
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_C2_xsd__byte:
		return soap_out_xsd__byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_C2_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_C2_short:
		return soap_out_short(soap, tag, id, (const short *)ptr, "xsd:short");
	case SOAP_TYPE_C2_contest24__char:
		return soap_out_contest24__char(soap, tag, id, (const int *)ptr, "contest24:char");
	case SOAP_TYPE_C2_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_C2_LONG64:
		return soap_out_LONG64(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_C2_float:
		return soap_out_float(soap, tag, id, (const float *)ptr, "xsd:float");
	case SOAP_TYPE_C2_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_C2_xsd__unsignedByte:
		return soap_out_xsd__unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_C2_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_C2_unsignedShort:
		return soap_out_unsignedShort(soap, tag, id, (const unsigned short *)ptr, "xsd:unsignedShort");
	case SOAP_TYPE_C2_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_C2_unsignedLONG64:
		return soap_out_unsignedLONG64(soap, tag, id, (const ULONG64 *)ptr, "xsd:unsignedLong");
	case SOAP_TYPE_C2_time:
		return soap_out_time(soap, tag, id, (const time_t *)ptr, "xsd:dateTime");
	case SOAP_TYPE_C2_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_C2_contest24__guid__:
		return ((contest24__guid__ *)ptr)->soap_out(soap, tag, id, "contest24:guid");
	case SOAP_TYPE_C2_contest24__guid:
		return soap_out_contest24__guid(soap, tag, id, (const std::string *)ptr, "contest24:guid");
	case SOAP_TYPE_C2_contest24__duration__:
		return ((contest24__duration__ *)ptr)->soap_out(soap, tag, id, "contest24:duration");
	case SOAP_TYPE_C2_contest24__duration:
		return soap_out_contest24__duration(soap, tag, id, (const std::string *)ptr, "contest24:duration");
	case SOAP_TYPE_C2_contest24__char__:
		return ((contest24__char__ *)ptr)->soap_out(soap, tag, id, "contest24:char");
	case SOAP_TYPE_C2_contest26__ArrayOfint:
		return ((contest26__ArrayOfint *)ptr)->soap_out(soap, tag, id, "contest26:ArrayOfint");
	case SOAP_TYPE_C2_contest26__ArrayOfstring:
		return ((contest26__ArrayOfstring *)ptr)->soap_out(soap, tag, id, "contest26:ArrayOfstring");
	case SOAP_TYPE_C2_contest25__RigFrequency:
		return ((contest25__RigFrequency *)ptr)->soap_out(soap, tag, id, "contest25:RigFrequency");
	case SOAP_TYPE_C2_contest25__ArrayOfRigFrequency:
		return ((contest25__ArrayOfRigFrequency *)ptr)->soap_out(soap, tag, id, "contest25:ArrayOfRigFrequency");
	case SOAP_TYPE_C2_contest25__QsoIdVersion:
		return ((contest25__QsoIdVersion *)ptr)->soap_out(soap, tag, id, "contest25:QsoIdVersion");
	case SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion:
		return ((contest25__ArrayOfQsoIdVersion *)ptr)->soap_out(soap, tag, id, "contest25:ArrayOfQsoIdVersion");
	case SOAP_TYPE_C2_contest25__LogSummary:
		return ((contest25__LogSummary *)ptr)->soap_out(soap, tag, id, "contest25:LogSummary");
	case SOAP_TYPE_C2_contest25__QsoUpdate:
		return ((contest25__QsoUpdate *)ptr)->soap_out(soap, tag, id, "contest25:QsoUpdate");
	case SOAP_TYPE_C2_contest25__Qso:
		return ((contest25__Qso *)ptr)->soap_out(soap, tag, id, "contest25:Qso");
	case SOAP_TYPE_C2_contest25__ArrayOfQso:
		return ((contest25__ArrayOfQso *)ptr)->soap_out(soap, tag, id, "contest25:ArrayOfQso");
	case SOAP_TYPE_C2__contest23__ExchangeFrequenciesResponse:
		return ((_contest23__ExchangeFrequenciesResponse *)ptr)->soap_out(soap, "contest23:ExchangeFrequenciesResponse", id, NULL);
	case SOAP_TYPE_C2__contest23__ExchangeFrequencies:
		return ((_contest23__ExchangeFrequencies *)ptr)->soap_out(soap, "contest23:ExchangeFrequencies", id, NULL);
	case SOAP_TYPE_C2__contest23__ColumnNamesToIndicesResponse:
		return ((_contest23__ColumnNamesToIndicesResponse *)ptr)->soap_out(soap, "contest23:ColumnNamesToIndicesResponse", id, NULL);
	case SOAP_TYPE_C2__contest23__ColumnNamesToIndices:
		return ((_contest23__ColumnNamesToIndices *)ptr)->soap_out(soap, "contest23:ColumnNamesToIndices", id, NULL);
	case SOAP_TYPE_C2__contest23__getQsosByKeyArrayResponse:
		return ((_contest23__getQsosByKeyArrayResponse *)ptr)->soap_out(soap, "contest23:getQsosByKeyArrayResponse", id, NULL);
	case SOAP_TYPE_C2__contest23__getQsosByKeyArray:
		return ((_contest23__getQsosByKeyArray *)ptr)->soap_out(soap, "contest23:getQsosByKeyArray", id, NULL);
	case SOAP_TYPE_C2__contest23__AddAndGetLogSummaryResponse:
		return ((_contest23__AddAndGetLogSummaryResponse *)ptr)->soap_out(soap, "contest23:AddAndGetLogSummaryResponse", id, NULL);
	case SOAP_TYPE_C2__contest23__AddAndGetLogSummary:
		return ((_contest23__AddAndGetLogSummary *)ptr)->soap_out(soap, "contest23:AddAndGetLogSummary", id, NULL);
	case SOAP_TYPE_C2__contest23__addAndGetQsosResponse:
		return ((_contest23__addAndGetQsosResponse *)ptr)->soap_out(soap, "contest23:addAndGetQsosResponse", id, NULL);
	case SOAP_TYPE_C2__contest23__addAndGetQsos:
		return ((_contest23__addAndGetQsos *)ptr)->soap_out(soap, "contest23:addAndGetQsos", id, NULL);
	case SOAP_TYPE_C2__contest23__GetSessionIdResponse:
		return ((_contest23__GetSessionIdResponse *)ptr)->soap_out(soap, "contest23:GetSessionIdResponse", id, NULL);
	case SOAP_TYPE_C2__contest23__GetSessionId:
		return ((_contest23__GetSessionId *)ptr)->soap_out(soap, "contest23:GetSessionId", id, NULL);
	case SOAP_TYPE_C2_xsd__unsignedShort:
		return ((xsd__unsignedShort *)ptr)->soap_out(soap, tag, id, "xsd:unsignedShort");
	case SOAP_TYPE_C2_xsd__unsignedLong:
		return ((xsd__unsignedLong *)ptr)->soap_out(soap, tag, id, "xsd:unsignedLong");
	case SOAP_TYPE_C2_xsd__unsignedInt:
		return ((xsd__unsignedInt *)ptr)->soap_out(soap, tag, id, "xsd:unsignedInt");
	case SOAP_TYPE_C2_xsd__unsignedByte_:
		return ((xsd__unsignedByte_ *)ptr)->soap_out(soap, tag, id, "xsd:unsignedByte");
	case SOAP_TYPE_C2_xsd__string:
		return ((xsd__string *)ptr)->soap_out(soap, tag, id, "xsd:string");
	case SOAP_TYPE_C2_xsd__short:
		return ((xsd__short *)ptr)->soap_out(soap, tag, id, "xsd:short");
	case SOAP_TYPE_C2_xsd__long:
		return ((xsd__long *)ptr)->soap_out(soap, tag, id, "xsd:long");
	case SOAP_TYPE_C2_xsd__int:
		return ((xsd__int *)ptr)->soap_out(soap, tag, id, "xsd:int");
	case SOAP_TYPE_C2_xsd__float:
		return ((xsd__float *)ptr)->soap_out(soap, tag, id, "xsd:float");
	case SOAP_TYPE_C2_xsd__duration_:
		return ((xsd__duration_ *)ptr)->soap_out(soap, tag, id, "xsd:duration");
	case SOAP_TYPE_C2_xsd__duration:
		return soap_out_xsd__duration(soap, tag, id, (const std::string *)ptr, "xsd:duration");
	case SOAP_TYPE_C2_xsd__double:
		return ((xsd__double *)ptr)->soap_out(soap, tag, id, "xsd:double");
	case SOAP_TYPE_C2_xsd__decimal_:
		return ((xsd__decimal_ *)ptr)->soap_out(soap, tag, id, "xsd:decimal");
	case SOAP_TYPE_C2_xsd__decimal:
		return soap_out_xsd__decimal(soap, tag, id, (const std::string *)ptr, "xsd:decimal");
	case SOAP_TYPE_C2_xsd__dateTime:
		return ((xsd__dateTime *)ptr)->soap_out(soap, tag, id, "xsd:dateTime");
	case SOAP_TYPE_C2_xsd__byte_:
		return ((xsd__byte_ *)ptr)->soap_out(soap, tag, id, "xsd:byte");
	case SOAP_TYPE_C2_xsd__boolean:
		return ((xsd__boolean *)ptr)->soap_out(soap, tag, id, "xsd:boolean");
	case SOAP_TYPE_C2_xsd__base64Binary_:
		return ((xsd__base64Binary_ *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_C2_xsd__base64Binary:
		return ((xsd__base64Binary *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_C2_xsd__anyURI_:
		return ((xsd__anyURI_ *)ptr)->soap_out(soap, tag, id, "xsd:anyURI");
	case SOAP_TYPE_C2_xsd__anyURI:
		return soap_out_xsd__anyURI(soap, tag, id, (const std::string *)ptr, "xsd:anyURI");
	case SOAP_TYPE_C2_xsd__QName_:
		return ((xsd__QName_ *)ptr)->soap_out(soap, tag, id, "xsd:QName");
	case SOAP_TYPE_C2_xsd__QName:
		return soap_out_xsd__QName(soap, tag, id, (const xsd__QName *)ptr, "xsd:QName");
	case SOAP_TYPE_C2_xsd__IDREF_:
		return ((xsd__IDREF_ *)ptr)->soap_out(soap, tag, id, "xsd:IDREF");
	case SOAP_TYPE_C2_xsd__IDREF:
		return soap_out_xsd__IDREF(soap, tag, id, (const std::string *)ptr, "xsd:IDREF");
	case SOAP_TYPE_C2_xsd__ID_:
		return ((xsd__ID_ *)ptr)->soap_out(soap, tag, id, "xsd:ID");
	case SOAP_TYPE_C2_xsd__ID:
		return soap_out_xsd__ID(soap, tag, id, (const std::string *)ptr, "xsd:ID");
	case SOAP_TYPE_C2_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_C2_xsd__anyType:
		return ((xsd__anyType *)ptr)->soap_out(soap, tag, id, "xsd:anyType");
	case SOAP_TYPE_C2_PointerTo_contest23__ExchangeFrequenciesResponse:
		return soap_out_PointerTo_contest23__ExchangeFrequenciesResponse(soap, tag, id, (_contest23__ExchangeFrequenciesResponse *const*)ptr, "contest23:ExchangeFrequenciesResponse");
	case SOAP_TYPE_C2_PointerTo_contest23__ExchangeFrequencies:
		return soap_out_PointerTo_contest23__ExchangeFrequencies(soap, tag, id, (_contest23__ExchangeFrequencies *const*)ptr, "contest23:ExchangeFrequencies");
	case SOAP_TYPE_C2_PointerTo_contest23__ColumnNamesToIndicesResponse:
		return soap_out_PointerTo_contest23__ColumnNamesToIndicesResponse(soap, tag, id, (_contest23__ColumnNamesToIndicesResponse *const*)ptr, "contest23:ColumnNamesToIndicesResponse");
	case SOAP_TYPE_C2_PointerTo_contest23__ColumnNamesToIndices:
		return soap_out_PointerTo_contest23__ColumnNamesToIndices(soap, tag, id, (_contest23__ColumnNamesToIndices *const*)ptr, "contest23:ColumnNamesToIndices");
	case SOAP_TYPE_C2_PointerTo_contest23__getQsosByKeyArrayResponse:
		return soap_out_PointerTo_contest23__getQsosByKeyArrayResponse(soap, tag, id, (_contest23__getQsosByKeyArrayResponse *const*)ptr, "contest23:getQsosByKeyArrayResponse");
	case SOAP_TYPE_C2_PointerTo_contest23__getQsosByKeyArray:
		return soap_out_PointerTo_contest23__getQsosByKeyArray(soap, tag, id, (_contest23__getQsosByKeyArray *const*)ptr, "contest23:getQsosByKeyArray");
	case SOAP_TYPE_C2_PointerTo_contest23__AddAndGetLogSummaryResponse:
		return soap_out_PointerTo_contest23__AddAndGetLogSummaryResponse(soap, tag, id, (_contest23__AddAndGetLogSummaryResponse *const*)ptr, "contest23:AddAndGetLogSummaryResponse");
	case SOAP_TYPE_C2_PointerTo_contest23__AddAndGetLogSummary:
		return soap_out_PointerTo_contest23__AddAndGetLogSummary(soap, tag, id, (_contest23__AddAndGetLogSummary *const*)ptr, "contest23:AddAndGetLogSummary");
	case SOAP_TYPE_C2_PointerTo_contest23__addAndGetQsosResponse:
		return soap_out_PointerTo_contest23__addAndGetQsosResponse(soap, tag, id, (_contest23__addAndGetQsosResponse *const*)ptr, "contest23:addAndGetQsosResponse");
	case SOAP_TYPE_C2_PointerTo_contest23__addAndGetQsos:
		return soap_out_PointerTo_contest23__addAndGetQsos(soap, tag, id, (_contest23__addAndGetQsos *const*)ptr, "contest23:addAndGetQsos");
	case SOAP_TYPE_C2_PointerTo_contest23__GetSessionIdResponse:
		return soap_out_PointerTo_contest23__GetSessionIdResponse(soap, tag, id, (_contest23__GetSessionIdResponse *const*)ptr, "contest23:GetSessionIdResponse");
	case SOAP_TYPE_C2_PointerTo_contest23__GetSessionId:
		return soap_out_PointerTo_contest23__GetSessionId(soap, tag, id, (_contest23__GetSessionId *const*)ptr, "contest23:GetSessionId");
	case SOAP_TYPE_C2_PointerTocontest25__RigFrequency:
		return soap_out_PointerTocontest25__RigFrequency(soap, tag, id, (contest25__RigFrequency *const*)ptr, "contest25:RigFrequency");
	case SOAP_TYPE_C2_PointerTocontest25__QsoIdVersion:
		return soap_out_PointerTocontest25__QsoIdVersion(soap, tag, id, (contest25__QsoIdVersion *const*)ptr, "contest25:QsoIdVersion");
	case SOAP_TYPE_C2_PointerTocontest25__ArrayOfQsoIdVersion:
		return soap_out_PointerTocontest25__ArrayOfQsoIdVersion(soap, tag, id, (contest25__ArrayOfQsoIdVersion *const*)ptr, "contest25:ArrayOfQsoIdVersion");
	case SOAP_TYPE_C2_PointerTocontest25__Qso:
		return soap_out_PointerTocontest25__Qso(soap, tag, id, (contest25__Qso *const*)ptr, "contest25:Qso");
	case SOAP_TYPE_C2_PointerTocontest25__ArrayOfRigFrequency:
		return soap_out_PointerTocontest25__ArrayOfRigFrequency(soap, tag, id, (contest25__ArrayOfRigFrequency *const*)ptr, "contest25:ArrayOfRigFrequency");
	case SOAP_TYPE_C2_PointerTocontest26__ArrayOfint:
		return soap_out_PointerTocontest26__ArrayOfint(soap, tag, id, (contest26__ArrayOfint *const*)ptr, "contest26:ArrayOfint");
	case SOAP_TYPE_C2_PointerTocontest26__ArrayOfstring:
		return soap_out_PointerTocontest26__ArrayOfstring(soap, tag, id, (contest26__ArrayOfstring *const*)ptr, "contest26:ArrayOfstring");
	case SOAP_TYPE_C2_PointerTocontest25__LogSummary:
		return soap_out_PointerTocontest25__LogSummary(soap, tag, id, (contest25__LogSummary *const*)ptr, "contest25:LogSummary");
	case SOAP_TYPE_C2_PointerTocontest25__QsoUpdate:
		return soap_out_PointerTocontest25__QsoUpdate(soap, tag, id, (contest25__QsoUpdate *const*)ptr, "contest25:QsoUpdate");
	case SOAP_TYPE_C2_PointerTocontest25__ArrayOfQso:
		return soap_out_PointerTocontest25__ArrayOfQso(soap, tag, id, (contest25__ArrayOfQso *const*)ptr, "contest25:ArrayOfQso");
	case SOAP_TYPE_C2_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_C2__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_C2_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_C2_contest24__guid__:
		((contest24__guid__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_contest24__guid:
		soap_serialize_contest24__guid(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_C2_contest24__duration__:
		((contest24__duration__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_contest24__duration:
		soap_serialize_contest24__duration(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_C2_contest24__char__:
		((contest24__char__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_contest26__ArrayOfint:
		((contest26__ArrayOfint *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_contest26__ArrayOfstring:
		((contest26__ArrayOfstring *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_contest25__RigFrequency:
		((contest25__RigFrequency *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_contest25__ArrayOfRigFrequency:
		((contest25__ArrayOfRigFrequency *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_contest25__QsoIdVersion:
		((contest25__QsoIdVersion *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion:
		((contest25__ArrayOfQsoIdVersion *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_contest25__LogSummary:
		((contest25__LogSummary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_contest25__QsoUpdate:
		((contest25__QsoUpdate *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_contest25__Qso:
		((contest25__Qso *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_contest25__ArrayOfQso:
		((contest25__ArrayOfQso *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2__contest23__ExchangeFrequenciesResponse:
		((_contest23__ExchangeFrequenciesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2__contest23__ExchangeFrequencies:
		((_contest23__ExchangeFrequencies *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2__contest23__ColumnNamesToIndicesResponse:
		((_contest23__ColumnNamesToIndicesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2__contest23__ColumnNamesToIndices:
		((_contest23__ColumnNamesToIndices *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2__contest23__getQsosByKeyArrayResponse:
		((_contest23__getQsosByKeyArrayResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2__contest23__getQsosByKeyArray:
		((_contest23__getQsosByKeyArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2__contest23__AddAndGetLogSummaryResponse:
		((_contest23__AddAndGetLogSummaryResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2__contest23__AddAndGetLogSummary:
		((_contest23__AddAndGetLogSummary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2__contest23__addAndGetQsosResponse:
		((_contest23__addAndGetQsosResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2__contest23__addAndGetQsos:
		((_contest23__addAndGetQsos *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2__contest23__GetSessionIdResponse:
		((_contest23__GetSessionIdResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2__contest23__GetSessionId:
		((_contest23__GetSessionId *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__unsignedShort:
		((xsd__unsignedShort *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__unsignedLong:
		((xsd__unsignedLong *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__unsignedInt:
		((xsd__unsignedInt *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__unsignedByte_:
		((xsd__unsignedByte_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__string:
		((xsd__string *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__short:
		((xsd__short *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__long:
		((xsd__long *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__int:
		((xsd__int *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__float:
		((xsd__float *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__duration_:
		((xsd__duration_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__duration:
		soap_serialize_xsd__duration(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_C2_xsd__double:
		((xsd__double *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__decimal_:
		((xsd__decimal_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__decimal:
		soap_serialize_xsd__decimal(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_C2_xsd__dateTime:
		((xsd__dateTime *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__byte_:
		((xsd__byte_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__boolean:
		((xsd__boolean *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__base64Binary_:
		((xsd__base64Binary_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__base64Binary:
		((xsd__base64Binary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__anyURI_:
		((xsd__anyURI_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__anyURI:
		soap_serialize_xsd__anyURI(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_C2_xsd__QName_:
		((xsd__QName_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__QName:
		soap_serialize_xsd__QName(soap, (const xsd__QName *)ptr);
		break;
	case SOAP_TYPE_C2_xsd__IDREF_:
		((xsd__IDREF_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__IDREF:
		soap_serialize_xsd__IDREF(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_C2_xsd__ID_:
		((xsd__ID_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__ID:
		soap_serialize_xsd__ID(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_C2_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_C2_xsd__anyType:
		((xsd__anyType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2___contest21__ExchangeFrequencies:
		soap_serialize___contest21__ExchangeFrequencies(soap, (const struct __contest21__ExchangeFrequencies *)ptr);
		break;
	case SOAP_TYPE_C2___contest21__ColumnNamesToIndices:
		soap_serialize___contest21__ColumnNamesToIndices(soap, (const struct __contest21__ColumnNamesToIndices *)ptr);
		break;
	case SOAP_TYPE_C2___contest21__getQsosByKeyArray:
		soap_serialize___contest21__getQsosByKeyArray(soap, (const struct __contest21__getQsosByKeyArray *)ptr);
		break;
	case SOAP_TYPE_C2___contest21__AddAndGetLogSummary:
		soap_serialize___contest21__AddAndGetLogSummary(soap, (const struct __contest21__AddAndGetLogSummary *)ptr);
		break;
	case SOAP_TYPE_C2___contest21__addAndGetQsos:
		soap_serialize___contest21__addAndGetQsos(soap, (const struct __contest21__addAndGetQsos *)ptr);
		break;
	case SOAP_TYPE_C2___contest21__GetSessionId:
		soap_serialize___contest21__GetSessionId(soap, (const struct __contest21__GetSessionId *)ptr);
		break;
	case SOAP_TYPE_C2_PointerTo_contest23__ExchangeFrequenciesResponse:
		soap_serialize_PointerTo_contest23__ExchangeFrequenciesResponse(soap, (_contest23__ExchangeFrequenciesResponse *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTo_contest23__ExchangeFrequencies:
		soap_serialize_PointerTo_contest23__ExchangeFrequencies(soap, (_contest23__ExchangeFrequencies *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTo_contest23__ColumnNamesToIndicesResponse:
		soap_serialize_PointerTo_contest23__ColumnNamesToIndicesResponse(soap, (_contest23__ColumnNamesToIndicesResponse *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTo_contest23__ColumnNamesToIndices:
		soap_serialize_PointerTo_contest23__ColumnNamesToIndices(soap, (_contest23__ColumnNamesToIndices *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTo_contest23__getQsosByKeyArrayResponse:
		soap_serialize_PointerTo_contest23__getQsosByKeyArrayResponse(soap, (_contest23__getQsosByKeyArrayResponse *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTo_contest23__getQsosByKeyArray:
		soap_serialize_PointerTo_contest23__getQsosByKeyArray(soap, (_contest23__getQsosByKeyArray *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTo_contest23__AddAndGetLogSummaryResponse:
		soap_serialize_PointerTo_contest23__AddAndGetLogSummaryResponse(soap, (_contest23__AddAndGetLogSummaryResponse *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTo_contest23__AddAndGetLogSummary:
		soap_serialize_PointerTo_contest23__AddAndGetLogSummary(soap, (_contest23__AddAndGetLogSummary *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTo_contest23__addAndGetQsosResponse:
		soap_serialize_PointerTo_contest23__addAndGetQsosResponse(soap, (_contest23__addAndGetQsosResponse *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTo_contest23__addAndGetQsos:
		soap_serialize_PointerTo_contest23__addAndGetQsos(soap, (_contest23__addAndGetQsos *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTo_contest23__GetSessionIdResponse:
		soap_serialize_PointerTo_contest23__GetSessionIdResponse(soap, (_contest23__GetSessionIdResponse *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTo_contest23__GetSessionId:
		soap_serialize_PointerTo_contest23__GetSessionId(soap, (_contest23__GetSessionId *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTocontest25__RigFrequency:
		soap_serialize_PointerTocontest25__RigFrequency(soap, (contest25__RigFrequency *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTocontest25__QsoIdVersion:
		soap_serialize_PointerTocontest25__QsoIdVersion(soap, (contest25__QsoIdVersion *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTocontest25__ArrayOfQsoIdVersion:
		soap_serialize_PointerTocontest25__ArrayOfQsoIdVersion(soap, (contest25__ArrayOfQsoIdVersion *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTocontest25__Qso:
		soap_serialize_PointerTocontest25__Qso(soap, (contest25__Qso *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTocontest25__ArrayOfRigFrequency:
		soap_serialize_PointerTocontest25__ArrayOfRigFrequency(soap, (contest25__ArrayOfRigFrequency *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTocontest26__ArrayOfint:
		soap_serialize_PointerTocontest26__ArrayOfint(soap, (contest26__ArrayOfint *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTocontest26__ArrayOfstring:
		soap_serialize_PointerTocontest26__ArrayOfstring(soap, (contest26__ArrayOfstring *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTocontest25__LogSummary:
		soap_serialize_PointerTocontest25__LogSummary(soap, (contest25__LogSummary *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTocontest25__QsoUpdate:
		soap_serialize_PointerTocontest25__QsoUpdate(soap, (contest25__QsoUpdate *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTocontest25__ArrayOfQso:
		soap_serialize_PointerTocontest25__ArrayOfQso(soap, (contest25__ArrayOfQso *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE_C2__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_C2_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_C2_xsd__anyType:
		return (void*)soap_instantiate_xsd__anyType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__ID_:
		return (void*)soap_instantiate_xsd__ID_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__IDREF_:
		return (void*)soap_instantiate_xsd__IDREF_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__QName_:
		return (void*)soap_instantiate_xsd__QName_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__anyURI_:
		return (void*)soap_instantiate_xsd__anyURI_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__base64Binary:
		return (void*)soap_instantiate_xsd__base64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__base64Binary_:
		return (void*)soap_instantiate_xsd__base64Binary_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__boolean:
		return (void*)soap_instantiate_xsd__boolean(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__byte_:
		return (void*)soap_instantiate_xsd__byte_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__dateTime:
		return (void*)soap_instantiate_xsd__dateTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__decimal_:
		return (void*)soap_instantiate_xsd__decimal_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__double:
		return (void*)soap_instantiate_xsd__double(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__duration_:
		return (void*)soap_instantiate_xsd__duration_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__float:
		return (void*)soap_instantiate_xsd__float(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__int:
		return (void*)soap_instantiate_xsd__int(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__long:
		return (void*)soap_instantiate_xsd__long(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__short:
		return (void*)soap_instantiate_xsd__short(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__string:
		return (void*)soap_instantiate_xsd__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__unsignedByte_:
		return (void*)soap_instantiate_xsd__unsignedByte_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__unsignedInt:
		return (void*)soap_instantiate_xsd__unsignedInt(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__unsignedLong:
		return (void*)soap_instantiate_xsd__unsignedLong(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__unsignedShort:
		return (void*)soap_instantiate_xsd__unsignedShort(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_contest24__char__:
		return (void*)soap_instantiate_contest24__char__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_contest24__duration__:
		return (void*)soap_instantiate_contest24__duration__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_contest24__guid__:
		return (void*)soap_instantiate_contest24__guid__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2__contest23__GetSessionId:
		return (void*)soap_instantiate__contest23__GetSessionId(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2__contest23__GetSessionIdResponse:
		return (void*)soap_instantiate__contest23__GetSessionIdResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2__contest23__addAndGetQsos:
		return (void*)soap_instantiate__contest23__addAndGetQsos(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2__contest23__addAndGetQsosResponse:
		return (void*)soap_instantiate__contest23__addAndGetQsosResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2__contest23__AddAndGetLogSummary:
		return (void*)soap_instantiate__contest23__AddAndGetLogSummary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2__contest23__AddAndGetLogSummaryResponse:
		return (void*)soap_instantiate__contest23__AddAndGetLogSummaryResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2__contest23__getQsosByKeyArray:
		return (void*)soap_instantiate__contest23__getQsosByKeyArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2__contest23__getQsosByKeyArrayResponse:
		return (void*)soap_instantiate__contest23__getQsosByKeyArrayResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2__contest23__ColumnNamesToIndices:
		return (void*)soap_instantiate__contest23__ColumnNamesToIndices(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2__contest23__ColumnNamesToIndicesResponse:
		return (void*)soap_instantiate__contest23__ColumnNamesToIndicesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2__contest23__ExchangeFrequencies:
		return (void*)soap_instantiate__contest23__ExchangeFrequencies(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2__contest23__ExchangeFrequenciesResponse:
		return (void*)soap_instantiate__contest23__ExchangeFrequenciesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_contest25__ArrayOfQso:
		return (void*)soap_instantiate_contest25__ArrayOfQso(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_contest25__Qso:
		return (void*)soap_instantiate_contest25__Qso(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_contest25__QsoUpdate:
		return (void*)soap_instantiate_contest25__QsoUpdate(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_contest25__LogSummary:
		return (void*)soap_instantiate_contest25__LogSummary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion:
		return (void*)soap_instantiate_contest25__ArrayOfQsoIdVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_contest25__QsoIdVersion:
		return (void*)soap_instantiate_contest25__QsoIdVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_contest25__ArrayOfRigFrequency:
		return (void*)soap_instantiate_contest25__ArrayOfRigFrequency(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_contest25__RigFrequency:
		return (void*)soap_instantiate_contest25__RigFrequency(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_contest26__ArrayOfstring:
		return (void*)soap_instantiate_contest26__ArrayOfstring(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_contest26__ArrayOfint:
		return (void*)soap_instantiate_contest26__ArrayOfint(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2___contest21__GetSessionId:
		return (void*)soap_instantiate___contest21__GetSessionId(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2___contest21__addAndGetQsos:
		return (void*)soap_instantiate___contest21__addAndGetQsos(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2___contest21__AddAndGetLogSummary:
		return (void*)soap_instantiate___contest21__AddAndGetLogSummary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2___contest21__getQsosByKeyArray:
		return (void*)soap_instantiate___contest21__getQsosByKeyArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2___contest21__ColumnNamesToIndices:
		return (void*)soap_instantiate___contest21__ColumnNamesToIndices(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2___contest21__ExchangeFrequencies:
		return (void*)soap_instantiate___contest21__ExchangeFrequencies(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C2_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C2_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C2_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C2_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C2_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_C2_xsd__ID:
		return (void*)soap_instantiate_xsd__ID(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__IDREF:
		return (void*)soap_instantiate_xsd__IDREF(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__QName:
		return (void*)soap_instantiate_xsd__QName(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__anyURI:
		return (void*)soap_instantiate_xsd__anyURI(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__decimal:
		return (void*)soap_instantiate_xsd__decimal(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__duration:
		return (void*)soap_instantiate_xsd__duration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_contest24__duration:
		return (void*)soap_instantiate_contest24__duration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_contest24__guid:
		return (void*)soap_instantiate_contest24__guid(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_std__vectorTemplateOfint:
		return (void*)soap_instantiate_std__vectorTemplateOfint(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_std__vectorTemplateOfstd__string:
		return (void*)soap_instantiate_std__vectorTemplateOfstd__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__RigFrequency:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTocontest25__RigFrequency(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__QsoIdVersion:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTocontest25__QsoIdVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__Qso:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTocontest25__Qso(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_C2_xsd__anyType:
		if (p->size < 0)
			delete (xsd__anyType*)p->ptr;
		else
			delete[] (xsd__anyType*)p->ptr;
		break;
	case SOAP_TYPE_C2_std__string:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_C2_xsd__ID_:
		if (p->size < 0)
			delete (xsd__ID_*)p->ptr;
		else
			delete[] (xsd__ID_*)p->ptr;
		break;
	case SOAP_TYPE_C2_xsd__IDREF_:
		if (p->size < 0)
			delete (xsd__IDREF_*)p->ptr;
		else
			delete[] (xsd__IDREF_*)p->ptr;
		break;
	case SOAP_TYPE_C2_xsd__QName_:
		if (p->size < 0)
			delete (xsd__QName_*)p->ptr;
		else
			delete[] (xsd__QName_*)p->ptr;
		break;
	case SOAP_TYPE_C2_xsd__anyURI_:
		if (p->size < 0)
			delete (xsd__anyURI_*)p->ptr;
		else
			delete[] (xsd__anyURI_*)p->ptr;
		break;
	case SOAP_TYPE_C2_xsd__base64Binary:
		if (p->size < 0)
			delete (xsd__base64Binary*)p->ptr;
		else
			delete[] (xsd__base64Binary*)p->ptr;
		break;
	case SOAP_TYPE_C2_xsd__base64Binary_:
		if (p->size < 0)
			delete (xsd__base64Binary_*)p->ptr;
		else
			delete[] (xsd__base64Binary_*)p->ptr;
		break;
	case SOAP_TYPE_C2_xsd__boolean:
		if (p->size < 0)
			delete (xsd__boolean*)p->ptr;
		else
			delete[] (xsd__boolean*)p->ptr;
		break;
	case SOAP_TYPE_C2_xsd__byte_:
		if (p->size < 0)
			delete (xsd__byte_*)p->ptr;
		else
			delete[] (xsd__byte_*)p->ptr;
		break;
	case SOAP_TYPE_C2_xsd__dateTime:
		if (p->size < 0)
			delete (xsd__dateTime*)p->ptr;
		else
			delete[] (xsd__dateTime*)p->ptr;
		break;
	case SOAP_TYPE_C2_xsd__decimal_:
		if (p->size < 0)
			delete (xsd__decimal_*)p->ptr;
		else
			delete[] (xsd__decimal_*)p->ptr;
		break;
	case SOAP_TYPE_C2_xsd__double:
		if (p->size < 0)
			delete (xsd__double*)p->ptr;
		else
			delete[] (xsd__double*)p->ptr;
		break;
	case SOAP_TYPE_C2_xsd__duration_:
		if (p->size < 0)
			delete (xsd__duration_*)p->ptr;
		else
			delete[] (xsd__duration_*)p->ptr;
		break;
	case SOAP_TYPE_C2_xsd__float:
		if (p->size < 0)
			delete (xsd__float*)p->ptr;
		else
			delete[] (xsd__float*)p->ptr;
		break;
	case SOAP_TYPE_C2_xsd__int:
		if (p->size < 0)
			delete (xsd__int*)p->ptr;
		else
			delete[] (xsd__int*)p->ptr;
		break;
	case SOAP_TYPE_C2_xsd__long:
		if (p->size < 0)
			delete (xsd__long*)p->ptr;
		else
			delete[] (xsd__long*)p->ptr;
		break;
	case SOAP_TYPE_C2_xsd__short:
		if (p->size < 0)
			delete (xsd__short*)p->ptr;
		else
			delete[] (xsd__short*)p->ptr;
		break;
	case SOAP_TYPE_C2_xsd__string:
		if (p->size < 0)
			delete (xsd__string*)p->ptr;
		else
			delete[] (xsd__string*)p->ptr;
		break;
	case SOAP_TYPE_C2_xsd__unsignedByte_:
		if (p->size < 0)
			delete (xsd__unsignedByte_*)p->ptr;
		else
			delete[] (xsd__unsignedByte_*)p->ptr;
		break;
	case SOAP_TYPE_C2_xsd__unsignedInt:
		if (p->size < 0)
			delete (xsd__unsignedInt*)p->ptr;
		else
			delete[] (xsd__unsignedInt*)p->ptr;
		break;
	case SOAP_TYPE_C2_xsd__unsignedLong:
		if (p->size < 0)
			delete (xsd__unsignedLong*)p->ptr;
		else
			delete[] (xsd__unsignedLong*)p->ptr;
		break;
	case SOAP_TYPE_C2_xsd__unsignedShort:
		if (p->size < 0)
			delete (xsd__unsignedShort*)p->ptr;
		else
			delete[] (xsd__unsignedShort*)p->ptr;
		break;
	case SOAP_TYPE_C2_contest24__char__:
		if (p->size < 0)
			delete (contest24__char__*)p->ptr;
		else
			delete[] (contest24__char__*)p->ptr;
		break;
	case SOAP_TYPE_C2_contest24__duration__:
		if (p->size < 0)
			delete (contest24__duration__*)p->ptr;
		else
			delete[] (contest24__duration__*)p->ptr;
		break;
	case SOAP_TYPE_C2_contest24__guid__:
		if (p->size < 0)
			delete (contest24__guid__*)p->ptr;
		else
			delete[] (contest24__guid__*)p->ptr;
		break;
	case SOAP_TYPE_C2__contest23__GetSessionId:
		if (p->size < 0)
			delete (_contest23__GetSessionId*)p->ptr;
		else
			delete[] (_contest23__GetSessionId*)p->ptr;
		break;
	case SOAP_TYPE_C2__contest23__GetSessionIdResponse:
		if (p->size < 0)
			delete (_contest23__GetSessionIdResponse*)p->ptr;
		else
			delete[] (_contest23__GetSessionIdResponse*)p->ptr;
		break;
	case SOAP_TYPE_C2__contest23__addAndGetQsos:
		if (p->size < 0)
			delete (_contest23__addAndGetQsos*)p->ptr;
		else
			delete[] (_contest23__addAndGetQsos*)p->ptr;
		break;
	case SOAP_TYPE_C2__contest23__addAndGetQsosResponse:
		if (p->size < 0)
			delete (_contest23__addAndGetQsosResponse*)p->ptr;
		else
			delete[] (_contest23__addAndGetQsosResponse*)p->ptr;
		break;
	case SOAP_TYPE_C2__contest23__AddAndGetLogSummary:
		if (p->size < 0)
			delete (_contest23__AddAndGetLogSummary*)p->ptr;
		else
			delete[] (_contest23__AddAndGetLogSummary*)p->ptr;
		break;
	case SOAP_TYPE_C2__contest23__AddAndGetLogSummaryResponse:
		if (p->size < 0)
			delete (_contest23__AddAndGetLogSummaryResponse*)p->ptr;
		else
			delete[] (_contest23__AddAndGetLogSummaryResponse*)p->ptr;
		break;
	case SOAP_TYPE_C2__contest23__getQsosByKeyArray:
		if (p->size < 0)
			delete (_contest23__getQsosByKeyArray*)p->ptr;
		else
			delete[] (_contest23__getQsosByKeyArray*)p->ptr;
		break;
	case SOAP_TYPE_C2__contest23__getQsosByKeyArrayResponse:
		if (p->size < 0)
			delete (_contest23__getQsosByKeyArrayResponse*)p->ptr;
		else
			delete[] (_contest23__getQsosByKeyArrayResponse*)p->ptr;
		break;
	case SOAP_TYPE_C2__contest23__ColumnNamesToIndices:
		if (p->size < 0)
			delete (_contest23__ColumnNamesToIndices*)p->ptr;
		else
			delete[] (_contest23__ColumnNamesToIndices*)p->ptr;
		break;
	case SOAP_TYPE_C2__contest23__ColumnNamesToIndicesResponse:
		if (p->size < 0)
			delete (_contest23__ColumnNamesToIndicesResponse*)p->ptr;
		else
			delete[] (_contest23__ColumnNamesToIndicesResponse*)p->ptr;
		break;
	case SOAP_TYPE_C2__contest23__ExchangeFrequencies:
		if (p->size < 0)
			delete (_contest23__ExchangeFrequencies*)p->ptr;
		else
			delete[] (_contest23__ExchangeFrequencies*)p->ptr;
		break;
	case SOAP_TYPE_C2__contest23__ExchangeFrequenciesResponse:
		if (p->size < 0)
			delete (_contest23__ExchangeFrequenciesResponse*)p->ptr;
		else
			delete[] (_contest23__ExchangeFrequenciesResponse*)p->ptr;
		break;
	case SOAP_TYPE_C2_contest25__ArrayOfQso:
		if (p->size < 0)
			delete (contest25__ArrayOfQso*)p->ptr;
		else
			delete[] (contest25__ArrayOfQso*)p->ptr;
		break;
	case SOAP_TYPE_C2_contest25__Qso:
		if (p->size < 0)
			delete (contest25__Qso*)p->ptr;
		else
			delete[] (contest25__Qso*)p->ptr;
		break;
	case SOAP_TYPE_C2_contest25__QsoUpdate:
		if (p->size < 0)
			delete (contest25__QsoUpdate*)p->ptr;
		else
			delete[] (contest25__QsoUpdate*)p->ptr;
		break;
	case SOAP_TYPE_C2_contest25__LogSummary:
		if (p->size < 0)
			delete (contest25__LogSummary*)p->ptr;
		else
			delete[] (contest25__LogSummary*)p->ptr;
		break;
	case SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion:
		if (p->size < 0)
			delete (contest25__ArrayOfQsoIdVersion*)p->ptr;
		else
			delete[] (contest25__ArrayOfQsoIdVersion*)p->ptr;
		break;
	case SOAP_TYPE_C2_contest25__QsoIdVersion:
		if (p->size < 0)
			delete (contest25__QsoIdVersion*)p->ptr;
		else
			delete[] (contest25__QsoIdVersion*)p->ptr;
		break;
	case SOAP_TYPE_C2_contest25__ArrayOfRigFrequency:
		if (p->size < 0)
			delete (contest25__ArrayOfRigFrequency*)p->ptr;
		else
			delete[] (contest25__ArrayOfRigFrequency*)p->ptr;
		break;
	case SOAP_TYPE_C2_contest25__RigFrequency:
		if (p->size < 0)
			delete (contest25__RigFrequency*)p->ptr;
		else
			delete[] (contest25__RigFrequency*)p->ptr;
		break;
	case SOAP_TYPE_C2_contest26__ArrayOfstring:
		if (p->size < 0)
			delete (contest26__ArrayOfstring*)p->ptr;
		else
			delete[] (contest26__ArrayOfstring*)p->ptr;
		break;
	case SOAP_TYPE_C2_contest26__ArrayOfint:
		if (p->size < 0)
			delete (contest26__ArrayOfint*)p->ptr;
		else
			delete[] (contest26__ArrayOfint*)p->ptr;
		break;
	case SOAP_TYPE_C2___contest21__GetSessionId:
		if (p->size < 0)
			delete (struct __contest21__GetSessionId*)p->ptr;
		else
			delete[] (struct __contest21__GetSessionId*)p->ptr;
		break;
	case SOAP_TYPE_C2___contest21__addAndGetQsos:
		if (p->size < 0)
			delete (struct __contest21__addAndGetQsos*)p->ptr;
		else
			delete[] (struct __contest21__addAndGetQsos*)p->ptr;
		break;
	case SOAP_TYPE_C2___contest21__AddAndGetLogSummary:
		if (p->size < 0)
			delete (struct __contest21__AddAndGetLogSummary*)p->ptr;
		else
			delete[] (struct __contest21__AddAndGetLogSummary*)p->ptr;
		break;
	case SOAP_TYPE_C2___contest21__getQsosByKeyArray:
		if (p->size < 0)
			delete (struct __contest21__getQsosByKeyArray*)p->ptr;
		else
			delete[] (struct __contest21__getQsosByKeyArray*)p->ptr;
		break;
	case SOAP_TYPE_C2___contest21__ColumnNamesToIndices:
		if (p->size < 0)
			delete (struct __contest21__ColumnNamesToIndices*)p->ptr;
		else
			delete[] (struct __contest21__ColumnNamesToIndices*)p->ptr;
		break;
	case SOAP_TYPE_C2___contest21__ExchangeFrequencies:
		if (p->size < 0)
			delete (struct __contest21__ExchangeFrequencies*)p->ptr;
		else
			delete[] (struct __contest21__ExchangeFrequencies*)p->ptr;
		break;
	case SOAP_TYPE_C2_SOAP_ENV__Header:
		if (p->size < 0)
			delete (struct SOAP_ENV__Header*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Header*)p->ptr;
		break;
	case SOAP_TYPE_C2_SOAP_ENV__Code:
		if (p->size < 0)
			delete (struct SOAP_ENV__Code*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Code*)p->ptr;
		break;
	case SOAP_TYPE_C2_SOAP_ENV__Detail:
		if (p->size < 0)
			delete (struct SOAP_ENV__Detail*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Detail*)p->ptr;
		break;
	case SOAP_TYPE_C2_SOAP_ENV__Reason:
		if (p->size < 0)
			delete (struct SOAP_ENV__Reason*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Reason*)p->ptr;
		break;
	case SOAP_TYPE_C2_SOAP_ENV__Fault:
		if (p->size < 0)
			delete (struct SOAP_ENV__Fault*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Fault*)p->ptr;
		break;
	case SOAP_TYPE_C2_xsd__ID:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_C2_xsd__IDREF:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_C2_xsd__QName:
		if (p->size < 0)
			delete (xsd__QName*)p->ptr;
		else
			delete[] (xsd__QName*)p->ptr;
		break;
	case SOAP_TYPE_C2_xsd__anyURI:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_C2_xsd__decimal:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_C2_xsd__duration:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_C2_contest24__duration:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_C2_contest24__guid:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_C2_std__vectorTemplateOfint:
		if (p->size < 0)
			delete (std::vector<int >*)p->ptr;
		else
			delete[] (std::vector<int >*)p->ptr;
		break;
	case SOAP_TYPE_C2_std__vectorTemplateOfstd__string:
		if (p->size < 0)
			delete (std::vector<std::string >*)p->ptr;
		else
			delete[] (std::vector<std::string >*)p->ptr;
		break;
	case SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__RigFrequency:
		if (p->size < 0)
			delete (std::vector<contest25__RigFrequency * >*)p->ptr;
		else
			delete[] (std::vector<contest25__RigFrequency * >*)p->ptr;
		break;
	case SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__QsoIdVersion:
		if (p->size < 0)
			delete (std::vector<contest25__QsoIdVersion * >*)p->ptr;
		else
			delete[] (std::vector<contest25__QsoIdVersion * >*)p->ptr;
		break;
	case SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__Qso:
		if (p->size < 0)
			delete (std::vector<contest25__Qso * >*)p->ptr;
		else
			delete[] (std::vector<contest25__Qso * >*)p->ptr;
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{	switch (tt)
	{
	case SOAP_TYPE_C2_std__vectorTemplateOfint:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<int >*)p)[len] = *(int *)q;
		break;
	case SOAP_TYPE_C2_std__vectorTemplateOfstd__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<std::string >*)p)[len] = *(std::string *)q;
		break;
	case SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__RigFrequency:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<contest25__RigFrequency * >*)p)[len] = *(contest25__RigFrequency **)q;
		break;
	case SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__QsoIdVersion:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<contest25__QsoIdVersion * >*)p)[len] = *(contest25__QsoIdVersion **)q;
		break;
	case SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__Qso:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<contest25__Qso * >*)p)[len] = *(contest25__Qso **)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_C2_xsd__byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_xsd__byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_C2_xsd__byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_xsd__byte);
	if (soap_out_xsd__byte(soap, tag?tag:"xsd:byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_xsd__byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_C2_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_C2_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_short(struct soap *soap, short *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_short
	*a = SOAP_DEFAULT_short;
#else
	*a = (short)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap *soap, const char *tag, int id, const short *a, const char *type)
{
	return soap_outshort(soap, tag, id, a, type, SOAP_TYPE_C2_short);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap *soap, const char *tag, short *a, const char *type)
{	short *p;
	p = soap_inshort(soap, tag, a, type, SOAP_TYPE_C2_short);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap *soap, const short *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_short);
	if (soap_out_short(soap, tag?tag:"short", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap *soap, short *p, const char *tag, const char *type)
{
	if ((p = soap_in_short(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest24__char(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_C2_contest24__char);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_contest24__char(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_C2_contest24__char);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest24__char(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_contest24__char);
	if (soap_out_contest24__char(soap, tag?tag:"contest24:char", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_contest24__char(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest24__char(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_C2_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_C2_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap *soap, LONG64 *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_C2_LONG64);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{	LONG64 *p;
	p = soap_inLONG64(soap, tag, a, type, SOAP_TYPE_C2_LONG64);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_LONG64);
	if (soap_out_LONG64(soap, tag?tag:"long", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_LONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap *soap, float *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap *soap, const char *tag, int id, const float *a, const char *type)
{
	return soap_outfloat(soap, tag, id, a, type, SOAP_TYPE_C2_float);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap *soap, const char *tag, float *a, const char *type)
{	float *p;
	p = soap_infloat(soap, tag, a, type, SOAP_TYPE_C2_float);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap *soap, const float *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_float);
	if (soap_out_float(soap, tag?tag:"float", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap *soap, float *p, const char *tag, const char *type)
{
	if ((p = soap_in_float(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap *soap, double *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_C2_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{	double *p;
	p = soap_indouble(soap, tag, a, type, SOAP_TYPE_C2_double);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_double);
	if (soap_out_double(soap, tag?tag:"double", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_C2_xsd__unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_xsd__unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{	unsigned char *p;
	p = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_C2_xsd__unsignedByte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_xsd__unsignedByte);
	if (soap_out_xsd__unsignedByte(soap, tag?tag:"xsd:unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_xsd__unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_C2_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{	unsigned char *p;
	p = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_C2_unsignedByte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_unsignedByte);
	if (soap_out_unsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedShort(struct soap *soap, unsigned short *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedShort
	*a = SOAP_DEFAULT_unsignedShort;
#else
	*a = (unsigned short)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedShort(struct soap *soap, const char *tag, int id, const unsigned short *a, const char *type)
{
	return soap_outunsignedShort(soap, tag, id, a, type, SOAP_TYPE_C2_unsignedShort);
}

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_in_unsignedShort(struct soap *soap, const char *tag, unsigned short *a, const char *type)
{	unsigned short *p;
	p = soap_inunsignedShort(soap, tag, a, type, SOAP_TYPE_C2_unsignedShort);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedShort(struct soap *soap, const unsigned short *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_unsignedShort);
	if (soap_out_unsignedShort(soap, tag?tag:"unsignedShort", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_get_unsignedShort(struct soap *soap, unsigned short *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedShort(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_C2_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{	unsigned int *p;
	p = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_C2_unsignedInt);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_unsignedInt);
	if (soap_out_unsignedInt(soap, tag?tag:"unsignedInt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedLONG64(struct soap *soap, ULONG64 *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedLONG64
	*a = SOAP_DEFAULT_unsignedLONG64;
#else
	*a = (ULONG64)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedLONG64(struct soap *soap, const char *tag, int id, const ULONG64 *a, const char *type)
{
	return soap_outULONG64(soap, tag, id, a, type, SOAP_TYPE_C2_unsignedLONG64);
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_unsignedLONG64(struct soap *soap, const char *tag, ULONG64 *a, const char *type)
{	ULONG64 *p;
	p = soap_inULONG64(soap, tag, a, type, SOAP_TYPE_C2_unsignedLONG64);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedLONG64(struct soap *soap, const ULONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_unsignedLONG64);
	if (soap_out_unsignedLONG64(soap, tag?tag:"unsignedLong", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_unsignedLONG64(struct soap *soap, ULONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedLONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_time(struct soap *soap, time_t *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_time
	*a = SOAP_DEFAULT_time;
#else
	*a = (time_t)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_time(struct soap *soap, const char *tag, int id, const time_t *a, const char *type)
{
	return soap_outdateTime(soap, tag, id, a, type, SOAP_TYPE_C2_time);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_time(struct soap *soap, const char *tag, time_t *a, const char *type)
{	time_t *p;
	p = soap_indateTime(soap, tag, a, type, SOAP_TYPE_C2_time);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_time(struct soap *soap, const time_t *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_time);
	if (soap_out_time(soap, tag?tag:"dateTime", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_time(struct soap *soap, time_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_time(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{	(void)soap; /* appease -Wall -Werror */
return soap_code_str(soap_codes_bool, n!=0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_bool);
	if (soap_out_bool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void contest24__guid__::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_contest24__guid(soap, &this->contest24__guid__::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void contest24__guid__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_contest24__guid(soap, &this->contest24__guid__::__item);
	/* transient soap skipped */
}

int contest24__guid__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest24__guid__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest24__guid__(struct soap *soap, const char *tag, int id, const contest24__guid__ *a, const char *type)
{
	return soap_out_contest24__guid(soap, tag, id, &(a->contest24__guid__::__item), "contest24:guid");
}

void *contest24__guid__::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_contest24__guid__(soap, tag, this, type);
}

SOAP_FMAC3 contest24__guid__ * SOAP_FMAC4 soap_in_contest24__guid__(struct soap *soap, const char *tag, contest24__guid__ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (contest24__guid__ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2_contest24__guid__, sizeof(contest24__guid__), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2_contest24__guid__)
			return (contest24__guid__ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_contest24__guid(soap, tag, &(a->contest24__guid__::__item), "contest24:guid"))
		return NULL;
	return a;
}

int contest24__guid__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2_contest24__guid__);
	if (this->soap_out(soap, tag?tag:"contest24:guid", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest24__guid__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest24__guid__(soap, this, tag, type);
}

SOAP_FMAC3 contest24__guid__ * SOAP_FMAC4 soap_get_contest24__guid__(struct soap *soap, contest24__guid__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest24__guid__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 contest24__guid__ * SOAP_FMAC2 soap_instantiate_contest24__guid__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest24__guid__(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_contest24__guid__, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (contest24__guid__);
		if (size)
			*size = sizeof(contest24__guid__);
		((contest24__guid__*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (contest24__guid__[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(contest24__guid__);
		for (int i = 0; i < n; i++)
			((contest24__guid__*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (contest24__guid__*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_contest24__guid__(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying contest24__guid__ %p -> %p\n", q, p));
	*(contest24__guid__*)p = *(contest24__guid__*)q;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest24__guid(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_C2_contest24__guid), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_contest24__guid(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_C2_contest24__guid, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_C2_contest24__guid, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_C2_contest24__guid, 0, sizeof(std::string), 0, soap_copy_contest24__guid);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest24__guid(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_contest24__guid);
	if (soap_out_contest24__guid(soap, tag?tag:"contest24:guid", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_contest24__guid(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest24__guid(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void contest24__duration__::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_contest24__duration(soap, &this->contest24__duration__::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void contest24__duration__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_contest24__duration(soap, &this->contest24__duration__::__item);
	/* transient soap skipped */
}

int contest24__duration__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest24__duration__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest24__duration__(struct soap *soap, const char *tag, int id, const contest24__duration__ *a, const char *type)
{
	return soap_out_contest24__duration(soap, tag, id, &(a->contest24__duration__::__item), "contest24:duration");
}

void *contest24__duration__::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_contest24__duration__(soap, tag, this, type);
}

SOAP_FMAC3 contest24__duration__ * SOAP_FMAC4 soap_in_contest24__duration__(struct soap *soap, const char *tag, contest24__duration__ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (contest24__duration__ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2_contest24__duration__, sizeof(contest24__duration__), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2_contest24__duration__)
			return (contest24__duration__ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_contest24__duration(soap, tag, &(a->contest24__duration__::__item), "contest24:duration"))
		return NULL;
	return a;
}

int contest24__duration__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2_contest24__duration__);
	if (this->soap_out(soap, tag?tag:"contest24:duration", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest24__duration__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest24__duration__(soap, this, tag, type);
}

SOAP_FMAC3 contest24__duration__ * SOAP_FMAC4 soap_get_contest24__duration__(struct soap *soap, contest24__duration__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest24__duration__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 contest24__duration__ * SOAP_FMAC2 soap_instantiate_contest24__duration__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest24__duration__(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_contest24__duration__, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (contest24__duration__);
		if (size)
			*size = sizeof(contest24__duration__);
		((contest24__duration__*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (contest24__duration__[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(contest24__duration__);
		for (int i = 0; i < n; i++)
			((contest24__duration__*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (contest24__duration__*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_contest24__duration__(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying contest24__duration__ %p -> %p\n", q, p));
	*(contest24__duration__*)p = *(contest24__duration__*)q;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest24__duration(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_C2_contest24__duration), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_contest24__duration(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_C2_contest24__duration, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_C2_contest24__duration, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_C2_contest24__duration, 0, sizeof(std::string), 0, soap_copy_contest24__duration);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest24__duration(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_contest24__duration);
	if (soap_out_contest24__duration(soap, tag?tag:"contest24:duration", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_contest24__duration(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest24__duration(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void contest24__char__::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_contest24__char(soap, &this->contest24__char__::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void contest24__char__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int contest24__char__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest24__char__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest24__char__(struct soap *soap, const char *tag, int id, const contest24__char__ *a, const char *type)
{
	return soap_out_contest24__char(soap, tag, id, &(a->contest24__char__::__item), "contest24:char");
}

void *contest24__char__::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_contest24__char__(soap, tag, this, type);
}

SOAP_FMAC3 contest24__char__ * SOAP_FMAC4 soap_in_contest24__char__(struct soap *soap, const char *tag, contest24__char__ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (contest24__char__ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2_contest24__char__, sizeof(contest24__char__), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2_contest24__char__)
			return (contest24__char__ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_contest24__char(soap, tag, &(a->contest24__char__::__item), "contest24:char"))
		return NULL;
	return a;
}

int contest24__char__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2_contest24__char__);
	if (this->soap_out(soap, tag?tag:"contest24:char", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest24__char__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest24__char__(soap, this, tag, type);
}

SOAP_FMAC3 contest24__char__ * SOAP_FMAC4 soap_get_contest24__char__(struct soap *soap, contest24__char__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest24__char__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 contest24__char__ * SOAP_FMAC2 soap_instantiate_contest24__char__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest24__char__(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_contest24__char__, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (contest24__char__);
		if (size)
			*size = sizeof(contest24__char__);
		((contest24__char__*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (contest24__char__[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(contest24__char__);
		for (int i = 0; i < n; i++)
			((contest24__char__*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (contest24__char__*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_contest24__char__(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying contest24__char__ %p -> %p\n", q, p));
	*(contest24__char__*)p = *(contest24__char__*)q;
}

void contest26__ArrayOfint::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfint(soap, &this->contest26__ArrayOfint::int_);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void contest26__ArrayOfint::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfint(soap, &this->contest26__ArrayOfint::int_);
	/* transient soap skipped */
}

int contest26__ArrayOfint::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest26__ArrayOfint(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest26__ArrayOfint(struct soap *soap, const char *tag, int id, const contest26__ArrayOfint *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2_contest26__ArrayOfint), "contest26:ArrayOfint"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__vectorTemplateOfint(soap, "contest26:int", -1, &(a->contest26__ArrayOfint::int_), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *contest26__ArrayOfint::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_contest26__ArrayOfint(soap, tag, this, type);
}

SOAP_FMAC3 contest26__ArrayOfint * SOAP_FMAC4 soap_in_contest26__ArrayOfint(struct soap *soap, const char *tag, contest26__ArrayOfint *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest26__ArrayOfint *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2_contest26__ArrayOfint, sizeof(contest26__ArrayOfint), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2_contest26__ArrayOfint)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (contest26__ArrayOfint *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfint(soap, "contest26:int", &(a->contest26__ArrayOfint::int_), "xsd:int"))
					continue;
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (contest26__ArrayOfint *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2_contest26__ArrayOfint, 0, sizeof(contest26__ArrayOfint), 0, soap_copy_contest26__ArrayOfint);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (a->contest26__ArrayOfint::int_.size() < 1))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int contest26__ArrayOfint::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2_contest26__ArrayOfint);
	if (this->soap_out(soap, tag?tag:"contest26:ArrayOfint", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest26__ArrayOfint::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest26__ArrayOfint(soap, this, tag, type);
}

SOAP_FMAC3 contest26__ArrayOfint * SOAP_FMAC4 soap_get_contest26__ArrayOfint(struct soap *soap, contest26__ArrayOfint *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest26__ArrayOfint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 contest26__ArrayOfint * SOAP_FMAC2 soap_instantiate_contest26__ArrayOfint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest26__ArrayOfint(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_contest26__ArrayOfint, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (contest26__ArrayOfint);
		if (size)
			*size = sizeof(contest26__ArrayOfint);
		((contest26__ArrayOfint*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (contest26__ArrayOfint[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(contest26__ArrayOfint);
		for (int i = 0; i < n; i++)
			((contest26__ArrayOfint*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (contest26__ArrayOfint*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_contest26__ArrayOfint(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying contest26__ArrayOfint %p -> %p\n", q, p));
	*(contest26__ArrayOfint*)p = *(contest26__ArrayOfint*)q;
}

void contest26__ArrayOfstring::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfstd__string(soap, &this->contest26__ArrayOfstring::string);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void contest26__ArrayOfstring::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfstd__string(soap, &this->contest26__ArrayOfstring::string);
	/* transient soap skipped */
}

int contest26__ArrayOfstring::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest26__ArrayOfstring(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest26__ArrayOfstring(struct soap *soap, const char *tag, int id, const contest26__ArrayOfstring *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2_contest26__ArrayOfstring), "contest26:ArrayOfstring"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__vectorTemplateOfstd__string(soap, "contest26:string", -1, &(a->contest26__ArrayOfstring::string), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *contest26__ArrayOfstring::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_contest26__ArrayOfstring(soap, tag, this, type);
}

SOAP_FMAC3 contest26__ArrayOfstring * SOAP_FMAC4 soap_in_contest26__ArrayOfstring(struct soap *soap, const char *tag, contest26__ArrayOfstring *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest26__ArrayOfstring *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2_contest26__ArrayOfstring, sizeof(contest26__ArrayOfstring), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2_contest26__ArrayOfstring)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (contest26__ArrayOfstring *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfstd__string(soap, "contest26:string", &(a->contest26__ArrayOfstring::string), "xsd:string"))
					continue;
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (contest26__ArrayOfstring *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2_contest26__ArrayOfstring, 0, sizeof(contest26__ArrayOfstring), 0, soap_copy_contest26__ArrayOfstring);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (a->contest26__ArrayOfstring::string.size() < 1))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int contest26__ArrayOfstring::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2_contest26__ArrayOfstring);
	if (this->soap_out(soap, tag?tag:"contest26:ArrayOfstring", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest26__ArrayOfstring::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest26__ArrayOfstring(soap, this, tag, type);
}

SOAP_FMAC3 contest26__ArrayOfstring * SOAP_FMAC4 soap_get_contest26__ArrayOfstring(struct soap *soap, contest26__ArrayOfstring *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest26__ArrayOfstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 contest26__ArrayOfstring * SOAP_FMAC2 soap_instantiate_contest26__ArrayOfstring(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest26__ArrayOfstring(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_contest26__ArrayOfstring, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (contest26__ArrayOfstring);
		if (size)
			*size = sizeof(contest26__ArrayOfstring);
		((contest26__ArrayOfstring*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (contest26__ArrayOfstring[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(contest26__ArrayOfstring);
		for (int i = 0; i < n; i++)
			((contest26__ArrayOfstring*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (contest26__ArrayOfstring*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_contest26__ArrayOfstring(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying contest26__ArrayOfstring %p -> %p\n", q, p));
	*(contest26__ArrayOfstring*)p = *(contest26__ArrayOfstring*)q;
}

void contest25__RigFrequency::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->contest25__RigFrequency::label);
	soap_default_int(soap, &this->contest25__RigFrequency::mode);
	soap_default_int(soap, &this->contest25__RigFrequency::networkLetter);
	soap_default_double(soap, &this->contest25__RigFrequency::recvFreq);
	soap_default_int(soap, &this->contest25__RigFrequency::rigNumber);
	soap_default_std__string(soap, &this->contest25__RigFrequency::station);
	soap_default_double(soap, &this->contest25__RigFrequency::xmitFreq);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void contest25__RigFrequency::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->contest25__RigFrequency::label);
	soap_serialize_std__string(soap, &this->contest25__RigFrequency::station);
	/* transient soap skipped */
}

int contest25__RigFrequency::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest25__RigFrequency(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest25__RigFrequency(struct soap *soap, const char *tag, int id, const contest25__RigFrequency *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2_contest25__RigFrequency), "contest25:RigFrequency"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__string(soap, "contest25:label", -1, &(a->contest25__RigFrequency::label), ""))
		return soap->error;
	if (soap_out_int(soap, "contest25:mode", -1, &(a->contest25__RigFrequency::mode), ""))
		return soap->error;
	if (soap_out_int(soap, "contest25:networkLetter", -1, &(a->contest25__RigFrequency::networkLetter), ""))
		return soap->error;
	if (soap_out_double(soap, "contest25:recvFreq", -1, &(a->contest25__RigFrequency::recvFreq), ""))
		return soap->error;
	if (soap_out_int(soap, "contest25:rigNumber", -1, &(a->contest25__RigFrequency::rigNumber), ""))
		return soap->error;
	if (soap_out_std__string(soap, "contest25:station", -1, &(a->contest25__RigFrequency::station), ""))
		return soap->error;
	if (soap_out_double(soap, "contest25:xmitFreq", -1, &(a->contest25__RigFrequency::xmitFreq), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *contest25__RigFrequency::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_contest25__RigFrequency(soap, tag, this, type);
}

SOAP_FMAC3 contest25__RigFrequency * SOAP_FMAC4 soap_in_contest25__RigFrequency(struct soap *soap, const char *tag, contest25__RigFrequency *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest25__RigFrequency *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2_contest25__RigFrequency, sizeof(contest25__RigFrequency), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2_contest25__RigFrequency)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (contest25__RigFrequency *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	size_t soap_flag_label1 = 1;
	size_t soap_flag_mode1 = 1;
	size_t soap_flag_networkLetter1 = 1;
	size_t soap_flag_recvFreq1 = 1;
	size_t soap_flag_rigNumber1 = 1;
	size_t soap_flag_station1 = 1;
	size_t soap_flag_xmitFreq1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_label1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "contest25:label", &(a->contest25__RigFrequency::label), "xsd:string"))
				{	soap_flag_label1--;
					continue;
				}
			if (soap_flag_mode1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "contest25:mode", &(a->contest25__RigFrequency::mode), "xsd:int"))
				{	soap_flag_mode1--;
					continue;
				}
			if (soap_flag_networkLetter1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "contest25:networkLetter", &(a->contest25__RigFrequency::networkLetter), "xsd:int"))
				{	soap_flag_networkLetter1--;
					continue;
				}
			if (soap_flag_recvFreq1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "contest25:recvFreq", &(a->contest25__RigFrequency::recvFreq), "xsd:double"))
				{	soap_flag_recvFreq1--;
					continue;
				}
			if (soap_flag_rigNumber1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "contest25:rigNumber", &(a->contest25__RigFrequency::rigNumber), "xsd:int"))
				{	soap_flag_rigNumber1--;
					continue;
				}
			if (soap_flag_station1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "contest25:station", &(a->contest25__RigFrequency::station), "xsd:string"))
				{	soap_flag_station1--;
					continue;
				}
			if (soap_flag_xmitFreq1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "contest25:xmitFreq", &(a->contest25__RigFrequency::xmitFreq), "xsd:double"))
				{	soap_flag_xmitFreq1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (contest25__RigFrequency *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2_contest25__RigFrequency, 0, sizeof(contest25__RigFrequency), 0, soap_copy_contest25__RigFrequency);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_label1 > 0 || soap_flag_mode1 > 0 || soap_flag_networkLetter1 > 0 || soap_flag_recvFreq1 > 0 || soap_flag_rigNumber1 > 0 || soap_flag_station1 > 0 || soap_flag_xmitFreq1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int contest25__RigFrequency::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2_contest25__RigFrequency);
	if (this->soap_out(soap, tag?tag:"contest25:RigFrequency", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest25__RigFrequency::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest25__RigFrequency(soap, this, tag, type);
}

SOAP_FMAC3 contest25__RigFrequency * SOAP_FMAC4 soap_get_contest25__RigFrequency(struct soap *soap, contest25__RigFrequency *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest25__RigFrequency(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 contest25__RigFrequency * SOAP_FMAC2 soap_instantiate_contest25__RigFrequency(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest25__RigFrequency(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_contest25__RigFrequency, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (contest25__RigFrequency);
		if (size)
			*size = sizeof(contest25__RigFrequency);
		((contest25__RigFrequency*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (contest25__RigFrequency[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(contest25__RigFrequency);
		for (int i = 0; i < n; i++)
			((contest25__RigFrequency*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (contest25__RigFrequency*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_contest25__RigFrequency(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying contest25__RigFrequency %p -> %p\n", q, p));
	*(contest25__RigFrequency*)p = *(contest25__RigFrequency*)q;
}

void contest25__ArrayOfRigFrequency::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTocontest25__RigFrequency(soap, &this->contest25__ArrayOfRigFrequency::RigFrequency);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void contest25__ArrayOfRigFrequency::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTocontest25__RigFrequency(soap, &this->contest25__ArrayOfRigFrequency::RigFrequency);
	/* transient soap skipped */
}

int contest25__ArrayOfRigFrequency::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest25__ArrayOfRigFrequency(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest25__ArrayOfRigFrequency(struct soap *soap, const char *tag, int id, const contest25__ArrayOfRigFrequency *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2_contest25__ArrayOfRigFrequency), "contest25:ArrayOfRigFrequency"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__vectorTemplateOfPointerTocontest25__RigFrequency(soap, "contest25:RigFrequency", -1, &(a->contest25__ArrayOfRigFrequency::RigFrequency), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *contest25__ArrayOfRigFrequency::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_contest25__ArrayOfRigFrequency(soap, tag, this, type);
}

SOAP_FMAC3 contest25__ArrayOfRigFrequency * SOAP_FMAC4 soap_in_contest25__ArrayOfRigFrequency(struct soap *soap, const char *tag, contest25__ArrayOfRigFrequency *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest25__ArrayOfRigFrequency *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2_contest25__ArrayOfRigFrequency, sizeof(contest25__ArrayOfRigFrequency), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2_contest25__ArrayOfRigFrequency)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (contest25__ArrayOfRigFrequency *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTocontest25__RigFrequency(soap, "contest25:RigFrequency", &(a->contest25__ArrayOfRigFrequency::RigFrequency), "contest25:RigFrequency"))
					continue;
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (contest25__ArrayOfRigFrequency *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2_contest25__ArrayOfRigFrequency, 0, sizeof(contest25__ArrayOfRigFrequency), 0, soap_copy_contest25__ArrayOfRigFrequency);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (a->contest25__ArrayOfRigFrequency::RigFrequency.size() < 1))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int contest25__ArrayOfRigFrequency::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2_contest25__ArrayOfRigFrequency);
	if (this->soap_out(soap, tag?tag:"contest25:ArrayOfRigFrequency", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest25__ArrayOfRigFrequency::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest25__ArrayOfRigFrequency(soap, this, tag, type);
}

SOAP_FMAC3 contest25__ArrayOfRigFrequency * SOAP_FMAC4 soap_get_contest25__ArrayOfRigFrequency(struct soap *soap, contest25__ArrayOfRigFrequency *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest25__ArrayOfRigFrequency(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 contest25__ArrayOfRigFrequency * SOAP_FMAC2 soap_instantiate_contest25__ArrayOfRigFrequency(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest25__ArrayOfRigFrequency(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_contest25__ArrayOfRigFrequency, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (contest25__ArrayOfRigFrequency);
		if (size)
			*size = sizeof(contest25__ArrayOfRigFrequency);
		((contest25__ArrayOfRigFrequency*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (contest25__ArrayOfRigFrequency[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(contest25__ArrayOfRigFrequency);
		for (int i = 0; i < n; i++)
			((contest25__ArrayOfRigFrequency*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (contest25__ArrayOfRigFrequency*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_contest25__ArrayOfRigFrequency(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying contest25__ArrayOfRigFrequency %p -> %p\n", q, p));
	*(contest25__ArrayOfRigFrequency*)p = *(contest25__ArrayOfRigFrequency*)q;
}

void contest25__QsoIdVersion::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->contest25__QsoIdVersion::id);
	soap_default_std__string(soap, &this->contest25__QsoIdVersion::updatedBy);
	soap_default_int(soap, &this->contest25__QsoIdVersion::version);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void contest25__QsoIdVersion::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->contest25__QsoIdVersion::id);
	soap_serialize_std__string(soap, &this->contest25__QsoIdVersion::updatedBy);
	/* transient soap skipped */
}

int contest25__QsoIdVersion::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest25__QsoIdVersion(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest25__QsoIdVersion(struct soap *soap, const char *tag, int id, const contest25__QsoIdVersion *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2_contest25__QsoIdVersion), "contest25:QsoIdVersion"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__string(soap, "contest25:id", -1, &(a->contest25__QsoIdVersion::id), ""))
		return soap->error;
	if (soap_out_std__string(soap, "contest25:updatedBy", -1, &(a->contest25__QsoIdVersion::updatedBy), ""))
		return soap->error;
	if (soap_out_int(soap, "contest25:version", -1, &(a->contest25__QsoIdVersion::version), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *contest25__QsoIdVersion::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_contest25__QsoIdVersion(soap, tag, this, type);
}

SOAP_FMAC3 contest25__QsoIdVersion * SOAP_FMAC4 soap_in_contest25__QsoIdVersion(struct soap *soap, const char *tag, contest25__QsoIdVersion *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest25__QsoIdVersion *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2_contest25__QsoIdVersion, sizeof(contest25__QsoIdVersion), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2_contest25__QsoIdVersion)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (contest25__QsoIdVersion *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	size_t soap_flag_id1 = 1;
	size_t soap_flag_updatedBy1 = 1;
	size_t soap_flag_version1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "contest25:id", &(a->contest25__QsoIdVersion::id), "xsd:string"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_updatedBy1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "contest25:updatedBy", &(a->contest25__QsoIdVersion::updatedBy), "xsd:string"))
				{	soap_flag_updatedBy1--;
					continue;
				}
			if (soap_flag_version1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "contest25:version", &(a->contest25__QsoIdVersion::version), "xsd:int"))
				{	soap_flag_version1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (contest25__QsoIdVersion *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2_contest25__QsoIdVersion, 0, sizeof(contest25__QsoIdVersion), 0, soap_copy_contest25__QsoIdVersion);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_updatedBy1 > 0 || soap_flag_version1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int contest25__QsoIdVersion::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2_contest25__QsoIdVersion);
	if (this->soap_out(soap, tag?tag:"contest25:QsoIdVersion", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest25__QsoIdVersion::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest25__QsoIdVersion(soap, this, tag, type);
}

SOAP_FMAC3 contest25__QsoIdVersion * SOAP_FMAC4 soap_get_contest25__QsoIdVersion(struct soap *soap, contest25__QsoIdVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest25__QsoIdVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 contest25__QsoIdVersion * SOAP_FMAC2 soap_instantiate_contest25__QsoIdVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest25__QsoIdVersion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_contest25__QsoIdVersion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (contest25__QsoIdVersion);
		if (size)
			*size = sizeof(contest25__QsoIdVersion);
		((contest25__QsoIdVersion*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (contest25__QsoIdVersion[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(contest25__QsoIdVersion);
		for (int i = 0; i < n; i++)
			((contest25__QsoIdVersion*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (contest25__QsoIdVersion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_contest25__QsoIdVersion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying contest25__QsoIdVersion %p -> %p\n", q, p));
	*(contest25__QsoIdVersion*)p = *(contest25__QsoIdVersion*)q;
}

void contest25__ArrayOfQsoIdVersion::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTocontest25__QsoIdVersion(soap, &this->contest25__ArrayOfQsoIdVersion::QsoIdVersion);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void contest25__ArrayOfQsoIdVersion::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTocontest25__QsoIdVersion(soap, &this->contest25__ArrayOfQsoIdVersion::QsoIdVersion);
	/* transient soap skipped */
}

int contest25__ArrayOfQsoIdVersion::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest25__ArrayOfQsoIdVersion(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest25__ArrayOfQsoIdVersion(struct soap *soap, const char *tag, int id, const contest25__ArrayOfQsoIdVersion *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion), "contest25:ArrayOfQsoIdVersion"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__vectorTemplateOfPointerTocontest25__QsoIdVersion(soap, "contest25:QsoIdVersion", -1, &(a->contest25__ArrayOfQsoIdVersion::QsoIdVersion), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *contest25__ArrayOfQsoIdVersion::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_contest25__ArrayOfQsoIdVersion(soap, tag, this, type);
}

SOAP_FMAC3 contest25__ArrayOfQsoIdVersion * SOAP_FMAC4 soap_in_contest25__ArrayOfQsoIdVersion(struct soap *soap, const char *tag, contest25__ArrayOfQsoIdVersion *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest25__ArrayOfQsoIdVersion *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion, sizeof(contest25__ArrayOfQsoIdVersion), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (contest25__ArrayOfQsoIdVersion *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTocontest25__QsoIdVersion(soap, "contest25:QsoIdVersion", &(a->contest25__ArrayOfQsoIdVersion::QsoIdVersion), "contest25:QsoIdVersion"))
					continue;
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (contest25__ArrayOfQsoIdVersion *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion, 0, sizeof(contest25__ArrayOfQsoIdVersion), 0, soap_copy_contest25__ArrayOfQsoIdVersion);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (a->contest25__ArrayOfQsoIdVersion::QsoIdVersion.size() < 1))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int contest25__ArrayOfQsoIdVersion::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion);
	if (this->soap_out(soap, tag?tag:"contest25:ArrayOfQsoIdVersion", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest25__ArrayOfQsoIdVersion::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest25__ArrayOfQsoIdVersion(soap, this, tag, type);
}

SOAP_FMAC3 contest25__ArrayOfQsoIdVersion * SOAP_FMAC4 soap_get_contest25__ArrayOfQsoIdVersion(struct soap *soap, contest25__ArrayOfQsoIdVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest25__ArrayOfQsoIdVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 contest25__ArrayOfQsoIdVersion * SOAP_FMAC2 soap_instantiate_contest25__ArrayOfQsoIdVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest25__ArrayOfQsoIdVersion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (contest25__ArrayOfQsoIdVersion);
		if (size)
			*size = sizeof(contest25__ArrayOfQsoIdVersion);
		((contest25__ArrayOfQsoIdVersion*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (contest25__ArrayOfQsoIdVersion[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(contest25__ArrayOfQsoIdVersion);
		for (int i = 0; i < n; i++)
			((contest25__ArrayOfQsoIdVersion*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (contest25__ArrayOfQsoIdVersion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_contest25__ArrayOfQsoIdVersion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying contest25__ArrayOfQsoIdVersion %p -> %p\n", q, p));
	*(contest25__ArrayOfQsoIdVersion*)p = *(contest25__ArrayOfQsoIdVersion*)q;
}

void contest25__LogSummary::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->contest25__LogSummary::logState);
	this->contest25__LogSummary::logSummaryIds = NULL;
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void contest25__LogSummary::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTocontest25__ArrayOfQsoIdVersion(soap, &this->contest25__LogSummary::logSummaryIds);
	/* transient soap skipped */
}

int contest25__LogSummary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest25__LogSummary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest25__LogSummary(struct soap *soap, const char *tag, int id, const contest25__LogSummary *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2_contest25__LogSummary), "contest25:LogSummary"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_int(soap, "contest25:logState", -1, &(a->contest25__LogSummary::logState), ""))
		return soap->error;
	if (soap_out_PointerTocontest25__ArrayOfQsoIdVersion(soap, "contest25:logSummaryIds", -1, &(a->contest25__LogSummary::logSummaryIds), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *contest25__LogSummary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_contest25__LogSummary(soap, tag, this, type);
}

SOAP_FMAC3 contest25__LogSummary * SOAP_FMAC4 soap_in_contest25__LogSummary(struct soap *soap, const char *tag, contest25__LogSummary *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest25__LogSummary *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2_contest25__LogSummary, sizeof(contest25__LogSummary), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2_contest25__LogSummary)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (contest25__LogSummary *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	size_t soap_flag_logState1 = 1;
	size_t soap_flag_logSummaryIds1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_logState1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "contest25:logState", &(a->contest25__LogSummary::logState), "xsd:int"))
				{	soap_flag_logState1--;
					continue;
				}
			if (soap_flag_logSummaryIds1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTocontest25__ArrayOfQsoIdVersion(soap, "contest25:logSummaryIds", &(a->contest25__LogSummary::logSummaryIds), "contest25:ArrayOfQsoIdVersion"))
				{	soap_flag_logSummaryIds1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (contest25__LogSummary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2_contest25__LogSummary, 0, sizeof(contest25__LogSummary), 0, soap_copy_contest25__LogSummary);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_logState1 > 0 || soap_flag_logSummaryIds1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int contest25__LogSummary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2_contest25__LogSummary);
	if (this->soap_out(soap, tag?tag:"contest25:LogSummary", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest25__LogSummary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest25__LogSummary(soap, this, tag, type);
}

SOAP_FMAC3 contest25__LogSummary * SOAP_FMAC4 soap_get_contest25__LogSummary(struct soap *soap, contest25__LogSummary *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest25__LogSummary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 contest25__LogSummary * SOAP_FMAC2 soap_instantiate_contest25__LogSummary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest25__LogSummary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_contest25__LogSummary, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (contest25__LogSummary);
		if (size)
			*size = sizeof(contest25__LogSummary);
		((contest25__LogSummary*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (contest25__LogSummary[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(contest25__LogSummary);
		for (int i = 0; i < n; i++)
			((contest25__LogSummary*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (contest25__LogSummary*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_contest25__LogSummary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying contest25__LogSummary %p -> %p\n", q, p));
	*(contest25__LogSummary*)p = *(contest25__LogSummary*)q;
}

void contest25__QsoUpdate::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->contest25__QsoUpdate::logState);
	this->contest25__QsoUpdate::qsoArray = NULL;
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void contest25__QsoUpdate::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTocontest25__ArrayOfQso(soap, &this->contest25__QsoUpdate::qsoArray);
	/* transient soap skipped */
}

int contest25__QsoUpdate::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest25__QsoUpdate(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest25__QsoUpdate(struct soap *soap, const char *tag, int id, const contest25__QsoUpdate *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2_contest25__QsoUpdate), "contest25:QsoUpdate"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_int(soap, "contest25:logState", -1, &(a->contest25__QsoUpdate::logState), ""))
		return soap->error;
	if (soap_out_PointerTocontest25__ArrayOfQso(soap, "contest25:qsoArray", -1, &(a->contest25__QsoUpdate::qsoArray), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *contest25__QsoUpdate::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_contest25__QsoUpdate(soap, tag, this, type);
}

SOAP_FMAC3 contest25__QsoUpdate * SOAP_FMAC4 soap_in_contest25__QsoUpdate(struct soap *soap, const char *tag, contest25__QsoUpdate *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest25__QsoUpdate *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2_contest25__QsoUpdate, sizeof(contest25__QsoUpdate), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2_contest25__QsoUpdate)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (contest25__QsoUpdate *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	size_t soap_flag_logState1 = 1;
	size_t soap_flag_qsoArray1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_logState1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "contest25:logState", &(a->contest25__QsoUpdate::logState), "xsd:int"))
				{	soap_flag_logState1--;
					continue;
				}
			if (soap_flag_qsoArray1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTocontest25__ArrayOfQso(soap, "contest25:qsoArray", &(a->contest25__QsoUpdate::qsoArray), "contest25:ArrayOfQso"))
				{	soap_flag_qsoArray1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (contest25__QsoUpdate *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2_contest25__QsoUpdate, 0, sizeof(contest25__QsoUpdate), 0, soap_copy_contest25__QsoUpdate);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_logState1 > 0 || soap_flag_qsoArray1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int contest25__QsoUpdate::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2_contest25__QsoUpdate);
	if (this->soap_out(soap, tag?tag:"contest25:QsoUpdate", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest25__QsoUpdate::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest25__QsoUpdate(soap, this, tag, type);
}

SOAP_FMAC3 contest25__QsoUpdate * SOAP_FMAC4 soap_get_contest25__QsoUpdate(struct soap *soap, contest25__QsoUpdate *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest25__QsoUpdate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 contest25__QsoUpdate * SOAP_FMAC2 soap_instantiate_contest25__QsoUpdate(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest25__QsoUpdate(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_contest25__QsoUpdate, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (contest25__QsoUpdate);
		if (size)
			*size = sizeof(contest25__QsoUpdate);
		((contest25__QsoUpdate*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (contest25__QsoUpdate[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(contest25__QsoUpdate);
		for (int i = 0; i < n; i++)
			((contest25__QsoUpdate*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (contest25__QsoUpdate*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_contest25__QsoUpdate(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying contest25__QsoUpdate %p -> %p\n", q, p));
	*(contest25__QsoUpdate*)p = *(contest25__QsoUpdate*)q;
}

void contest25__Qso::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->contest25__Qso::band);
	soap_default_int(soap, &this->contest25__Qso::dupe);
	soap_default_std__string(soap, &this->contest25__Qso::idKey);
	soap_default_int(soap, &this->contest25__Qso::mode);
	this->contest25__Qso::qsoparts = NULL;
	soap_default_double(soap, &this->contest25__Qso::recvFreq);
	soap_default_int(soap, &this->contest25__Qso::serial);
	soap_default_std__string(soap, &this->contest25__Qso::station);
	soap_default_int(soap, &this->contest25__Qso::time64H);
	soap_default_int(soap, &this->contest25__Qso::time64L);
	soap_default_std__string(soap, &this->contest25__Qso::updatedBy);
	soap_default_int(soap, &this->contest25__Qso::version);
	soap_default_double(soap, &this->contest25__Qso::xmitFreq);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void contest25__Qso::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->contest25__Qso::idKey);
	soap_serialize_PointerTocontest26__ArrayOfstring(soap, &this->contest25__Qso::qsoparts);
	soap_serialize_std__string(soap, &this->contest25__Qso::station);
	soap_serialize_std__string(soap, &this->contest25__Qso::updatedBy);
	/* transient soap skipped */
}

int contest25__Qso::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest25__Qso(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest25__Qso(struct soap *soap, const char *tag, int id, const contest25__Qso *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2_contest25__Qso), "contest25:Qso"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_int(soap, "contest25:band", -1, &(a->contest25__Qso::band), ""))
		return soap->error;
	if (soap_out_int(soap, "contest25:dupe", -1, &(a->contest25__Qso::dupe), ""))
		return soap->error;
	if (soap_out_std__string(soap, "contest25:idKey", -1, &(a->contest25__Qso::idKey), ""))
		return soap->error;
	if (soap_out_int(soap, "contest25:mode", -1, &(a->contest25__Qso::mode), ""))
		return soap->error;
	if (soap_out_PointerTocontest26__ArrayOfstring(soap, "contest25:qsoparts", -1, &(a->contest25__Qso::qsoparts), ""))
		return soap->error;
	if (soap_out_double(soap, "contest25:recvFreq", -1, &(a->contest25__Qso::recvFreq), ""))
		return soap->error;
	if (soap_out_int(soap, "contest25:serial", -1, &(a->contest25__Qso::serial), ""))
		return soap->error;
	if (soap_out_std__string(soap, "contest25:station", -1, &(a->contest25__Qso::station), ""))
		return soap->error;
	if (soap_out_int(soap, "contest25:time64H", -1, &(a->contest25__Qso::time64H), ""))
		return soap->error;
	if (soap_out_int(soap, "contest25:time64L", -1, &(a->contest25__Qso::time64L), ""))
		return soap->error;
	if (soap_out_std__string(soap, "contest25:updatedBy", -1, &(a->contest25__Qso::updatedBy), ""))
		return soap->error;
	if (soap_out_int(soap, "contest25:version", -1, &(a->contest25__Qso::version), ""))
		return soap->error;
	if (soap_out_double(soap, "contest25:xmitFreq", -1, &(a->contest25__Qso::xmitFreq), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *contest25__Qso::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_contest25__Qso(soap, tag, this, type);
}

SOAP_FMAC3 contest25__Qso * SOAP_FMAC4 soap_in_contest25__Qso(struct soap *soap, const char *tag, contest25__Qso *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest25__Qso *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2_contest25__Qso, sizeof(contest25__Qso), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2_contest25__Qso)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (contest25__Qso *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	size_t soap_flag_band1 = 1;
	size_t soap_flag_dupe1 = 1;
	size_t soap_flag_idKey1 = 1;
	size_t soap_flag_mode1 = 1;
	size_t soap_flag_qsoparts1 = 1;
	size_t soap_flag_recvFreq1 = 1;
	size_t soap_flag_serial1 = 1;
	size_t soap_flag_station1 = 1;
	size_t soap_flag_time64H1 = 1;
	size_t soap_flag_time64L1 = 1;
	size_t soap_flag_updatedBy1 = 1;
	size_t soap_flag_version1 = 1;
	size_t soap_flag_xmitFreq1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_band1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "contest25:band", &(a->contest25__Qso::band), "xsd:int"))
				{	soap_flag_band1--;
					continue;
				}
			if (soap_flag_dupe1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "contest25:dupe", &(a->contest25__Qso::dupe), "xsd:int"))
				{	soap_flag_dupe1--;
					continue;
				}
			if (soap_flag_idKey1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "contest25:idKey", &(a->contest25__Qso::idKey), "xsd:string"))
				{	soap_flag_idKey1--;
					continue;
				}
			if (soap_flag_mode1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "contest25:mode", &(a->contest25__Qso::mode), "xsd:int"))
				{	soap_flag_mode1--;
					continue;
				}
			if (soap_flag_qsoparts1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTocontest26__ArrayOfstring(soap, "contest25:qsoparts", &(a->contest25__Qso::qsoparts), "contest26:ArrayOfstring"))
				{	soap_flag_qsoparts1--;
					continue;
				}
			if (soap_flag_recvFreq1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "contest25:recvFreq", &(a->contest25__Qso::recvFreq), "xsd:double"))
				{	soap_flag_recvFreq1--;
					continue;
				}
			if (soap_flag_serial1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "contest25:serial", &(a->contest25__Qso::serial), "xsd:int"))
				{	soap_flag_serial1--;
					continue;
				}
			if (soap_flag_station1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "contest25:station", &(a->contest25__Qso::station), "xsd:string"))
				{	soap_flag_station1--;
					continue;
				}
			if (soap_flag_time64H1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "contest25:time64H", &(a->contest25__Qso::time64H), "xsd:int"))
				{	soap_flag_time64H1--;
					continue;
				}
			if (soap_flag_time64L1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "contest25:time64L", &(a->contest25__Qso::time64L), "xsd:int"))
				{	soap_flag_time64L1--;
					continue;
				}
			if (soap_flag_updatedBy1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "contest25:updatedBy", &(a->contest25__Qso::updatedBy), "xsd:string"))
				{	soap_flag_updatedBy1--;
					continue;
				}
			if (soap_flag_version1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "contest25:version", &(a->contest25__Qso::version), "xsd:int"))
				{	soap_flag_version1--;
					continue;
				}
			if (soap_flag_xmitFreq1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "contest25:xmitFreq", &(a->contest25__Qso::xmitFreq), "xsd:double"))
				{	soap_flag_xmitFreq1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (contest25__Qso *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2_contest25__Qso, 0, sizeof(contest25__Qso), 0, soap_copy_contest25__Qso);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_band1 > 0 || soap_flag_dupe1 > 0 || soap_flag_idKey1 > 0 || soap_flag_mode1 > 0 || soap_flag_qsoparts1 > 0 || soap_flag_recvFreq1 > 0 || soap_flag_serial1 > 0 || soap_flag_station1 > 0 || soap_flag_time64H1 > 0 || soap_flag_time64L1 > 0 || soap_flag_updatedBy1 > 0 || soap_flag_version1 > 0 || soap_flag_xmitFreq1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int contest25__Qso::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2_contest25__Qso);
	if (this->soap_out(soap, tag?tag:"contest25:Qso", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest25__Qso::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest25__Qso(soap, this, tag, type);
}

SOAP_FMAC3 contest25__Qso * SOAP_FMAC4 soap_get_contest25__Qso(struct soap *soap, contest25__Qso *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest25__Qso(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 contest25__Qso * SOAP_FMAC2 soap_instantiate_contest25__Qso(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest25__Qso(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_contest25__Qso, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (contest25__Qso);
		if (size)
			*size = sizeof(contest25__Qso);
		((contest25__Qso*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (contest25__Qso[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(contest25__Qso);
		for (int i = 0; i < n; i++)
			((contest25__Qso*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (contest25__Qso*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_contest25__Qso(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying contest25__Qso %p -> %p\n", q, p));
	*(contest25__Qso*)p = *(contest25__Qso*)q;
}

void contest25__ArrayOfQso::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTocontest25__Qso(soap, &this->contest25__ArrayOfQso::Qso);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void contest25__ArrayOfQso::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTocontest25__Qso(soap, &this->contest25__ArrayOfQso::Qso);
	/* transient soap skipped */
}

int contest25__ArrayOfQso::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest25__ArrayOfQso(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest25__ArrayOfQso(struct soap *soap, const char *tag, int id, const contest25__ArrayOfQso *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2_contest25__ArrayOfQso), "contest25:ArrayOfQso"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__vectorTemplateOfPointerTocontest25__Qso(soap, "contest25:Qso", -1, &(a->contest25__ArrayOfQso::Qso), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *contest25__ArrayOfQso::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_contest25__ArrayOfQso(soap, tag, this, type);
}

SOAP_FMAC3 contest25__ArrayOfQso * SOAP_FMAC4 soap_in_contest25__ArrayOfQso(struct soap *soap, const char *tag, contest25__ArrayOfQso *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest25__ArrayOfQso *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2_contest25__ArrayOfQso, sizeof(contest25__ArrayOfQso), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2_contest25__ArrayOfQso)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (contest25__ArrayOfQso *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTocontest25__Qso(soap, "contest25:Qso", &(a->contest25__ArrayOfQso::Qso), "contest25:Qso"))
					continue;
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (contest25__ArrayOfQso *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2_contest25__ArrayOfQso, 0, sizeof(contest25__ArrayOfQso), 0, soap_copy_contest25__ArrayOfQso);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (a->contest25__ArrayOfQso::Qso.size() < 1))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int contest25__ArrayOfQso::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2_contest25__ArrayOfQso);
	if (this->soap_out(soap, tag?tag:"contest25:ArrayOfQso", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest25__ArrayOfQso::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest25__ArrayOfQso(soap, this, tag, type);
}

SOAP_FMAC3 contest25__ArrayOfQso * SOAP_FMAC4 soap_get_contest25__ArrayOfQso(struct soap *soap, contest25__ArrayOfQso *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest25__ArrayOfQso(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 contest25__ArrayOfQso * SOAP_FMAC2 soap_instantiate_contest25__ArrayOfQso(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest25__ArrayOfQso(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_contest25__ArrayOfQso, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (contest25__ArrayOfQso);
		if (size)
			*size = sizeof(contest25__ArrayOfQso);
		((contest25__ArrayOfQso*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (contest25__ArrayOfQso[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(contest25__ArrayOfQso);
		for (int i = 0; i < n; i++)
			((contest25__ArrayOfQso*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (contest25__ArrayOfQso*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_contest25__ArrayOfQso(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying contest25__ArrayOfQso %p -> %p\n", q, p));
	*(contest25__ArrayOfQso*)p = *(contest25__ArrayOfQso*)q;
}

void _contest23__ExchangeFrequenciesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_contest23__ExchangeFrequenciesResponse::ExchangeFrequenciesResult = NULL;
	/* transient soap skipped */
}

void _contest23__ExchangeFrequenciesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTocontest25__ArrayOfRigFrequency(soap, &this->_contest23__ExchangeFrequenciesResponse::ExchangeFrequenciesResult);
	/* transient soap skipped */
}

int _contest23__ExchangeFrequenciesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__contest23__ExchangeFrequenciesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__contest23__ExchangeFrequenciesResponse(struct soap *soap, const char *tag, int id, const _contest23__ExchangeFrequenciesResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2__contest23__ExchangeFrequenciesResponse), type))
		return soap->error;
	if (a->ExchangeFrequenciesResult)
		soap_element_result(soap, "contest23:ExchangeFrequenciesResult");
	if (soap_out_PointerTocontest25__ArrayOfRigFrequency(soap, "contest23:ExchangeFrequenciesResult", -1, &(a->_contest23__ExchangeFrequenciesResponse::ExchangeFrequenciesResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_contest23__ExchangeFrequenciesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__contest23__ExchangeFrequenciesResponse(soap, tag, this, type);
}

SOAP_FMAC3 _contest23__ExchangeFrequenciesResponse * SOAP_FMAC4 soap_in__contest23__ExchangeFrequenciesResponse(struct soap *soap, const char *tag, _contest23__ExchangeFrequenciesResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_contest23__ExchangeFrequenciesResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2__contest23__ExchangeFrequenciesResponse, sizeof(_contest23__ExchangeFrequenciesResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2__contest23__ExchangeFrequenciesResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_contest23__ExchangeFrequenciesResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ExchangeFrequenciesResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ExchangeFrequenciesResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTocontest25__ArrayOfRigFrequency(soap, "contest23:ExchangeFrequenciesResult", &(a->_contest23__ExchangeFrequenciesResponse::ExchangeFrequenciesResult), "contest25:ArrayOfRigFrequency"))
				{	soap_flag_ExchangeFrequenciesResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "contest23:ExchangeFrequenciesResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_contest23__ExchangeFrequenciesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2__contest23__ExchangeFrequenciesResponse, 0, sizeof(_contest23__ExchangeFrequenciesResponse), 0, soap_copy__contest23__ExchangeFrequenciesResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ExchangeFrequenciesResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _contest23__ExchangeFrequenciesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2__contest23__ExchangeFrequenciesResponse);
	if (this->soap_out(soap, tag?tag:"contest23:ExchangeFrequenciesResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_contest23__ExchangeFrequenciesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__contest23__ExchangeFrequenciesResponse(soap, this, tag, type);
}

SOAP_FMAC3 _contest23__ExchangeFrequenciesResponse * SOAP_FMAC4 soap_get__contest23__ExchangeFrequenciesResponse(struct soap *soap, _contest23__ExchangeFrequenciesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__contest23__ExchangeFrequenciesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _contest23__ExchangeFrequenciesResponse * SOAP_FMAC2 soap_instantiate__contest23__ExchangeFrequenciesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__contest23__ExchangeFrequenciesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2__contest23__ExchangeFrequenciesResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (_contest23__ExchangeFrequenciesResponse);
		if (size)
			*size = sizeof(_contest23__ExchangeFrequenciesResponse);
		((_contest23__ExchangeFrequenciesResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (_contest23__ExchangeFrequenciesResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_contest23__ExchangeFrequenciesResponse);
		for (int i = 0; i < n; i++)
			((_contest23__ExchangeFrequenciesResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_contest23__ExchangeFrequenciesResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__contest23__ExchangeFrequenciesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _contest23__ExchangeFrequenciesResponse %p -> %p\n", q, p));
	*(_contest23__ExchangeFrequenciesResponse*)p = *(_contest23__ExchangeFrequenciesResponse*)q;
}

void _contest23__ExchangeFrequencies::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_contest23__ExchangeFrequencies::IncomingFreqs = NULL;
	/* transient soap skipped */
}

void _contest23__ExchangeFrequencies::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTocontest25__ArrayOfRigFrequency(soap, &this->_contest23__ExchangeFrequencies::IncomingFreqs);
	/* transient soap skipped */
}

int _contest23__ExchangeFrequencies::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__contest23__ExchangeFrequencies(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__contest23__ExchangeFrequencies(struct soap *soap, const char *tag, int id, const _contest23__ExchangeFrequencies *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2__contest23__ExchangeFrequencies), type))
		return soap->error;
	if (soap_out_PointerTocontest25__ArrayOfRigFrequency(soap, "contest23:IncomingFreqs", -1, &(a->_contest23__ExchangeFrequencies::IncomingFreqs), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_contest23__ExchangeFrequencies::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__contest23__ExchangeFrequencies(soap, tag, this, type);
}

SOAP_FMAC3 _contest23__ExchangeFrequencies * SOAP_FMAC4 soap_in__contest23__ExchangeFrequencies(struct soap *soap, const char *tag, _contest23__ExchangeFrequencies *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_contest23__ExchangeFrequencies *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2__contest23__ExchangeFrequencies, sizeof(_contest23__ExchangeFrequencies), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2__contest23__ExchangeFrequencies)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_contest23__ExchangeFrequencies *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_IncomingFreqs1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_IncomingFreqs1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTocontest25__ArrayOfRigFrequency(soap, "contest23:IncomingFreqs", &(a->_contest23__ExchangeFrequencies::IncomingFreqs), "contest25:ArrayOfRigFrequency"))
				{	soap_flag_IncomingFreqs1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_contest23__ExchangeFrequencies *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2__contest23__ExchangeFrequencies, 0, sizeof(_contest23__ExchangeFrequencies), 0, soap_copy__contest23__ExchangeFrequencies);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_IncomingFreqs1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _contest23__ExchangeFrequencies::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2__contest23__ExchangeFrequencies);
	if (this->soap_out(soap, tag?tag:"contest23:ExchangeFrequencies", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_contest23__ExchangeFrequencies::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__contest23__ExchangeFrequencies(soap, this, tag, type);
}

SOAP_FMAC3 _contest23__ExchangeFrequencies * SOAP_FMAC4 soap_get__contest23__ExchangeFrequencies(struct soap *soap, _contest23__ExchangeFrequencies *p, const char *tag, const char *type)
{
	if ((p = soap_in__contest23__ExchangeFrequencies(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _contest23__ExchangeFrequencies * SOAP_FMAC2 soap_instantiate__contest23__ExchangeFrequencies(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__contest23__ExchangeFrequencies(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2__contest23__ExchangeFrequencies, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (_contest23__ExchangeFrequencies);
		if (size)
			*size = sizeof(_contest23__ExchangeFrequencies);
		((_contest23__ExchangeFrequencies*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (_contest23__ExchangeFrequencies[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_contest23__ExchangeFrequencies);
		for (int i = 0; i < n; i++)
			((_contest23__ExchangeFrequencies*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_contest23__ExchangeFrequencies*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__contest23__ExchangeFrequencies(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _contest23__ExchangeFrequencies %p -> %p\n", q, p));
	*(_contest23__ExchangeFrequencies*)p = *(_contest23__ExchangeFrequencies*)q;
}

void _contest23__ColumnNamesToIndicesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_contest23__ColumnNamesToIndicesResponse::ColumnNamesToIndicesResult = NULL;
	/* transient soap skipped */
}

void _contest23__ColumnNamesToIndicesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTocontest26__ArrayOfint(soap, &this->_contest23__ColumnNamesToIndicesResponse::ColumnNamesToIndicesResult);
	/* transient soap skipped */
}

int _contest23__ColumnNamesToIndicesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__contest23__ColumnNamesToIndicesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__contest23__ColumnNamesToIndicesResponse(struct soap *soap, const char *tag, int id, const _contest23__ColumnNamesToIndicesResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2__contest23__ColumnNamesToIndicesResponse), type))
		return soap->error;
	if (a->ColumnNamesToIndicesResult)
		soap_element_result(soap, "contest23:ColumnNamesToIndicesResult");
	if (soap_out_PointerTocontest26__ArrayOfint(soap, "contest23:ColumnNamesToIndicesResult", -1, &(a->_contest23__ColumnNamesToIndicesResponse::ColumnNamesToIndicesResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_contest23__ColumnNamesToIndicesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__contest23__ColumnNamesToIndicesResponse(soap, tag, this, type);
}

SOAP_FMAC3 _contest23__ColumnNamesToIndicesResponse * SOAP_FMAC4 soap_in__contest23__ColumnNamesToIndicesResponse(struct soap *soap, const char *tag, _contest23__ColumnNamesToIndicesResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_contest23__ColumnNamesToIndicesResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2__contest23__ColumnNamesToIndicesResponse, sizeof(_contest23__ColumnNamesToIndicesResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2__contest23__ColumnNamesToIndicesResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_contest23__ColumnNamesToIndicesResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ColumnNamesToIndicesResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ColumnNamesToIndicesResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTocontest26__ArrayOfint(soap, "contest23:ColumnNamesToIndicesResult", &(a->_contest23__ColumnNamesToIndicesResponse::ColumnNamesToIndicesResult), "contest26:ArrayOfint"))
				{	soap_flag_ColumnNamesToIndicesResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "contest23:ColumnNamesToIndicesResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_contest23__ColumnNamesToIndicesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2__contest23__ColumnNamesToIndicesResponse, 0, sizeof(_contest23__ColumnNamesToIndicesResponse), 0, soap_copy__contest23__ColumnNamesToIndicesResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ColumnNamesToIndicesResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _contest23__ColumnNamesToIndicesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2__contest23__ColumnNamesToIndicesResponse);
	if (this->soap_out(soap, tag?tag:"contest23:ColumnNamesToIndicesResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_contest23__ColumnNamesToIndicesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__contest23__ColumnNamesToIndicesResponse(soap, this, tag, type);
}

SOAP_FMAC3 _contest23__ColumnNamesToIndicesResponse * SOAP_FMAC4 soap_get__contest23__ColumnNamesToIndicesResponse(struct soap *soap, _contest23__ColumnNamesToIndicesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__contest23__ColumnNamesToIndicesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _contest23__ColumnNamesToIndicesResponse * SOAP_FMAC2 soap_instantiate__contest23__ColumnNamesToIndicesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__contest23__ColumnNamesToIndicesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2__contest23__ColumnNamesToIndicesResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (_contest23__ColumnNamesToIndicesResponse);
		if (size)
			*size = sizeof(_contest23__ColumnNamesToIndicesResponse);
		((_contest23__ColumnNamesToIndicesResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (_contest23__ColumnNamesToIndicesResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_contest23__ColumnNamesToIndicesResponse);
		for (int i = 0; i < n; i++)
			((_contest23__ColumnNamesToIndicesResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_contest23__ColumnNamesToIndicesResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__contest23__ColumnNamesToIndicesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _contest23__ColumnNamesToIndicesResponse %p -> %p\n", q, p));
	*(_contest23__ColumnNamesToIndicesResponse*)p = *(_contest23__ColumnNamesToIndicesResponse*)q;
}

void _contest23__ColumnNamesToIndices::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_contest23__ColumnNamesToIndices::SessionId);
	this->_contest23__ColumnNamesToIndices::ColumnNames = NULL;
	/* transient soap skipped */
}

void _contest23__ColumnNamesToIndices::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_contest23__ColumnNamesToIndices::SessionId);
	soap_serialize_PointerTocontest26__ArrayOfstring(soap, &this->_contest23__ColumnNamesToIndices::ColumnNames);
	/* transient soap skipped */
}

int _contest23__ColumnNamesToIndices::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__contest23__ColumnNamesToIndices(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__contest23__ColumnNamesToIndices(struct soap *soap, const char *tag, int id, const _contest23__ColumnNamesToIndices *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2__contest23__ColumnNamesToIndices), type))
		return soap->error;
	if (soap_out_std__string(soap, "contest23:SessionId", -1, &(a->_contest23__ColumnNamesToIndices::SessionId), ""))
		return soap->error;
	if (soap_out_PointerTocontest26__ArrayOfstring(soap, "contest23:ColumnNames", -1, &(a->_contest23__ColumnNamesToIndices::ColumnNames), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_contest23__ColumnNamesToIndices::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__contest23__ColumnNamesToIndices(soap, tag, this, type);
}

SOAP_FMAC3 _contest23__ColumnNamesToIndices * SOAP_FMAC4 soap_in__contest23__ColumnNamesToIndices(struct soap *soap, const char *tag, _contest23__ColumnNamesToIndices *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_contest23__ColumnNamesToIndices *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2__contest23__ColumnNamesToIndices, sizeof(_contest23__ColumnNamesToIndices), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2__contest23__ColumnNamesToIndices)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_contest23__ColumnNamesToIndices *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SessionId1 = 1;
	size_t soap_flag_ColumnNames1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SessionId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "contest23:SessionId", &(a->_contest23__ColumnNamesToIndices::SessionId), "xsd:string"))
				{	soap_flag_SessionId1--;
					continue;
				}
			if (soap_flag_ColumnNames1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTocontest26__ArrayOfstring(soap, "contest23:ColumnNames", &(a->_contest23__ColumnNamesToIndices::ColumnNames), "contest26:ArrayOfstring"))
				{	soap_flag_ColumnNames1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_contest23__ColumnNamesToIndices *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2__contest23__ColumnNamesToIndices, 0, sizeof(_contest23__ColumnNamesToIndices), 0, soap_copy__contest23__ColumnNamesToIndices);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_SessionId1 > 0 || soap_flag_ColumnNames1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _contest23__ColumnNamesToIndices::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2__contest23__ColumnNamesToIndices);
	if (this->soap_out(soap, tag?tag:"contest23:ColumnNamesToIndices", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_contest23__ColumnNamesToIndices::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__contest23__ColumnNamesToIndices(soap, this, tag, type);
}

SOAP_FMAC3 _contest23__ColumnNamesToIndices * SOAP_FMAC4 soap_get__contest23__ColumnNamesToIndices(struct soap *soap, _contest23__ColumnNamesToIndices *p, const char *tag, const char *type)
{
	if ((p = soap_in__contest23__ColumnNamesToIndices(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _contest23__ColumnNamesToIndices * SOAP_FMAC2 soap_instantiate__contest23__ColumnNamesToIndices(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__contest23__ColumnNamesToIndices(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2__contest23__ColumnNamesToIndices, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (_contest23__ColumnNamesToIndices);
		if (size)
			*size = sizeof(_contest23__ColumnNamesToIndices);
		((_contest23__ColumnNamesToIndices*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (_contest23__ColumnNamesToIndices[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_contest23__ColumnNamesToIndices);
		for (int i = 0; i < n; i++)
			((_contest23__ColumnNamesToIndices*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_contest23__ColumnNamesToIndices*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__contest23__ColumnNamesToIndices(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _contest23__ColumnNamesToIndices %p -> %p\n", q, p));
	*(_contest23__ColumnNamesToIndices*)p = *(_contest23__ColumnNamesToIndices*)q;
}

void _contest23__getQsosByKeyArrayResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_contest23__getQsosByKeyArrayResponse::getQsosByKeyArrayResult = NULL;
	/* transient soap skipped */
}

void _contest23__getQsosByKeyArrayResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTocontest25__QsoUpdate(soap, &this->_contest23__getQsosByKeyArrayResponse::getQsosByKeyArrayResult);
	/* transient soap skipped */
}

int _contest23__getQsosByKeyArrayResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__contest23__getQsosByKeyArrayResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__contest23__getQsosByKeyArrayResponse(struct soap *soap, const char *tag, int id, const _contest23__getQsosByKeyArrayResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2__contest23__getQsosByKeyArrayResponse), type))
		return soap->error;
	if (a->getQsosByKeyArrayResult)
		soap_element_result(soap, "contest23:getQsosByKeyArrayResult");
	if (soap_out_PointerTocontest25__QsoUpdate(soap, "contest23:getQsosByKeyArrayResult", -1, &(a->_contest23__getQsosByKeyArrayResponse::getQsosByKeyArrayResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_contest23__getQsosByKeyArrayResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__contest23__getQsosByKeyArrayResponse(soap, tag, this, type);
}

SOAP_FMAC3 _contest23__getQsosByKeyArrayResponse * SOAP_FMAC4 soap_in__contest23__getQsosByKeyArrayResponse(struct soap *soap, const char *tag, _contest23__getQsosByKeyArrayResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_contest23__getQsosByKeyArrayResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2__contest23__getQsosByKeyArrayResponse, sizeof(_contest23__getQsosByKeyArrayResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2__contest23__getQsosByKeyArrayResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_contest23__getQsosByKeyArrayResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_getQsosByKeyArrayResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_getQsosByKeyArrayResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTocontest25__QsoUpdate(soap, "contest23:getQsosByKeyArrayResult", &(a->_contest23__getQsosByKeyArrayResponse::getQsosByKeyArrayResult), "contest25:QsoUpdate"))
				{	soap_flag_getQsosByKeyArrayResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "contest23:getQsosByKeyArrayResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_contest23__getQsosByKeyArrayResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2__contest23__getQsosByKeyArrayResponse, 0, sizeof(_contest23__getQsosByKeyArrayResponse), 0, soap_copy__contest23__getQsosByKeyArrayResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_getQsosByKeyArrayResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _contest23__getQsosByKeyArrayResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2__contest23__getQsosByKeyArrayResponse);
	if (this->soap_out(soap, tag?tag:"contest23:getQsosByKeyArrayResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_contest23__getQsosByKeyArrayResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__contest23__getQsosByKeyArrayResponse(soap, this, tag, type);
}

SOAP_FMAC3 _contest23__getQsosByKeyArrayResponse * SOAP_FMAC4 soap_get__contest23__getQsosByKeyArrayResponse(struct soap *soap, _contest23__getQsosByKeyArrayResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__contest23__getQsosByKeyArrayResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _contest23__getQsosByKeyArrayResponse * SOAP_FMAC2 soap_instantiate__contest23__getQsosByKeyArrayResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__contest23__getQsosByKeyArrayResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2__contest23__getQsosByKeyArrayResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (_contest23__getQsosByKeyArrayResponse);
		if (size)
			*size = sizeof(_contest23__getQsosByKeyArrayResponse);
		((_contest23__getQsosByKeyArrayResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (_contest23__getQsosByKeyArrayResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_contest23__getQsosByKeyArrayResponse);
		for (int i = 0; i < n; i++)
			((_contest23__getQsosByKeyArrayResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_contest23__getQsosByKeyArrayResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__contest23__getQsosByKeyArrayResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _contest23__getQsosByKeyArrayResponse %p -> %p\n", q, p));
	*(_contest23__getQsosByKeyArrayResponse*)p = *(_contest23__getQsosByKeyArrayResponse*)q;
}

void _contest23__getQsosByKeyArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_contest23__getQsosByKeyArray::SessionId);
	this->_contest23__getQsosByKeyArray::QsoKeyArray = NULL;
	/* transient soap skipped */
}

void _contest23__getQsosByKeyArray::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_contest23__getQsosByKeyArray::SessionId);
	soap_serialize_PointerTocontest26__ArrayOfstring(soap, &this->_contest23__getQsosByKeyArray::QsoKeyArray);
	/* transient soap skipped */
}

int _contest23__getQsosByKeyArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__contest23__getQsosByKeyArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__contest23__getQsosByKeyArray(struct soap *soap, const char *tag, int id, const _contest23__getQsosByKeyArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2__contest23__getQsosByKeyArray), type))
		return soap->error;
	if (soap_out_std__string(soap, "contest23:SessionId", -1, &(a->_contest23__getQsosByKeyArray::SessionId), ""))
		return soap->error;
	if (soap_out_PointerTocontest26__ArrayOfstring(soap, "contest23:QsoKeyArray", -1, &(a->_contest23__getQsosByKeyArray::QsoKeyArray), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_contest23__getQsosByKeyArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__contest23__getQsosByKeyArray(soap, tag, this, type);
}

SOAP_FMAC3 _contest23__getQsosByKeyArray * SOAP_FMAC4 soap_in__contest23__getQsosByKeyArray(struct soap *soap, const char *tag, _contest23__getQsosByKeyArray *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_contest23__getQsosByKeyArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2__contest23__getQsosByKeyArray, sizeof(_contest23__getQsosByKeyArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2__contest23__getQsosByKeyArray)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_contest23__getQsosByKeyArray *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SessionId1 = 1;
	size_t soap_flag_QsoKeyArray1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SessionId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "contest23:SessionId", &(a->_contest23__getQsosByKeyArray::SessionId), "xsd:string"))
				{	soap_flag_SessionId1--;
					continue;
				}
			if (soap_flag_QsoKeyArray1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTocontest26__ArrayOfstring(soap, "contest23:QsoKeyArray", &(a->_contest23__getQsosByKeyArray::QsoKeyArray), "contest26:ArrayOfstring"))
				{	soap_flag_QsoKeyArray1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_contest23__getQsosByKeyArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2__contest23__getQsosByKeyArray, 0, sizeof(_contest23__getQsosByKeyArray), 0, soap_copy__contest23__getQsosByKeyArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_SessionId1 > 0 || soap_flag_QsoKeyArray1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _contest23__getQsosByKeyArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2__contest23__getQsosByKeyArray);
	if (this->soap_out(soap, tag?tag:"contest23:getQsosByKeyArray", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_contest23__getQsosByKeyArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__contest23__getQsosByKeyArray(soap, this, tag, type);
}

SOAP_FMAC3 _contest23__getQsosByKeyArray * SOAP_FMAC4 soap_get__contest23__getQsosByKeyArray(struct soap *soap, _contest23__getQsosByKeyArray *p, const char *tag, const char *type)
{
	if ((p = soap_in__contest23__getQsosByKeyArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _contest23__getQsosByKeyArray * SOAP_FMAC2 soap_instantiate__contest23__getQsosByKeyArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__contest23__getQsosByKeyArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2__contest23__getQsosByKeyArray, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (_contest23__getQsosByKeyArray);
		if (size)
			*size = sizeof(_contest23__getQsosByKeyArray);
		((_contest23__getQsosByKeyArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (_contest23__getQsosByKeyArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_contest23__getQsosByKeyArray);
		for (int i = 0; i < n; i++)
			((_contest23__getQsosByKeyArray*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_contest23__getQsosByKeyArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__contest23__getQsosByKeyArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _contest23__getQsosByKeyArray %p -> %p\n", q, p));
	*(_contest23__getQsosByKeyArray*)p = *(_contest23__getQsosByKeyArray*)q;
}

void _contest23__AddAndGetLogSummaryResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_contest23__AddAndGetLogSummaryResponse::AddAndGetLogSummaryResult = NULL;
	/* transient soap skipped */
}

void _contest23__AddAndGetLogSummaryResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTocontest25__LogSummary(soap, &this->_contest23__AddAndGetLogSummaryResponse::AddAndGetLogSummaryResult);
	/* transient soap skipped */
}

int _contest23__AddAndGetLogSummaryResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__contest23__AddAndGetLogSummaryResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__contest23__AddAndGetLogSummaryResponse(struct soap *soap, const char *tag, int id, const _contest23__AddAndGetLogSummaryResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2__contest23__AddAndGetLogSummaryResponse), type))
		return soap->error;
	if (a->AddAndGetLogSummaryResult)
		soap_element_result(soap, "contest23:AddAndGetLogSummaryResult");
	if (soap_out_PointerTocontest25__LogSummary(soap, "contest23:AddAndGetLogSummaryResult", -1, &(a->_contest23__AddAndGetLogSummaryResponse::AddAndGetLogSummaryResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_contest23__AddAndGetLogSummaryResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__contest23__AddAndGetLogSummaryResponse(soap, tag, this, type);
}

SOAP_FMAC3 _contest23__AddAndGetLogSummaryResponse * SOAP_FMAC4 soap_in__contest23__AddAndGetLogSummaryResponse(struct soap *soap, const char *tag, _contest23__AddAndGetLogSummaryResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_contest23__AddAndGetLogSummaryResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2__contest23__AddAndGetLogSummaryResponse, sizeof(_contest23__AddAndGetLogSummaryResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2__contest23__AddAndGetLogSummaryResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_contest23__AddAndGetLogSummaryResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AddAndGetLogSummaryResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AddAndGetLogSummaryResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTocontest25__LogSummary(soap, "contest23:AddAndGetLogSummaryResult", &(a->_contest23__AddAndGetLogSummaryResponse::AddAndGetLogSummaryResult), "contest25:LogSummary"))
				{	soap_flag_AddAndGetLogSummaryResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "contest23:AddAndGetLogSummaryResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_contest23__AddAndGetLogSummaryResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2__contest23__AddAndGetLogSummaryResponse, 0, sizeof(_contest23__AddAndGetLogSummaryResponse), 0, soap_copy__contest23__AddAndGetLogSummaryResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_AddAndGetLogSummaryResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _contest23__AddAndGetLogSummaryResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2__contest23__AddAndGetLogSummaryResponse);
	if (this->soap_out(soap, tag?tag:"contest23:AddAndGetLogSummaryResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_contest23__AddAndGetLogSummaryResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__contest23__AddAndGetLogSummaryResponse(soap, this, tag, type);
}

SOAP_FMAC3 _contest23__AddAndGetLogSummaryResponse * SOAP_FMAC4 soap_get__contest23__AddAndGetLogSummaryResponse(struct soap *soap, _contest23__AddAndGetLogSummaryResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__contest23__AddAndGetLogSummaryResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _contest23__AddAndGetLogSummaryResponse * SOAP_FMAC2 soap_instantiate__contest23__AddAndGetLogSummaryResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__contest23__AddAndGetLogSummaryResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2__contest23__AddAndGetLogSummaryResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (_contest23__AddAndGetLogSummaryResponse);
		if (size)
			*size = sizeof(_contest23__AddAndGetLogSummaryResponse);
		((_contest23__AddAndGetLogSummaryResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (_contest23__AddAndGetLogSummaryResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_contest23__AddAndGetLogSummaryResponse);
		for (int i = 0; i < n; i++)
			((_contest23__AddAndGetLogSummaryResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_contest23__AddAndGetLogSummaryResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__contest23__AddAndGetLogSummaryResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _contest23__AddAndGetLogSummaryResponse %p -> %p\n", q, p));
	*(_contest23__AddAndGetLogSummaryResponse*)p = *(_contest23__AddAndGetLogSummaryResponse*)q;
}

void _contest23__AddAndGetLogSummary::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_contest23__AddAndGetLogSummary::SessionId);
	this->_contest23__AddAndGetLogSummary::QsoAddArray = NULL;
	soap_default_int(soap, &this->_contest23__AddAndGetLogSummary::OldState);
	soap_default_int(soap, &this->_contest23__AddAndGetLogSummary::MaxRequested);
	/* transient soap skipped */
}

void _contest23__AddAndGetLogSummary::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_contest23__AddAndGetLogSummary::SessionId);
	soap_serialize_PointerTocontest25__ArrayOfQso(soap, &this->_contest23__AddAndGetLogSummary::QsoAddArray);
	/* transient soap skipped */
}

int _contest23__AddAndGetLogSummary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__contest23__AddAndGetLogSummary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__contest23__AddAndGetLogSummary(struct soap *soap, const char *tag, int id, const _contest23__AddAndGetLogSummary *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2__contest23__AddAndGetLogSummary), type))
		return soap->error;
	if (soap_out_std__string(soap, "contest23:SessionId", -1, &(a->_contest23__AddAndGetLogSummary::SessionId), ""))
		return soap->error;
	if (soap_out_PointerTocontest25__ArrayOfQso(soap, "contest23:QsoAddArray", -1, &(a->_contest23__AddAndGetLogSummary::QsoAddArray), ""))
		return soap->error;
	if (soap_out_int(soap, "contest23:OldState", -1, &(a->_contest23__AddAndGetLogSummary::OldState), ""))
		return soap->error;
	if (soap_out_int(soap, "contest23:MaxRequested", -1, &(a->_contest23__AddAndGetLogSummary::MaxRequested), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_contest23__AddAndGetLogSummary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__contest23__AddAndGetLogSummary(soap, tag, this, type);
}

SOAP_FMAC3 _contest23__AddAndGetLogSummary * SOAP_FMAC4 soap_in__contest23__AddAndGetLogSummary(struct soap *soap, const char *tag, _contest23__AddAndGetLogSummary *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_contest23__AddAndGetLogSummary *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2__contest23__AddAndGetLogSummary, sizeof(_contest23__AddAndGetLogSummary), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2__contest23__AddAndGetLogSummary)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_contest23__AddAndGetLogSummary *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SessionId1 = 1;
	size_t soap_flag_QsoAddArray1 = 1;
	size_t soap_flag_OldState1 = 1;
	size_t soap_flag_MaxRequested1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SessionId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "contest23:SessionId", &(a->_contest23__AddAndGetLogSummary::SessionId), "xsd:string"))
				{	soap_flag_SessionId1--;
					continue;
				}
			if (soap_flag_QsoAddArray1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTocontest25__ArrayOfQso(soap, "contest23:QsoAddArray", &(a->_contest23__AddAndGetLogSummary::QsoAddArray), "contest25:ArrayOfQso"))
				{	soap_flag_QsoAddArray1--;
					continue;
				}
			if (soap_flag_OldState1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "contest23:OldState", &(a->_contest23__AddAndGetLogSummary::OldState), "xsd:int"))
				{	soap_flag_OldState1--;
					continue;
				}
			if (soap_flag_MaxRequested1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "contest23:MaxRequested", &(a->_contest23__AddAndGetLogSummary::MaxRequested), "xsd:int"))
				{	soap_flag_MaxRequested1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_contest23__AddAndGetLogSummary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2__contest23__AddAndGetLogSummary, 0, sizeof(_contest23__AddAndGetLogSummary), 0, soap_copy__contest23__AddAndGetLogSummary);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_SessionId1 > 0 || soap_flag_QsoAddArray1 > 0 || soap_flag_OldState1 > 0 || soap_flag_MaxRequested1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _contest23__AddAndGetLogSummary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2__contest23__AddAndGetLogSummary);
	if (this->soap_out(soap, tag?tag:"contest23:AddAndGetLogSummary", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_contest23__AddAndGetLogSummary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__contest23__AddAndGetLogSummary(soap, this, tag, type);
}

SOAP_FMAC3 _contest23__AddAndGetLogSummary * SOAP_FMAC4 soap_get__contest23__AddAndGetLogSummary(struct soap *soap, _contest23__AddAndGetLogSummary *p, const char *tag, const char *type)
{
	if ((p = soap_in__contest23__AddAndGetLogSummary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _contest23__AddAndGetLogSummary * SOAP_FMAC2 soap_instantiate__contest23__AddAndGetLogSummary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__contest23__AddAndGetLogSummary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2__contest23__AddAndGetLogSummary, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (_contest23__AddAndGetLogSummary);
		if (size)
			*size = sizeof(_contest23__AddAndGetLogSummary);
		((_contest23__AddAndGetLogSummary*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (_contest23__AddAndGetLogSummary[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_contest23__AddAndGetLogSummary);
		for (int i = 0; i < n; i++)
			((_contest23__AddAndGetLogSummary*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_contest23__AddAndGetLogSummary*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__contest23__AddAndGetLogSummary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _contest23__AddAndGetLogSummary %p -> %p\n", q, p));
	*(_contest23__AddAndGetLogSummary*)p = *(_contest23__AddAndGetLogSummary*)q;
}

void _contest23__addAndGetQsosResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_contest23__addAndGetQsosResponse::addAndGetQsosResult = NULL;
	/* transient soap skipped */
}

void _contest23__addAndGetQsosResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTocontest25__QsoUpdate(soap, &this->_contest23__addAndGetQsosResponse::addAndGetQsosResult);
	/* transient soap skipped */
}

int _contest23__addAndGetQsosResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__contest23__addAndGetQsosResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__contest23__addAndGetQsosResponse(struct soap *soap, const char *tag, int id, const _contest23__addAndGetQsosResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2__contest23__addAndGetQsosResponse), type))
		return soap->error;
	if (a->addAndGetQsosResult)
		soap_element_result(soap, "contest23:addAndGetQsosResult");
	if (soap_out_PointerTocontest25__QsoUpdate(soap, "contest23:addAndGetQsosResult", -1, &(a->_contest23__addAndGetQsosResponse::addAndGetQsosResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_contest23__addAndGetQsosResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__contest23__addAndGetQsosResponse(soap, tag, this, type);
}

SOAP_FMAC3 _contest23__addAndGetQsosResponse * SOAP_FMAC4 soap_in__contest23__addAndGetQsosResponse(struct soap *soap, const char *tag, _contest23__addAndGetQsosResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_contest23__addAndGetQsosResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2__contest23__addAndGetQsosResponse, sizeof(_contest23__addAndGetQsosResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2__contest23__addAndGetQsosResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_contest23__addAndGetQsosResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_addAndGetQsosResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_addAndGetQsosResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTocontest25__QsoUpdate(soap, "contest23:addAndGetQsosResult", &(a->_contest23__addAndGetQsosResponse::addAndGetQsosResult), "contest25:QsoUpdate"))
				{	soap_flag_addAndGetQsosResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "contest23:addAndGetQsosResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_contest23__addAndGetQsosResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2__contest23__addAndGetQsosResponse, 0, sizeof(_contest23__addAndGetQsosResponse), 0, soap_copy__contest23__addAndGetQsosResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_addAndGetQsosResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _contest23__addAndGetQsosResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2__contest23__addAndGetQsosResponse);
	if (this->soap_out(soap, tag?tag:"contest23:addAndGetQsosResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_contest23__addAndGetQsosResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__contest23__addAndGetQsosResponse(soap, this, tag, type);
}

SOAP_FMAC3 _contest23__addAndGetQsosResponse * SOAP_FMAC4 soap_get__contest23__addAndGetQsosResponse(struct soap *soap, _contest23__addAndGetQsosResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__contest23__addAndGetQsosResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _contest23__addAndGetQsosResponse * SOAP_FMAC2 soap_instantiate__contest23__addAndGetQsosResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__contest23__addAndGetQsosResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2__contest23__addAndGetQsosResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (_contest23__addAndGetQsosResponse);
		if (size)
			*size = sizeof(_contest23__addAndGetQsosResponse);
		((_contest23__addAndGetQsosResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (_contest23__addAndGetQsosResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_contest23__addAndGetQsosResponse);
		for (int i = 0; i < n; i++)
			((_contest23__addAndGetQsosResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_contest23__addAndGetQsosResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__contest23__addAndGetQsosResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _contest23__addAndGetQsosResponse %p -> %p\n", q, p));
	*(_contest23__addAndGetQsosResponse*)p = *(_contest23__addAndGetQsosResponse*)q;
}

void _contest23__addAndGetQsos::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_contest23__addAndGetQsos::SessionId);
	this->_contest23__addAndGetQsos::QsoAddArray = NULL;
	soap_default_int(soap, &this->_contest23__addAndGetQsos::OldState);
	soap_default_int(soap, &this->_contest23__addAndGetQsos::MaxRequested);
	/* transient soap skipped */
}

void _contest23__addAndGetQsos::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_contest23__addAndGetQsos::SessionId);
	soap_serialize_PointerTocontest25__ArrayOfQso(soap, &this->_contest23__addAndGetQsos::QsoAddArray);
	/* transient soap skipped */
}

int _contest23__addAndGetQsos::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__contest23__addAndGetQsos(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__contest23__addAndGetQsos(struct soap *soap, const char *tag, int id, const _contest23__addAndGetQsos *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2__contest23__addAndGetQsos), type))
		return soap->error;
	if (soap_out_std__string(soap, "contest23:SessionId", -1, &(a->_contest23__addAndGetQsos::SessionId), ""))
		return soap->error;
	if (soap_out_PointerTocontest25__ArrayOfQso(soap, "contest23:QsoAddArray", -1, &(a->_contest23__addAndGetQsos::QsoAddArray), ""))
		return soap->error;
	if (soap_out_int(soap, "contest23:OldState", -1, &(a->_contest23__addAndGetQsos::OldState), ""))
		return soap->error;
	if (soap_out_int(soap, "contest23:MaxRequested", -1, &(a->_contest23__addAndGetQsos::MaxRequested), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_contest23__addAndGetQsos::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__contest23__addAndGetQsos(soap, tag, this, type);
}

SOAP_FMAC3 _contest23__addAndGetQsos * SOAP_FMAC4 soap_in__contest23__addAndGetQsos(struct soap *soap, const char *tag, _contest23__addAndGetQsos *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_contest23__addAndGetQsos *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2__contest23__addAndGetQsos, sizeof(_contest23__addAndGetQsos), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2__contest23__addAndGetQsos)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_contest23__addAndGetQsos *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SessionId1 = 1;
	size_t soap_flag_QsoAddArray1 = 1;
	size_t soap_flag_OldState1 = 1;
	size_t soap_flag_MaxRequested1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SessionId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "contest23:SessionId", &(a->_contest23__addAndGetQsos::SessionId), "xsd:string"))
				{	soap_flag_SessionId1--;
					continue;
				}
			if (soap_flag_QsoAddArray1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTocontest25__ArrayOfQso(soap, "contest23:QsoAddArray", &(a->_contest23__addAndGetQsos::QsoAddArray), "contest25:ArrayOfQso"))
				{	soap_flag_QsoAddArray1--;
					continue;
				}
			if (soap_flag_OldState1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "contest23:OldState", &(a->_contest23__addAndGetQsos::OldState), "xsd:int"))
				{	soap_flag_OldState1--;
					continue;
				}
			if (soap_flag_MaxRequested1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "contest23:MaxRequested", &(a->_contest23__addAndGetQsos::MaxRequested), "xsd:int"))
				{	soap_flag_MaxRequested1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_contest23__addAndGetQsos *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2__contest23__addAndGetQsos, 0, sizeof(_contest23__addAndGetQsos), 0, soap_copy__contest23__addAndGetQsos);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_SessionId1 > 0 || soap_flag_QsoAddArray1 > 0 || soap_flag_OldState1 > 0 || soap_flag_MaxRequested1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _contest23__addAndGetQsos::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2__contest23__addAndGetQsos);
	if (this->soap_out(soap, tag?tag:"contest23:addAndGetQsos", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_contest23__addAndGetQsos::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__contest23__addAndGetQsos(soap, this, tag, type);
}

SOAP_FMAC3 _contest23__addAndGetQsos * SOAP_FMAC4 soap_get__contest23__addAndGetQsos(struct soap *soap, _contest23__addAndGetQsos *p, const char *tag, const char *type)
{
	if ((p = soap_in__contest23__addAndGetQsos(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _contest23__addAndGetQsos * SOAP_FMAC2 soap_instantiate__contest23__addAndGetQsos(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__contest23__addAndGetQsos(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2__contest23__addAndGetQsos, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (_contest23__addAndGetQsos);
		if (size)
			*size = sizeof(_contest23__addAndGetQsos);
		((_contest23__addAndGetQsos*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (_contest23__addAndGetQsos[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_contest23__addAndGetQsos);
		for (int i = 0; i < n; i++)
			((_contest23__addAndGetQsos*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_contest23__addAndGetQsos*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__contest23__addAndGetQsos(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _contest23__addAndGetQsos %p -> %p\n", q, p));
	*(_contest23__addAndGetQsos*)p = *(_contest23__addAndGetQsos*)q;
}

void _contest23__GetSessionIdResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_contest23__GetSessionIdResponse::GetSessionIdResult);
	/* transient soap skipped */
}

void _contest23__GetSessionIdResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_contest23__GetSessionIdResponse::GetSessionIdResult);
	/* transient soap skipped */
}

int _contest23__GetSessionIdResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__contest23__GetSessionIdResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__contest23__GetSessionIdResponse(struct soap *soap, const char *tag, int id, const _contest23__GetSessionIdResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2__contest23__GetSessionIdResponse), type))
		return soap->error;
	soap_element_result(soap, "contest23:GetSessionIdResult");
	if (soap_out_std__string(soap, "contest23:GetSessionIdResult", -1, &(a->_contest23__GetSessionIdResponse::GetSessionIdResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_contest23__GetSessionIdResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__contest23__GetSessionIdResponse(soap, tag, this, type);
}

SOAP_FMAC3 _contest23__GetSessionIdResponse * SOAP_FMAC4 soap_in__contest23__GetSessionIdResponse(struct soap *soap, const char *tag, _contest23__GetSessionIdResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_contest23__GetSessionIdResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2__contest23__GetSessionIdResponse, sizeof(_contest23__GetSessionIdResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2__contest23__GetSessionIdResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_contest23__GetSessionIdResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetSessionIdResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetSessionIdResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "contest23:GetSessionIdResult", &(a->_contest23__GetSessionIdResponse::GetSessionIdResult), "xsd:string"))
				{	soap_flag_GetSessionIdResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "contest23:GetSessionIdResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_contest23__GetSessionIdResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2__contest23__GetSessionIdResponse, 0, sizeof(_contest23__GetSessionIdResponse), 0, soap_copy__contest23__GetSessionIdResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_GetSessionIdResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _contest23__GetSessionIdResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2__contest23__GetSessionIdResponse);
	if (this->soap_out(soap, tag?tag:"contest23:GetSessionIdResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_contest23__GetSessionIdResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__contest23__GetSessionIdResponse(soap, this, tag, type);
}

SOAP_FMAC3 _contest23__GetSessionIdResponse * SOAP_FMAC4 soap_get__contest23__GetSessionIdResponse(struct soap *soap, _contest23__GetSessionIdResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__contest23__GetSessionIdResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _contest23__GetSessionIdResponse * SOAP_FMAC2 soap_instantiate__contest23__GetSessionIdResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__contest23__GetSessionIdResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2__contest23__GetSessionIdResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (_contest23__GetSessionIdResponse);
		if (size)
			*size = sizeof(_contest23__GetSessionIdResponse);
		((_contest23__GetSessionIdResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (_contest23__GetSessionIdResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_contest23__GetSessionIdResponse);
		for (int i = 0; i < n; i++)
			((_contest23__GetSessionIdResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_contest23__GetSessionIdResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__contest23__GetSessionIdResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _contest23__GetSessionIdResponse %p -> %p\n", q, p));
	*(_contest23__GetSessionIdResponse*)p = *(_contest23__GetSessionIdResponse*)q;
}

void _contest23__GetSessionId::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _contest23__GetSessionId::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _contest23__GetSessionId::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__contest23__GetSessionId(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__contest23__GetSessionId(struct soap *soap, const char *tag, int id, const _contest23__GetSessionId *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2__contest23__GetSessionId), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_contest23__GetSessionId::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__contest23__GetSessionId(soap, tag, this, type);
}

SOAP_FMAC3 _contest23__GetSessionId * SOAP_FMAC4 soap_in__contest23__GetSessionId(struct soap *soap, const char *tag, _contest23__GetSessionId *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_contest23__GetSessionId *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2__contest23__GetSessionId, sizeof(_contest23__GetSessionId), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2__contest23__GetSessionId)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_contest23__GetSessionId *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_contest23__GetSessionId *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2__contest23__GetSessionId, 0, sizeof(_contest23__GetSessionId), 0, soap_copy__contest23__GetSessionId);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _contest23__GetSessionId::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2__contest23__GetSessionId);
	if (this->soap_out(soap, tag?tag:"contest23:GetSessionId", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_contest23__GetSessionId::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__contest23__GetSessionId(soap, this, tag, type);
}

SOAP_FMAC3 _contest23__GetSessionId * SOAP_FMAC4 soap_get__contest23__GetSessionId(struct soap *soap, _contest23__GetSessionId *p, const char *tag, const char *type)
{
	if ((p = soap_in__contest23__GetSessionId(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _contest23__GetSessionId * SOAP_FMAC2 soap_instantiate__contest23__GetSessionId(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__contest23__GetSessionId(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2__contest23__GetSessionId, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (_contest23__GetSessionId);
		if (size)
			*size = sizeof(_contest23__GetSessionId);
		((_contest23__GetSessionId*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (_contest23__GetSessionId[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_contest23__GetSessionId);
		for (int i = 0; i < n; i++)
			((_contest23__GetSessionId*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_contest23__GetSessionId*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__contest23__GetSessionId(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _contest23__GetSessionId %p -> %p\n", q, p));
	*(_contest23__GetSessionId*)p = *(_contest23__GetSessionId*)q;
}

void xsd__unsignedShort::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedShort(soap, &this->xsd__unsignedShort::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__unsignedShort::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__unsignedShort::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__unsignedShort(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedShort(struct soap *soap, const char *tag, int id, const xsd__unsignedShort *a, const char *type)
{
	return soap_out_unsignedShort(soap, tag, id, &(a->xsd__unsignedShort::__item), "xsd:unsignedShort");
}

void *xsd__unsignedShort::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__unsignedShort(soap, tag, this, type);
}

SOAP_FMAC3 xsd__unsignedShort * SOAP_FMAC4 soap_in_xsd__unsignedShort(struct soap *soap, const char *tag, xsd__unsignedShort *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__unsignedShort *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__unsignedShort, sizeof(xsd__unsignedShort), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2_xsd__unsignedShort)
			return (xsd__unsignedShort *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_unsignedShort(soap, tag, &(a->xsd__unsignedShort::__item), "xsd:unsignedShort"))
		return NULL;
	return a;
}

int xsd__unsignedShort::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2_xsd__unsignedShort);
	if (this->soap_out(soap, tag?tag:"xsd:unsignedShort", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__unsignedShort::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__unsignedShort(soap, this, tag, type);
}

SOAP_FMAC3 xsd__unsignedShort * SOAP_FMAC4 soap_get_xsd__unsignedShort(struct soap *soap, xsd__unsignedShort *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedShort(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__unsignedShort * SOAP_FMAC2 soap_instantiate_xsd__unsignedShort(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__unsignedShort(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_xsd__unsignedShort, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (xsd__unsignedShort);
		if (size)
			*size = sizeof(xsd__unsignedShort);
		((xsd__unsignedShort*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (xsd__unsignedShort[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__unsignedShort);
		for (int i = 0; i < n; i++)
			((xsd__unsignedShort*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__unsignedShort*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__unsignedShort(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__unsignedShort %p -> %p\n", q, p));
	*(xsd__unsignedShort*)p = *(xsd__unsignedShort*)q;
}

void xsd__unsignedLong::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedLONG64(soap, &this->xsd__unsignedLong::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__unsignedLong::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__unsignedLong::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__unsignedLong(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedLong(struct soap *soap, const char *tag, int id, const xsd__unsignedLong *a, const char *type)
{
	return soap_out_unsignedLONG64(soap, tag, id, &(a->xsd__unsignedLong::__item), "xsd:unsignedLong");
}

void *xsd__unsignedLong::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__unsignedLong(soap, tag, this, type);
}

SOAP_FMAC3 xsd__unsignedLong * SOAP_FMAC4 soap_in_xsd__unsignedLong(struct soap *soap, const char *tag, xsd__unsignedLong *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__unsignedLong *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__unsignedLong, sizeof(xsd__unsignedLong), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2_xsd__unsignedLong)
			return (xsd__unsignedLong *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_unsignedLONG64(soap, tag, &(a->xsd__unsignedLong::__item), "xsd:unsignedLong"))
		return NULL;
	return a;
}

int xsd__unsignedLong::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2_xsd__unsignedLong);
	if (this->soap_out(soap, tag?tag:"xsd:unsignedLong", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__unsignedLong::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__unsignedLong(soap, this, tag, type);
}

SOAP_FMAC3 xsd__unsignedLong * SOAP_FMAC4 soap_get_xsd__unsignedLong(struct soap *soap, xsd__unsignedLong *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedLong(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__unsignedLong * SOAP_FMAC2 soap_instantiate_xsd__unsignedLong(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__unsignedLong(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_xsd__unsignedLong, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (xsd__unsignedLong);
		if (size)
			*size = sizeof(xsd__unsignedLong);
		((xsd__unsignedLong*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (xsd__unsignedLong[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__unsignedLong);
		for (int i = 0; i < n; i++)
			((xsd__unsignedLong*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__unsignedLong*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__unsignedLong(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__unsignedLong %p -> %p\n", q, p));
	*(xsd__unsignedLong*)p = *(xsd__unsignedLong*)q;
}

void xsd__unsignedInt::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedInt(soap, &this->xsd__unsignedInt::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__unsignedInt::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__unsignedInt::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__unsignedInt(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedInt(struct soap *soap, const char *tag, int id, const xsd__unsignedInt *a, const char *type)
{
	return soap_out_unsignedInt(soap, tag, id, &(a->xsd__unsignedInt::__item), "xsd:unsignedInt");
}

void *xsd__unsignedInt::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__unsignedInt(soap, tag, this, type);
}

SOAP_FMAC3 xsd__unsignedInt * SOAP_FMAC4 soap_in_xsd__unsignedInt(struct soap *soap, const char *tag, xsd__unsignedInt *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__unsignedInt *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__unsignedInt, sizeof(xsd__unsignedInt), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2_xsd__unsignedInt)
			return (xsd__unsignedInt *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_unsignedInt(soap, tag, &(a->xsd__unsignedInt::__item), "xsd:unsignedInt"))
		return NULL;
	return a;
}

int xsd__unsignedInt::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2_xsd__unsignedInt);
	if (this->soap_out(soap, tag?tag:"xsd:unsignedInt", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__unsignedInt::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__unsignedInt(soap, this, tag, type);
}

SOAP_FMAC3 xsd__unsignedInt * SOAP_FMAC4 soap_get_xsd__unsignedInt(struct soap *soap, xsd__unsignedInt *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__unsignedInt * SOAP_FMAC2 soap_instantiate_xsd__unsignedInt(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__unsignedInt(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_xsd__unsignedInt, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (xsd__unsignedInt);
		if (size)
			*size = sizeof(xsd__unsignedInt);
		((xsd__unsignedInt*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (xsd__unsignedInt[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__unsignedInt);
		for (int i = 0; i < n; i++)
			((xsd__unsignedInt*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__unsignedInt*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__unsignedInt(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__unsignedInt %p -> %p\n", q, p));
	*(xsd__unsignedInt*)p = *(xsd__unsignedInt*)q;
}

void xsd__unsignedByte_::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__unsignedByte(soap, &this->xsd__unsignedByte_::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__unsignedByte_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__unsignedByte_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__unsignedByte_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte_(struct soap *soap, const char *tag, int id, const xsd__unsignedByte_ *a, const char *type)
{
	return soap_out_xsd__unsignedByte(soap, tag, id, &(a->xsd__unsignedByte_::__item), "xsd:unsignedByte");
}

void *xsd__unsignedByte_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__unsignedByte_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__unsignedByte_ * SOAP_FMAC4 soap_in_xsd__unsignedByte_(struct soap *soap, const char *tag, xsd__unsignedByte_ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__unsignedByte_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__unsignedByte_, sizeof(xsd__unsignedByte_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2_xsd__unsignedByte_)
			return (xsd__unsignedByte_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__unsignedByte(soap, tag, &(a->xsd__unsignedByte_::__item), "xsd:unsignedByte"))
		return NULL;
	return a;
}

int xsd__unsignedByte_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2_xsd__unsignedByte_);
	if (this->soap_out(soap, tag?tag:"xsd:unsignedByte", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__unsignedByte_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__unsignedByte_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__unsignedByte_ * SOAP_FMAC4 soap_get_xsd__unsignedByte_(struct soap *soap, xsd__unsignedByte_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedByte_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__unsignedByte_ * SOAP_FMAC2 soap_instantiate_xsd__unsignedByte_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__unsignedByte_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_xsd__unsignedByte_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (xsd__unsignedByte_);
		if (size)
			*size = sizeof(xsd__unsignedByte_);
		((xsd__unsignedByte_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (xsd__unsignedByte_[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__unsignedByte_);
		for (int i = 0; i < n; i++)
			((xsd__unsignedByte_*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__unsignedByte_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__unsignedByte_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__unsignedByte_ %p -> %p\n", q, p));
	*(xsd__unsignedByte_*)p = *(xsd__unsignedByte_*)q;
}

void xsd__string::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->xsd__string::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__string::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->xsd__string::__item);
	/* transient soap skipped */
}

int xsd__string::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__string(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap *soap, const char *tag, int id, const xsd__string *a, const char *type)
{
	return soap_out_std__string(soap, tag, id, &(a->xsd__string::__item), "xsd:string");
}

void *xsd__string::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__string(soap, tag, this, type);
}

SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_in_xsd__string(struct soap *soap, const char *tag, xsd__string *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__string *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__string, sizeof(xsd__string), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2_xsd__string)
			return (xsd__string *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_std__string(soap, tag, &(a->xsd__string::__item), "xsd:string"))
		return NULL;
	return a;
}

int xsd__string::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2_xsd__string);
	if (this->soap_out(soap, tag?tag:"xsd:string", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__string::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__string(soap, this, tag, type);
}

SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_get_xsd__string(struct soap *soap, xsd__string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__string * SOAP_FMAC2 soap_instantiate_xsd__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_xsd__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (xsd__string);
		if (size)
			*size = sizeof(xsd__string);
		((xsd__string*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (xsd__string[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__string);
		for (int i = 0; i < n; i++)
			((xsd__string*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__string %p -> %p\n", q, p));
	*(xsd__string*)p = *(xsd__string*)q;
}

void xsd__short::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_short(soap, &this->xsd__short::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__short::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__short::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__short(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__short(struct soap *soap, const char *tag, int id, const xsd__short *a, const char *type)
{
	return soap_out_short(soap, tag, id, &(a->xsd__short::__item), "xsd:short");
}

void *xsd__short::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__short(soap, tag, this, type);
}

SOAP_FMAC3 xsd__short * SOAP_FMAC4 soap_in_xsd__short(struct soap *soap, const char *tag, xsd__short *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__short *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__short, sizeof(xsd__short), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2_xsd__short)
			return (xsd__short *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_short(soap, tag, &(a->xsd__short::__item), "xsd:short"))
		return NULL;
	return a;
}

int xsd__short::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2_xsd__short);
	if (this->soap_out(soap, tag?tag:"xsd:short", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__short::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__short(soap, this, tag, type);
}

SOAP_FMAC3 xsd__short * SOAP_FMAC4 soap_get_xsd__short(struct soap *soap, xsd__short *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__short(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__short * SOAP_FMAC2 soap_instantiate_xsd__short(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__short(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_xsd__short, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (xsd__short);
		if (size)
			*size = sizeof(xsd__short);
		((xsd__short*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (xsd__short[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__short);
		for (int i = 0; i < n; i++)
			((xsd__short*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__short*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__short(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__short %p -> %p\n", q, p));
	*(xsd__short*)p = *(xsd__short*)q;
}

void xsd__long::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_LONG64(soap, &this->xsd__long::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__long::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__long::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__long(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__long(struct soap *soap, const char *tag, int id, const xsd__long *a, const char *type)
{
	return soap_out_LONG64(soap, tag, id, &(a->xsd__long::__item), "xsd:long");
}

void *xsd__long::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__long(soap, tag, this, type);
}

SOAP_FMAC3 xsd__long * SOAP_FMAC4 soap_in_xsd__long(struct soap *soap, const char *tag, xsd__long *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__long *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__long, sizeof(xsd__long), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2_xsd__long)
			return (xsd__long *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_LONG64(soap, tag, &(a->xsd__long::__item), "xsd:long"))
		return NULL;
	return a;
}

int xsd__long::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2_xsd__long);
	if (this->soap_out(soap, tag?tag:"xsd:long", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__long::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__long(soap, this, tag, type);
}

SOAP_FMAC3 xsd__long * SOAP_FMAC4 soap_get_xsd__long(struct soap *soap, xsd__long *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__long(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__long * SOAP_FMAC2 soap_instantiate_xsd__long(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__long(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_xsd__long, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (xsd__long);
		if (size)
			*size = sizeof(xsd__long);
		((xsd__long*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (xsd__long[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__long);
		for (int i = 0; i < n; i++)
			((xsd__long*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__long*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__long(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__long %p -> %p\n", q, p));
	*(xsd__long*)p = *(xsd__long*)q;
}

void xsd__int::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->xsd__int::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__int::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__int::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__int(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap *soap, const char *tag, int id, const xsd__int *a, const char *type)
{
	return soap_out_int(soap, tag, id, &(a->xsd__int::__item), "xsd:int");
}

void *xsd__int::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__int(soap, tag, this, type);
}

SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_in_xsd__int(struct soap *soap, const char *tag, xsd__int *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__int *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__int, sizeof(xsd__int), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2_xsd__int)
			return (xsd__int *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_int(soap, tag, &(a->xsd__int::__item), "xsd:int"))
		return NULL;
	return a;
}

int xsd__int::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2_xsd__int);
	if (this->soap_out(soap, tag?tag:"xsd:int", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__int::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__int(soap, this, tag, type);
}

SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_get_xsd__int(struct soap *soap, xsd__int *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__int * SOAP_FMAC2 soap_instantiate_xsd__int(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__int(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_xsd__int, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (xsd__int);
		if (size)
			*size = sizeof(xsd__int);
		((xsd__int*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (xsd__int[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__int);
		for (int i = 0; i < n; i++)
			((xsd__int*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__int*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__int(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__int %p -> %p\n", q, p));
	*(xsd__int*)p = *(xsd__int*)q;
}

void xsd__float::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_float(soap, &this->xsd__float::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__float::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__float::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__float(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__float(struct soap *soap, const char *tag, int id, const xsd__float *a, const char *type)
{
	return soap_out_float(soap, tag, id, &(a->xsd__float::__item), "xsd:float");
}

void *xsd__float::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__float(soap, tag, this, type);
}

SOAP_FMAC3 xsd__float * SOAP_FMAC4 soap_in_xsd__float(struct soap *soap, const char *tag, xsd__float *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__float *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__float, sizeof(xsd__float), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2_xsd__float)
			return (xsd__float *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_float(soap, tag, &(a->xsd__float::__item), "xsd:float"))
		return NULL;
	return a;
}

int xsd__float::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2_xsd__float);
	if (this->soap_out(soap, tag?tag:"xsd:float", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__float::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__float(soap, this, tag, type);
}

SOAP_FMAC3 xsd__float * SOAP_FMAC4 soap_get_xsd__float(struct soap *soap, xsd__float *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__float(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__float * SOAP_FMAC2 soap_instantiate_xsd__float(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__float(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_xsd__float, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (xsd__float);
		if (size)
			*size = sizeof(xsd__float);
		((xsd__float*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (xsd__float[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__float);
		for (int i = 0; i < n; i++)
			((xsd__float*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__float*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__float(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__float %p -> %p\n", q, p));
	*(xsd__float*)p = *(xsd__float*)q;
}

void xsd__duration_::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__duration(soap, &this->xsd__duration_::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__duration_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__duration(soap, &this->xsd__duration_::__item);
	/* transient soap skipped */
}

int xsd__duration_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__duration_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration_(struct soap *soap, const char *tag, int id, const xsd__duration_ *a, const char *type)
{
	return soap_out_xsd__duration(soap, tag, id, &(a->xsd__duration_::__item), "xsd:duration");
}

void *xsd__duration_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__duration_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_in_xsd__duration_(struct soap *soap, const char *tag, xsd__duration_ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__duration_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__duration_, sizeof(xsd__duration_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2_xsd__duration_)
			return (xsd__duration_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__duration(soap, tag, &(a->xsd__duration_::__item), "xsd:duration"))
		return NULL;
	return a;
}

int xsd__duration_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2_xsd__duration_);
	if (this->soap_out(soap, tag?tag:"xsd:duration", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__duration_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__duration_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_get_xsd__duration_(struct soap *soap, xsd__duration_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__duration_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__duration_ * SOAP_FMAC2 soap_instantiate_xsd__duration_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__duration_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_xsd__duration_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (xsd__duration_);
		if (size)
			*size = sizeof(xsd__duration_);
		((xsd__duration_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (xsd__duration_[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__duration_);
		for (int i = 0; i < n; i++)
			((xsd__duration_*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__duration_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__duration_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__duration_ %p -> %p\n", q, p));
	*(xsd__duration_*)p = *(xsd__duration_*)q;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_C2_xsd__duration), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_xsd__duration(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_C2_xsd__duration, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_C2_xsd__duration, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_C2_xsd__duration, 0, sizeof(std::string), 0, soap_copy_xsd__duration);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__duration(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_xsd__duration);
	if (soap_out_xsd__duration(soap, tag?tag:"xsd:duration", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__duration(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__duration(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__double::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_double(soap, &this->xsd__double::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__double::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__double::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__double(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__double(struct soap *soap, const char *tag, int id, const xsd__double *a, const char *type)
{
	return soap_out_double(soap, tag, id, &(a->xsd__double::__item), "xsd:double");
}

void *xsd__double::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__double(soap, tag, this, type);
}

SOAP_FMAC3 xsd__double * SOAP_FMAC4 soap_in_xsd__double(struct soap *soap, const char *tag, xsd__double *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__double *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__double, sizeof(xsd__double), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2_xsd__double)
			return (xsd__double *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_double(soap, tag, &(a->xsd__double::__item), "xsd:double"))
		return NULL;
	return a;
}

int xsd__double::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2_xsd__double);
	if (this->soap_out(soap, tag?tag:"xsd:double", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__double::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__double(soap, this, tag, type);
}

SOAP_FMAC3 xsd__double * SOAP_FMAC4 soap_get_xsd__double(struct soap *soap, xsd__double *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__double * SOAP_FMAC2 soap_instantiate_xsd__double(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__double(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_xsd__double, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (xsd__double);
		if (size)
			*size = sizeof(xsd__double);
		((xsd__double*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (xsd__double[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__double);
		for (int i = 0; i < n; i++)
			((xsd__double*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__double*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__double(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__double %p -> %p\n", q, p));
	*(xsd__double*)p = *(xsd__double*)q;
}

void xsd__decimal_::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__decimal(soap, &this->xsd__decimal_::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__decimal_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__decimal(soap, &this->xsd__decimal_::__item);
	/* transient soap skipped */
}

int xsd__decimal_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__decimal_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal_(struct soap *soap, const char *tag, int id, const xsd__decimal_ *a, const char *type)
{
	return soap_out_xsd__decimal(soap, tag, id, &(a->xsd__decimal_::__item), "xsd:decimal");
}

void *xsd__decimal_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__decimal_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__decimal_ * SOAP_FMAC4 soap_in_xsd__decimal_(struct soap *soap, const char *tag, xsd__decimal_ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__decimal_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__decimal_, sizeof(xsd__decimal_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2_xsd__decimal_)
			return (xsd__decimal_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__decimal(soap, tag, &(a->xsd__decimal_::__item), "xsd:decimal"))
		return NULL;
	return a;
}

int xsd__decimal_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2_xsd__decimal_);
	if (this->soap_out(soap, tag?tag:"xsd:decimal", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__decimal_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__decimal_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__decimal_ * SOAP_FMAC4 soap_get_xsd__decimal_(struct soap *soap, xsd__decimal_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__decimal_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__decimal_ * SOAP_FMAC2 soap_instantiate_xsd__decimal_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__decimal_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_xsd__decimal_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (xsd__decimal_);
		if (size)
			*size = sizeof(xsd__decimal_);
		((xsd__decimal_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (xsd__decimal_[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__decimal_);
		for (int i = 0; i < n; i++)
			((xsd__decimal_*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__decimal_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__decimal_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__decimal_ %p -> %p\n", q, p));
	*(xsd__decimal_*)p = *(xsd__decimal_*)q;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_C2_xsd__decimal), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_xsd__decimal(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_C2_xsd__decimal, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_C2_xsd__decimal, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_C2_xsd__decimal, 0, sizeof(std::string), 0, soap_copy_xsd__decimal);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_xsd__decimal);
	if (soap_out_xsd__decimal(soap, tag?tag:"xsd:decimal", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__decimal(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__decimal(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__dateTime::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_time(soap, &this->xsd__dateTime::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__dateTime::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__dateTime::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__dateTime(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__dateTime(struct soap *soap, const char *tag, int id, const xsd__dateTime *a, const char *type)
{
	return soap_out_time(soap, tag, id, &(a->xsd__dateTime::__item), "xsd:dateTime");
}

void *xsd__dateTime::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__dateTime(soap, tag, this, type);
}

SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_in_xsd__dateTime(struct soap *soap, const char *tag, xsd__dateTime *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__dateTime *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__dateTime, sizeof(xsd__dateTime), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2_xsd__dateTime)
			return (xsd__dateTime *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_time(soap, tag, &(a->xsd__dateTime::__item), "xsd:dateTime"))
		return NULL;
	return a;
}

int xsd__dateTime::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2_xsd__dateTime);
	if (this->soap_out(soap, tag?tag:"xsd:dateTime", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__dateTime::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__dateTime(soap, this, tag, type);
}

SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_get_xsd__dateTime(struct soap *soap, xsd__dateTime *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__dateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__dateTime * SOAP_FMAC2 soap_instantiate_xsd__dateTime(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__dateTime(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_xsd__dateTime, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (xsd__dateTime);
		if (size)
			*size = sizeof(xsd__dateTime);
		((xsd__dateTime*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (xsd__dateTime[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__dateTime);
		for (int i = 0; i < n; i++)
			((xsd__dateTime*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__dateTime*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__dateTime(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__dateTime %p -> %p\n", q, p));
	*(xsd__dateTime*)p = *(xsd__dateTime*)q;
}

void xsd__byte_::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__byte(soap, &this->xsd__byte_::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__byte_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__byte_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__byte_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__byte_(struct soap *soap, const char *tag, int id, const xsd__byte_ *a, const char *type)
{
	return soap_out_xsd__byte(soap, tag, id, &(a->xsd__byte_::__item), "xsd:byte");
}

void *xsd__byte_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__byte_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__byte_ * SOAP_FMAC4 soap_in_xsd__byte_(struct soap *soap, const char *tag, xsd__byte_ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__byte_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__byte_, sizeof(xsd__byte_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2_xsd__byte_)
			return (xsd__byte_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__byte(soap, tag, &(a->xsd__byte_::__item), "xsd:byte"))
		return NULL;
	return a;
}

int xsd__byte_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2_xsd__byte_);
	if (this->soap_out(soap, tag?tag:"xsd:byte", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__byte_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__byte_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__byte_ * SOAP_FMAC4 soap_get_xsd__byte_(struct soap *soap, xsd__byte_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__byte_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__byte_ * SOAP_FMAC2 soap_instantiate_xsd__byte_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__byte_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_xsd__byte_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (xsd__byte_);
		if (size)
			*size = sizeof(xsd__byte_);
		((xsd__byte_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (xsd__byte_[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__byte_);
		for (int i = 0; i < n; i++)
			((xsd__byte_*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__byte_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__byte_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__byte_ %p -> %p\n", q, p));
	*(xsd__byte_*)p = *(xsd__byte_*)q;
}

void xsd__boolean::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->xsd__boolean::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__boolean::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__boolean::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__boolean(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean(struct soap *soap, const char *tag, int id, const xsd__boolean *a, const char *type)
{
	return soap_out_bool(soap, tag, id, &(a->xsd__boolean::__item), "xsd:boolean");
}

void *xsd__boolean::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__boolean(soap, tag, this, type);
}

SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_in_xsd__boolean(struct soap *soap, const char *tag, xsd__boolean *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__boolean *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__boolean, sizeof(xsd__boolean), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2_xsd__boolean)
			return (xsd__boolean *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_bool(soap, tag, &(a->xsd__boolean::__item), "xsd:boolean"))
		return NULL;
	return a;
}

int xsd__boolean::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2_xsd__boolean);
	if (this->soap_out(soap, tag?tag:"xsd:boolean", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__boolean::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__boolean(soap, this, tag, type);
}

SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_get_xsd__boolean(struct soap *soap, xsd__boolean *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__boolean(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__boolean * SOAP_FMAC2 soap_instantiate_xsd__boolean(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__boolean(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_xsd__boolean, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (xsd__boolean);
		if (size)
			*size = sizeof(xsd__boolean);
		((xsd__boolean*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (xsd__boolean[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__boolean);
		for (int i = 0; i < n; i++)
			((xsd__boolean*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__boolean*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__boolean(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__boolean %p -> %p\n", q, p));
	*(xsd__boolean*)p = *(xsd__boolean*)q;
}

void xsd__base64Binary_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__base64Binary_::__item.xsd__base64Binary::soap_default(soap);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__base64Binary_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	this->xsd__base64Binary_::__item.soap_serialize(soap);
	/* transient soap skipped */
}

int xsd__base64Binary_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__base64Binary_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary_(struct soap *soap, const char *tag, int id, const xsd__base64Binary_ *a, const char *type)
{
	return (a->xsd__base64Binary_::__item).soap_out(soap, tag, id, "xsd:base64Binary");
}

void *xsd__base64Binary_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__base64Binary_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_in_xsd__base64Binary_(struct soap *soap, const char *tag, xsd__base64Binary_ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__base64Binary_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__base64Binary_, sizeof(xsd__base64Binary_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2_xsd__base64Binary_)
			return (xsd__base64Binary_ *)a->soap_in(soap, tag, type);
	}
	if (!(a->xsd__base64Binary_::__item).soap_in(soap, tag, "xsd:base64Binary"))
		return NULL;
	return a;
}

int xsd__base64Binary_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2_xsd__base64Binary_);
	if (this->soap_out(soap, tag?tag:"xsd:base64Binary", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__base64Binary_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_get_xsd__base64Binary_(struct soap *soap, xsd__base64Binary_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__base64Binary_ * SOAP_FMAC2 soap_instantiate_xsd__base64Binary_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_xsd__base64Binary_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (xsd__base64Binary_);
		if (size)
			*size = sizeof(xsd__base64Binary_);
		((xsd__base64Binary_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (xsd__base64Binary_[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__base64Binary_);
		for (int i = 0; i < n; i++)
			((xsd__base64Binary_*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__base64Binary_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__base64Binary_ %p -> %p\n", q, p));
	*(xsd__base64Binary_*)p = *(xsd__base64Binary_*)q;
}

void xsd__base64Binary::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptr = NULL;
	this->id = NULL;
	this->type = NULL;
	this->options = NULL;
}

void xsd__base64Binary::soap_serialize(struct soap *soap) const
{
	if (this->__ptr && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptr, 1, SOAP_TYPE_C2_xsd__base64Binary))
		if (this->id || this->type)
			soap->mode |= SOAP_ENC_DIME;
}

int xsd__base64Binary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_xsd__base64Binary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap *soap, const char *tag, int id, const xsd__base64Binary *a, const char *type)
{
#ifndef WITH_LEANER
	id = soap_attachment(soap, tag, id, a, (struct soap_array*)&a->__ptr, a->id, a->type, a->options, 1, type, SOAP_TYPE_C2_xsd__base64Binary);
#else
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_C2_xsd__base64Binary);
#endif
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	if (soap_putbase64(soap, a->__ptr, a->__size))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *xsd__base64Binary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__base64Binary(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (xsd__base64Binary *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__base64Binary, sizeof(xsd__base64Binary), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
#ifndef WITH_LEANER
		if (soap_xop_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
			return NULL;
#endif
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	
#ifndef WITH_LEANER
		if (*soap->href != '#')
		{	if (soap_dime_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
				return NULL;
		}
		else
#endif
			a = (xsd__base64Binary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2_xsd__base64Binary, 0, sizeof(xsd__base64Binary), 0, soap_copy_xsd__base64Binary);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int xsd__base64Binary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptr, 1, tag, SOAP_TYPE_C2_xsd__base64Binary);
	if (this->soap_out(soap, tag?tag:"xsd:base64Binary", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__base64Binary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_xsd__base64Binary, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (xsd__base64Binary);
		if (size)
			*size = sizeof(xsd__base64Binary);
		((xsd__base64Binary*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (xsd__base64Binary[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__base64Binary);
		for (int i = 0; i < n; i++)
			((xsd__base64Binary*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__base64Binary*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__base64Binary %p -> %p\n", q, p));
	*(xsd__base64Binary*)p = *(xsd__base64Binary*)q;
}

void xsd__anyURI_::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__anyURI(soap, &this->xsd__anyURI_::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__anyURI_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__anyURI(soap, &this->xsd__anyURI_::__item);
	/* transient soap skipped */
}

int xsd__anyURI_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__anyURI_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI_(struct soap *soap, const char *tag, int id, const xsd__anyURI_ *a, const char *type)
{
	return soap_out_xsd__anyURI(soap, tag, id, &(a->xsd__anyURI_::__item), "xsd:anyURI");
}

void *xsd__anyURI_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__anyURI_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_in_xsd__anyURI_(struct soap *soap, const char *tag, xsd__anyURI_ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__anyURI_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__anyURI_, sizeof(xsd__anyURI_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2_xsd__anyURI_)
			return (xsd__anyURI_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__anyURI(soap, tag, &(a->xsd__anyURI_::__item), "xsd:anyURI"))
		return NULL;
	return a;
}

int xsd__anyURI_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2_xsd__anyURI_);
	if (this->soap_out(soap, tag?tag:"xsd:anyURI", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__anyURI_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__anyURI_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_get_xsd__anyURI_(struct soap *soap, xsd__anyURI_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyURI_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__anyURI_ * SOAP_FMAC2 soap_instantiate_xsd__anyURI_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__anyURI_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_xsd__anyURI_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (xsd__anyURI_);
		if (size)
			*size = sizeof(xsd__anyURI_);
		((xsd__anyURI_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (xsd__anyURI_[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__anyURI_);
		for (int i = 0; i < n; i++)
			((xsd__anyURI_*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__anyURI_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anyURI_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__anyURI_ %p -> %p\n", q, p));
	*(xsd__anyURI_*)p = *(xsd__anyURI_*)q;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_C2_xsd__anyURI), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_xsd__anyURI(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_C2_xsd__anyURI, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_C2_xsd__anyURI, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_C2_xsd__anyURI, 0, sizeof(std::string), 0, soap_copy_xsd__anyURI);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_xsd__anyURI);
	if (soap_out_xsd__anyURI(soap, tag?tag:"xsd:anyURI", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyURI(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__QName_::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__QName(soap, &this->xsd__QName_::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__QName_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__QName(soap, &this->xsd__QName_::__item);
	/* transient soap skipped */
}

int xsd__QName_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__QName_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName_(struct soap *soap, const char *tag, int id, const xsd__QName_ *a, const char *type)
{
	std::string soap_tmp___item(soap_QName2s(soap, a->__item.c_str()));
	return soap_out_xsd__QName(soap, tag, id, &soap_tmp___item, "xsd:QName");
}

void *xsd__QName_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__QName_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__QName_ * SOAP_FMAC4 soap_in_xsd__QName_(struct soap *soap, const char *tag, xsd__QName_ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__QName_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__QName_, sizeof(xsd__QName_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2_xsd__QName_)
			return (xsd__QName_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__QName(soap, tag, &(a->xsd__QName_::__item), "xsd:QName"))
		return NULL;
	return a;
}

int xsd__QName_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2_xsd__QName_);
	if (this->soap_out(soap, tag?tag:"xsd:QName", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__QName_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__QName_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__QName_ * SOAP_FMAC4 soap_get_xsd__QName_(struct soap *soap, xsd__QName_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__QName_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__QName_ * SOAP_FMAC2 soap_instantiate_xsd__QName_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__QName_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_xsd__QName_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (xsd__QName_);
		if (size)
			*size = sizeof(xsd__QName_);
		((xsd__QName_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (xsd__QName_[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__QName_);
		for (int i = 0; i < n; i++)
			((xsd__QName_*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__QName_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__QName_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__QName_ %p -> %p\n", q, p));
	*(xsd__QName_*)p = *(xsd__QName_*)q;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName(struct soap *soap, const char *tag, int id, const xsd__QName *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2_xsd__QName), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_xsd__QName(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, type))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_C2_xsd__QName, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 2, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_C2_xsd__QName, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_C2_xsd__QName, 0, sizeof(std::string), 0, soap_copy_xsd__QName);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__QName(struct soap *soap, const xsd__QName *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_xsd__QName);
	if (soap_out_xsd__QName(soap, tag?tag:"xsd:QName", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 xsd__QName * SOAP_FMAC4 soap_get_xsd__QName(struct soap *soap, xsd__QName *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__QName * SOAP_FMAC2 soap_instantiate_xsd__QName(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__QName(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_xsd__QName, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (xsd__QName);
		if (size)
			*size = sizeof(xsd__QName);
	}
	else
	{	cp->ptr = (void*)new (xsd__QName[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__QName);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__QName*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__QName(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__QName %p -> %p\n", q, p));
	*(xsd__QName*)p = *(xsd__QName*)q;
}

void xsd__IDREF_::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__IDREF(soap, &this->xsd__IDREF_::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__IDREF_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__IDREF(soap, &this->xsd__IDREF_::__item);
	/* transient soap skipped */
}

int xsd__IDREF_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__IDREF_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__IDREF_(struct soap *soap, const char *tag, int id, const xsd__IDREF_ *a, const char *type)
{
	return soap_out_xsd__IDREF(soap, tag, id, &(a->xsd__IDREF_::__item), "xsd:IDREF");
}

void *xsd__IDREF_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__IDREF_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__IDREF_ * SOAP_FMAC4 soap_in_xsd__IDREF_(struct soap *soap, const char *tag, xsd__IDREF_ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__IDREF_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__IDREF_, sizeof(xsd__IDREF_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2_xsd__IDREF_)
			return (xsd__IDREF_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__IDREF(soap, tag, &(a->xsd__IDREF_::__item), "xsd:IDREF"))
		return NULL;
	return a;
}

int xsd__IDREF_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2_xsd__IDREF_);
	if (this->soap_out(soap, tag?tag:"xsd:IDREF", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__IDREF_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__IDREF_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__IDREF_ * SOAP_FMAC4 soap_get_xsd__IDREF_(struct soap *soap, xsd__IDREF_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__IDREF_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__IDREF_ * SOAP_FMAC2 soap_instantiate_xsd__IDREF_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__IDREF_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_xsd__IDREF_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (xsd__IDREF_);
		if (size)
			*size = sizeof(xsd__IDREF_);
		((xsd__IDREF_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (xsd__IDREF_[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__IDREF_);
		for (int i = 0; i < n; i++)
			((xsd__IDREF_*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__IDREF_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__IDREF_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__IDREF_ %p -> %p\n", q, p));
	*(xsd__IDREF_*)p = *(xsd__IDREF_*)q;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__IDREF(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_C2_xsd__IDREF), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_xsd__IDREF(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_C2_xsd__IDREF, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_C2_xsd__IDREF, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_C2_xsd__IDREF, 0, sizeof(std::string), 0, soap_copy_xsd__IDREF);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__IDREF(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_xsd__IDREF);
	if (soap_out_xsd__IDREF(soap, tag?tag:"xsd:IDREF", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__IDREF(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__IDREF(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__ID_::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__ID(soap, &this->xsd__ID_::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__ID_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__ID(soap, &this->xsd__ID_::__item);
	/* transient soap skipped */
}

int xsd__ID_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__ID_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__ID_(struct soap *soap, const char *tag, int id, const xsd__ID_ *a, const char *type)
{
	return soap_out_xsd__ID(soap, tag, id, &(a->xsd__ID_::__item), "xsd:ID");
}

void *xsd__ID_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__ID_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__ID_ * SOAP_FMAC4 soap_in_xsd__ID_(struct soap *soap, const char *tag, xsd__ID_ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__ID_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__ID_, sizeof(xsd__ID_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2_xsd__ID_)
			return (xsd__ID_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__ID(soap, tag, &(a->xsd__ID_::__item), "xsd:ID"))
		return NULL;
	return a;
}

int xsd__ID_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2_xsd__ID_);
	if (this->soap_out(soap, tag?tag:"xsd:ID", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__ID_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__ID_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__ID_ * SOAP_FMAC4 soap_get_xsd__ID_(struct soap *soap, xsd__ID_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__ID_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__ID_ * SOAP_FMAC2 soap_instantiate_xsd__ID_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__ID_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_xsd__ID_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (xsd__ID_);
		if (size)
			*size = sizeof(xsd__ID_);
		((xsd__ID_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (xsd__ID_[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__ID_);
		for (int i = 0; i < n; i++)
			((xsd__ID_*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__ID_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__ID_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__ID_ %p -> %p\n", q, p));
	*(xsd__ID_*)p = *(xsd__ID_*)q;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__ID(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_C2_xsd__ID), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_xsd__ID(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_C2_xsd__ID, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_C2_xsd__ID, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_C2_xsd__ID, 0, sizeof(std::string), 0, soap_copy_xsd__ID);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__ID(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_xsd__ID);
	if (soap_out_xsd__ID(soap, tag?tag:"xsd:ID", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__ID(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__ID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_C2_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_C2_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_C2_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_C2_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)new (std::string[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void xsd__anyType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__anyType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__anyType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__anyType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap *soap, const char *tag, int id, const xsd__anyType *a, const char *type)
{
	return soap_outliteral(soap, tag, &(a->xsd__anyType::__item), NULL);
}

void *xsd__anyType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__anyType(soap, tag, this, type);
}

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_in_xsd__anyType(struct soap *soap, const char *tag, xsd__anyType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__anyType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__anyType, sizeof(xsd__anyType), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_C2_xsd__anyType)
			return (xsd__anyType *)a->soap_in(soap, tag, type);
	}
	if (!soap_inliteral(soap, tag, &(a->xsd__anyType::__item)))
		return NULL;
	return a;
}

int xsd__anyType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_C2_xsd__anyType);
	if (this->soap_out(soap, tag?tag:"xsd:anyType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__anyType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__anyType(soap, this, tag, type);
}

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_get_xsd__anyType(struct soap *soap, xsd__anyType *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__anyType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_xsd__anyType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (type && !soap_match_tag(soap, type, "xsd:ID"))
	{	cp->type = SOAP_TYPE_C2_xsd__ID_;
		if (n < 0)
		{	cp->ptr = (void*)new (xsd__ID_);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__ID_);
			((xsd__ID_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new (xsd__ID_[n]);
			if (size)
				*size = n * sizeof(xsd__ID_);
			for (int i = 0; i < n; i++)
				((xsd__ID_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__ID_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:IDREF"))
	{	cp->type = SOAP_TYPE_C2_xsd__IDREF_;
		if (n < 0)
		{	cp->ptr = (void*)new (xsd__IDREF_);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__IDREF_);
			((xsd__IDREF_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new (xsd__IDREF_[n]);
			if (size)
				*size = n * sizeof(xsd__IDREF_);
			for (int i = 0; i < n; i++)
				((xsd__IDREF_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__IDREF_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:QName"))
	{	cp->type = SOAP_TYPE_C2_xsd__QName_;
		if (n < 0)
		{	cp->ptr = (void*)new (xsd__QName_);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__QName_);
			((xsd__QName_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new (xsd__QName_[n]);
			if (size)
				*size = n * sizeof(xsd__QName_);
			for (int i = 0; i < n; i++)
				((xsd__QName_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__QName_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:anyURI"))
	{	cp->type = SOAP_TYPE_C2_xsd__anyURI_;
		if (n < 0)
		{	cp->ptr = (void*)new (xsd__anyURI_);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__anyURI_);
			((xsd__anyURI_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new (xsd__anyURI_[n]);
			if (size)
				*size = n * sizeof(xsd__anyURI_);
			for (int i = 0; i < n; i++)
				((xsd__anyURI_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__anyURI_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:base64Binary"))
	{	cp->type = SOAP_TYPE_C2_xsd__base64Binary_;
		if (n < 0)
		{	cp->ptr = (void*)new (xsd__base64Binary_);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__base64Binary_);
			((xsd__base64Binary_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new (xsd__base64Binary_[n]);
			if (size)
				*size = n * sizeof(xsd__base64Binary_);
			for (int i = 0; i < n; i++)
				((xsd__base64Binary_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__base64Binary_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:boolean"))
	{	cp->type = SOAP_TYPE_C2_xsd__boolean;
		if (n < 0)
		{	cp->ptr = (void*)new (xsd__boolean);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__boolean);
			((xsd__boolean*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new (xsd__boolean[n]);
			if (size)
				*size = n * sizeof(xsd__boolean);
			for (int i = 0; i < n; i++)
				((xsd__boolean*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__boolean*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:byte"))
	{	cp->type = SOAP_TYPE_C2_xsd__byte_;
		if (n < 0)
		{	cp->ptr = (void*)new (xsd__byte_);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__byte_);
			((xsd__byte_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new (xsd__byte_[n]);
			if (size)
				*size = n * sizeof(xsd__byte_);
			for (int i = 0; i < n; i++)
				((xsd__byte_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__byte_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:dateTime"))
	{	cp->type = SOAP_TYPE_C2_xsd__dateTime;
		if (n < 0)
		{	cp->ptr = (void*)new (xsd__dateTime);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__dateTime);
			((xsd__dateTime*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new (xsd__dateTime[n]);
			if (size)
				*size = n * sizeof(xsd__dateTime);
			for (int i = 0; i < n; i++)
				((xsd__dateTime*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__dateTime*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:decimal"))
	{	cp->type = SOAP_TYPE_C2_xsd__decimal_;
		if (n < 0)
		{	cp->ptr = (void*)new (xsd__decimal_);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__decimal_);
			((xsd__decimal_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new (xsd__decimal_[n]);
			if (size)
				*size = n * sizeof(xsd__decimal_);
			for (int i = 0; i < n; i++)
				((xsd__decimal_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__decimal_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:double"))
	{	cp->type = SOAP_TYPE_C2_xsd__double;
		if (n < 0)
		{	cp->ptr = (void*)new (xsd__double);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__double);
			((xsd__double*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new (xsd__double[n]);
			if (size)
				*size = n * sizeof(xsd__double);
			for (int i = 0; i < n; i++)
				((xsd__double*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__double*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:duration"))
	{	cp->type = SOAP_TYPE_C2_xsd__duration_;
		if (n < 0)
		{	cp->ptr = (void*)new (xsd__duration_);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__duration_);
			((xsd__duration_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new (xsd__duration_[n]);
			if (size)
				*size = n * sizeof(xsd__duration_);
			for (int i = 0; i < n; i++)
				((xsd__duration_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__duration_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:float"))
	{	cp->type = SOAP_TYPE_C2_xsd__float;
		if (n < 0)
		{	cp->ptr = (void*)new (xsd__float);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__float);
			((xsd__float*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new (xsd__float[n]);
			if (size)
				*size = n * sizeof(xsd__float);
			for (int i = 0; i < n; i++)
				((xsd__float*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__float*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:int"))
	{	cp->type = SOAP_TYPE_C2_xsd__int;
		if (n < 0)
		{	cp->ptr = (void*)new (xsd__int);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__int);
			((xsd__int*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new (xsd__int[n]);
			if (size)
				*size = n * sizeof(xsd__int);
			for (int i = 0; i < n; i++)
				((xsd__int*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__int*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:long"))
	{	cp->type = SOAP_TYPE_C2_xsd__long;
		if (n < 0)
		{	cp->ptr = (void*)new (xsd__long);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__long);
			((xsd__long*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new (xsd__long[n]);
			if (size)
				*size = n * sizeof(xsd__long);
			for (int i = 0; i < n; i++)
				((xsd__long*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__long*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:short"))
	{	cp->type = SOAP_TYPE_C2_xsd__short;
		if (n < 0)
		{	cp->ptr = (void*)new (xsd__short);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__short);
			((xsd__short*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new (xsd__short[n]);
			if (size)
				*size = n * sizeof(xsd__short);
			for (int i = 0; i < n; i++)
				((xsd__short*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__short*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:string"))
	{	cp->type = SOAP_TYPE_C2_xsd__string;
		if (n < 0)
		{	cp->ptr = (void*)new (xsd__string);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__string);
			((xsd__string*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new (xsd__string[n]);
			if (size)
				*size = n * sizeof(xsd__string);
			for (int i = 0; i < n; i++)
				((xsd__string*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__string*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:unsignedByte"))
	{	cp->type = SOAP_TYPE_C2_xsd__unsignedByte_;
		if (n < 0)
		{	cp->ptr = (void*)new (xsd__unsignedByte_);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__unsignedByte_);
			((xsd__unsignedByte_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new (xsd__unsignedByte_[n]);
			if (size)
				*size = n * sizeof(xsd__unsignedByte_);
			for (int i = 0; i < n; i++)
				((xsd__unsignedByte_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__unsignedByte_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:unsignedInt"))
	{	cp->type = SOAP_TYPE_C2_xsd__unsignedInt;
		if (n < 0)
		{	cp->ptr = (void*)new (xsd__unsignedInt);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__unsignedInt);
			((xsd__unsignedInt*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new (xsd__unsignedInt[n]);
			if (size)
				*size = n * sizeof(xsd__unsignedInt);
			for (int i = 0; i < n; i++)
				((xsd__unsignedInt*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__unsignedInt*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:unsignedLong"))
	{	cp->type = SOAP_TYPE_C2_xsd__unsignedLong;
		if (n < 0)
		{	cp->ptr = (void*)new (xsd__unsignedLong);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__unsignedLong);
			((xsd__unsignedLong*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new (xsd__unsignedLong[n]);
			if (size)
				*size = n * sizeof(xsd__unsignedLong);
			for (int i = 0; i < n; i++)
				((xsd__unsignedLong*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__unsignedLong*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:unsignedShort"))
	{	cp->type = SOAP_TYPE_C2_xsd__unsignedShort;
		if (n < 0)
		{	cp->ptr = (void*)new (xsd__unsignedShort);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__unsignedShort);
			((xsd__unsignedShort*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new (xsd__unsignedShort[n]);
			if (size)
				*size = n * sizeof(xsd__unsignedShort);
			for (int i = 0; i < n; i++)
				((xsd__unsignedShort*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__unsignedShort*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "contest24:char"))
	{	cp->type = SOAP_TYPE_C2_contest24__char__;
		if (n < 0)
		{	cp->ptr = (void*)new (contest24__char__);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(contest24__char__);
			((contest24__char__*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new (contest24__char__[n]);
			if (size)
				*size = n * sizeof(contest24__char__);
			for (int i = 0; i < n; i++)
				((contest24__char__*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (contest24__char__*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "contest24:duration"))
	{	cp->type = SOAP_TYPE_C2_contest24__duration__;
		if (n < 0)
		{	cp->ptr = (void*)new (contest24__duration__);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(contest24__duration__);
			((contest24__duration__*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new (contest24__duration__[n]);
			if (size)
				*size = n * sizeof(contest24__duration__);
			for (int i = 0; i < n; i++)
				((contest24__duration__*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (contest24__duration__*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "contest24:guid"))
	{	cp->type = SOAP_TYPE_C2_contest24__guid__;
		if (n < 0)
		{	cp->ptr = (void*)new (contest24__guid__);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(contest24__guid__);
			((contest24__guid__*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new (contest24__guid__[n]);
			if (size)
				*size = n * sizeof(contest24__guid__);
			for (int i = 0; i < n; i++)
				((contest24__guid__*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (contest24__guid__*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "contest25:ArrayOfQso"))
	{	cp->type = SOAP_TYPE_C2_contest25__ArrayOfQso;
		if (n < 0)
		{	cp->ptr = (void*)new (contest25__ArrayOfQso);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(contest25__ArrayOfQso);
			((contest25__ArrayOfQso*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new (contest25__ArrayOfQso[n]);
			if (size)
				*size = n * sizeof(contest25__ArrayOfQso);
			for (int i = 0; i < n; i++)
				((contest25__ArrayOfQso*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (contest25__ArrayOfQso*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "contest25:Qso"))
	{	cp->type = SOAP_TYPE_C2_contest25__Qso;
		if (n < 0)
		{	cp->ptr = (void*)new (contest25__Qso);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(contest25__Qso);
			((contest25__Qso*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new (contest25__Qso[n]);
			if (size)
				*size = n * sizeof(contest25__Qso);
			for (int i = 0; i < n; i++)
				((contest25__Qso*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (contest25__Qso*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "contest25:QsoUpdate"))
	{	cp->type = SOAP_TYPE_C2_contest25__QsoUpdate;
		if (n < 0)
		{	cp->ptr = (void*)new (contest25__QsoUpdate);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(contest25__QsoUpdate);
			((contest25__QsoUpdate*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new (contest25__QsoUpdate[n]);
			if (size)
				*size = n * sizeof(contest25__QsoUpdate);
			for (int i = 0; i < n; i++)
				((contest25__QsoUpdate*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (contest25__QsoUpdate*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "contest25:LogSummary"))
	{	cp->type = SOAP_TYPE_C2_contest25__LogSummary;
		if (n < 0)
		{	cp->ptr = (void*)new (contest25__LogSummary);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(contest25__LogSummary);
			((contest25__LogSummary*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new (contest25__LogSummary[n]);
			if (size)
				*size = n * sizeof(contest25__LogSummary);
			for (int i = 0; i < n; i++)
				((contest25__LogSummary*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (contest25__LogSummary*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "contest25:ArrayOfQsoIdVersion"))
	{	cp->type = SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion;
		if (n < 0)
		{	cp->ptr = (void*)new (contest25__ArrayOfQsoIdVersion);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(contest25__ArrayOfQsoIdVersion);
			((contest25__ArrayOfQsoIdVersion*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new (contest25__ArrayOfQsoIdVersion[n]);
			if (size)
				*size = n * sizeof(contest25__ArrayOfQsoIdVersion);
			for (int i = 0; i < n; i++)
				((contest25__ArrayOfQsoIdVersion*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (contest25__ArrayOfQsoIdVersion*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "contest25:QsoIdVersion"))
	{	cp->type = SOAP_TYPE_C2_contest25__QsoIdVersion;
		if (n < 0)
		{	cp->ptr = (void*)new (contest25__QsoIdVersion);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(contest25__QsoIdVersion);
			((contest25__QsoIdVersion*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new (contest25__QsoIdVersion[n]);
			if (size)
				*size = n * sizeof(contest25__QsoIdVersion);
			for (int i = 0; i < n; i++)
				((contest25__QsoIdVersion*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (contest25__QsoIdVersion*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "contest25:ArrayOfRigFrequency"))
	{	cp->type = SOAP_TYPE_C2_contest25__ArrayOfRigFrequency;
		if (n < 0)
		{	cp->ptr = (void*)new (contest25__ArrayOfRigFrequency);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(contest25__ArrayOfRigFrequency);
			((contest25__ArrayOfRigFrequency*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new (contest25__ArrayOfRigFrequency[n]);
			if (size)
				*size = n * sizeof(contest25__ArrayOfRigFrequency);
			for (int i = 0; i < n; i++)
				((contest25__ArrayOfRigFrequency*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (contest25__ArrayOfRigFrequency*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "contest25:RigFrequency"))
	{	cp->type = SOAP_TYPE_C2_contest25__RigFrequency;
		if (n < 0)
		{	cp->ptr = (void*)new (contest25__RigFrequency);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(contest25__RigFrequency);
			((contest25__RigFrequency*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new (contest25__RigFrequency[n]);
			if (size)
				*size = n * sizeof(contest25__RigFrequency);
			for (int i = 0; i < n; i++)
				((contest25__RigFrequency*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (contest25__RigFrequency*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "contest26:ArrayOfstring"))
	{	cp->type = SOAP_TYPE_C2_contest26__ArrayOfstring;
		if (n < 0)
		{	cp->ptr = (void*)new (contest26__ArrayOfstring);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(contest26__ArrayOfstring);
			((contest26__ArrayOfstring*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new (contest26__ArrayOfstring[n]);
			if (size)
				*size = n * sizeof(contest26__ArrayOfstring);
			for (int i = 0; i < n; i++)
				((contest26__ArrayOfstring*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (contest26__ArrayOfstring*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "contest26:ArrayOfint"))
	{	cp->type = SOAP_TYPE_C2_contest26__ArrayOfint;
		if (n < 0)
		{	cp->ptr = (void*)new (contest26__ArrayOfint);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(contest26__ArrayOfint);
			((contest26__ArrayOfint*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)new (contest26__ArrayOfint[n]);
			if (size)
				*size = n * sizeof(contest26__ArrayOfint);
			for (int i = 0; i < n; i++)
				((contest26__ArrayOfint*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (contest26__ArrayOfint*)cp->ptr;
	}
	if (n < 0)
	{	cp->ptr = (void*)new (xsd__anyType);
		if (size)
			*size = sizeof(xsd__anyType);
		((xsd__anyType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new (xsd__anyType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__anyType);
		for (int i = 0; i < n; i++)
			((xsd__anyType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__anyType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anyType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__anyType %p -> %p\n", q, p));
	*(xsd__anyType*)p = *(xsd__anyType*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)new (struct SOAP_ENV__Fault[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)new (struct SOAP_ENV__Reason[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag_fault = 1;
	size_t soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)new (struct SOAP_ENV__Detail[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)new (struct SOAP_ENV__Code[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)new (struct SOAP_ENV__Header[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___contest21__ExchangeFrequencies(struct soap *soap, struct __contest21__ExchangeFrequencies *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->contest23__ExchangeFrequencies = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___contest21__ExchangeFrequencies(struct soap *soap, const struct __contest21__ExchangeFrequencies *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_contest23__ExchangeFrequencies(soap, &a->contest23__ExchangeFrequencies);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___contest21__ExchangeFrequencies(struct soap *soap, const char *tag, int id, const struct __contest21__ExchangeFrequencies *a, const char *type)
{
	if (soap_out_PointerTo_contest23__ExchangeFrequencies(soap, "contest23:ExchangeFrequencies", -1, &a->contest23__ExchangeFrequencies, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __contest21__ExchangeFrequencies * SOAP_FMAC4 soap_in___contest21__ExchangeFrequencies(struct soap *soap, const char *tag, struct __contest21__ExchangeFrequencies *a, const char *type)
{
	size_t soap_flag_contest23__ExchangeFrequencies = 1;
	short soap_flag;
	a = (struct __contest21__ExchangeFrequencies *)soap_id_enter(soap, "", a, SOAP_TYPE_C2___contest21__ExchangeFrequencies, sizeof(struct __contest21__ExchangeFrequencies), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___contest21__ExchangeFrequencies(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_contest23__ExchangeFrequencies && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_contest23__ExchangeFrequencies(soap, "contest23:ExchangeFrequencies", &a->contest23__ExchangeFrequencies, ""))
				{	soap_flag_contest23__ExchangeFrequencies--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___contest21__ExchangeFrequencies(struct soap *soap, const struct __contest21__ExchangeFrequencies *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___contest21__ExchangeFrequencies(soap, tag?tag:"-contest21:ExchangeFrequencies", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __contest21__ExchangeFrequencies * SOAP_FMAC4 soap_get___contest21__ExchangeFrequencies(struct soap *soap, struct __contest21__ExchangeFrequencies *p, const char *tag, const char *type)
{
	if ((p = soap_in___contest21__ExchangeFrequencies(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __contest21__ExchangeFrequencies * SOAP_FMAC2 soap_instantiate___contest21__ExchangeFrequencies(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___contest21__ExchangeFrequencies(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2___contest21__ExchangeFrequencies, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct __contest21__ExchangeFrequencies);
		if (size)
			*size = sizeof(struct __contest21__ExchangeFrequencies);
	}
	else
	{	cp->ptr = (void*)new (struct __contest21__ExchangeFrequencies[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __contest21__ExchangeFrequencies);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __contest21__ExchangeFrequencies*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___contest21__ExchangeFrequencies(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __contest21__ExchangeFrequencies %p -> %p\n", q, p));
	*(struct __contest21__ExchangeFrequencies*)p = *(struct __contest21__ExchangeFrequencies*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___contest21__ColumnNamesToIndices(struct soap *soap, struct __contest21__ColumnNamesToIndices *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->contest23__ColumnNamesToIndices = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___contest21__ColumnNamesToIndices(struct soap *soap, const struct __contest21__ColumnNamesToIndices *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_contest23__ColumnNamesToIndices(soap, &a->contest23__ColumnNamesToIndices);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___contest21__ColumnNamesToIndices(struct soap *soap, const char *tag, int id, const struct __contest21__ColumnNamesToIndices *a, const char *type)
{
	if (soap_out_PointerTo_contest23__ColumnNamesToIndices(soap, "contest23:ColumnNamesToIndices", -1, &a->contest23__ColumnNamesToIndices, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __contest21__ColumnNamesToIndices * SOAP_FMAC4 soap_in___contest21__ColumnNamesToIndices(struct soap *soap, const char *tag, struct __contest21__ColumnNamesToIndices *a, const char *type)
{
	size_t soap_flag_contest23__ColumnNamesToIndices = 1;
	short soap_flag;
	a = (struct __contest21__ColumnNamesToIndices *)soap_id_enter(soap, "", a, SOAP_TYPE_C2___contest21__ColumnNamesToIndices, sizeof(struct __contest21__ColumnNamesToIndices), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___contest21__ColumnNamesToIndices(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_contest23__ColumnNamesToIndices && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_contest23__ColumnNamesToIndices(soap, "contest23:ColumnNamesToIndices", &a->contest23__ColumnNamesToIndices, ""))
				{	soap_flag_contest23__ColumnNamesToIndices--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___contest21__ColumnNamesToIndices(struct soap *soap, const struct __contest21__ColumnNamesToIndices *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___contest21__ColumnNamesToIndices(soap, tag?tag:"-contest21:ColumnNamesToIndices", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __contest21__ColumnNamesToIndices * SOAP_FMAC4 soap_get___contest21__ColumnNamesToIndices(struct soap *soap, struct __contest21__ColumnNamesToIndices *p, const char *tag, const char *type)
{
	if ((p = soap_in___contest21__ColumnNamesToIndices(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __contest21__ColumnNamesToIndices * SOAP_FMAC2 soap_instantiate___contest21__ColumnNamesToIndices(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___contest21__ColumnNamesToIndices(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2___contest21__ColumnNamesToIndices, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct __contest21__ColumnNamesToIndices);
		if (size)
			*size = sizeof(struct __contest21__ColumnNamesToIndices);
	}
	else
	{	cp->ptr = (void*)new (struct __contest21__ColumnNamesToIndices[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __contest21__ColumnNamesToIndices);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __contest21__ColumnNamesToIndices*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___contest21__ColumnNamesToIndices(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __contest21__ColumnNamesToIndices %p -> %p\n", q, p));
	*(struct __contest21__ColumnNamesToIndices*)p = *(struct __contest21__ColumnNamesToIndices*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___contest21__getQsosByKeyArray(struct soap *soap, struct __contest21__getQsosByKeyArray *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->contest23__getQsosByKeyArray = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___contest21__getQsosByKeyArray(struct soap *soap, const struct __contest21__getQsosByKeyArray *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_contest23__getQsosByKeyArray(soap, &a->contest23__getQsosByKeyArray);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___contest21__getQsosByKeyArray(struct soap *soap, const char *tag, int id, const struct __contest21__getQsosByKeyArray *a, const char *type)
{
	if (soap_out_PointerTo_contest23__getQsosByKeyArray(soap, "contest23:getQsosByKeyArray", -1, &a->contest23__getQsosByKeyArray, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __contest21__getQsosByKeyArray * SOAP_FMAC4 soap_in___contest21__getQsosByKeyArray(struct soap *soap, const char *tag, struct __contest21__getQsosByKeyArray *a, const char *type)
{
	size_t soap_flag_contest23__getQsosByKeyArray = 1;
	short soap_flag;
	a = (struct __contest21__getQsosByKeyArray *)soap_id_enter(soap, "", a, SOAP_TYPE_C2___contest21__getQsosByKeyArray, sizeof(struct __contest21__getQsosByKeyArray), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___contest21__getQsosByKeyArray(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_contest23__getQsosByKeyArray && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_contest23__getQsosByKeyArray(soap, "contest23:getQsosByKeyArray", &a->contest23__getQsosByKeyArray, ""))
				{	soap_flag_contest23__getQsosByKeyArray--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___contest21__getQsosByKeyArray(struct soap *soap, const struct __contest21__getQsosByKeyArray *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___contest21__getQsosByKeyArray(soap, tag?tag:"-contest21:getQsosByKeyArray", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __contest21__getQsosByKeyArray * SOAP_FMAC4 soap_get___contest21__getQsosByKeyArray(struct soap *soap, struct __contest21__getQsosByKeyArray *p, const char *tag, const char *type)
{
	if ((p = soap_in___contest21__getQsosByKeyArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __contest21__getQsosByKeyArray * SOAP_FMAC2 soap_instantiate___contest21__getQsosByKeyArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___contest21__getQsosByKeyArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2___contest21__getQsosByKeyArray, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct __contest21__getQsosByKeyArray);
		if (size)
			*size = sizeof(struct __contest21__getQsosByKeyArray);
	}
	else
	{	cp->ptr = (void*)new (struct __contest21__getQsosByKeyArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __contest21__getQsosByKeyArray);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __contest21__getQsosByKeyArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___contest21__getQsosByKeyArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __contest21__getQsosByKeyArray %p -> %p\n", q, p));
	*(struct __contest21__getQsosByKeyArray*)p = *(struct __contest21__getQsosByKeyArray*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___contest21__AddAndGetLogSummary(struct soap *soap, struct __contest21__AddAndGetLogSummary *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->contest23__AddAndGetLogSummary = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___contest21__AddAndGetLogSummary(struct soap *soap, const struct __contest21__AddAndGetLogSummary *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_contest23__AddAndGetLogSummary(soap, &a->contest23__AddAndGetLogSummary);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___contest21__AddAndGetLogSummary(struct soap *soap, const char *tag, int id, const struct __contest21__AddAndGetLogSummary *a, const char *type)
{
	if (soap_out_PointerTo_contest23__AddAndGetLogSummary(soap, "contest23:AddAndGetLogSummary", -1, &a->contest23__AddAndGetLogSummary, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __contest21__AddAndGetLogSummary * SOAP_FMAC4 soap_in___contest21__AddAndGetLogSummary(struct soap *soap, const char *tag, struct __contest21__AddAndGetLogSummary *a, const char *type)
{
	size_t soap_flag_contest23__AddAndGetLogSummary = 1;
	short soap_flag;
	a = (struct __contest21__AddAndGetLogSummary *)soap_id_enter(soap, "", a, SOAP_TYPE_C2___contest21__AddAndGetLogSummary, sizeof(struct __contest21__AddAndGetLogSummary), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___contest21__AddAndGetLogSummary(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_contest23__AddAndGetLogSummary && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_contest23__AddAndGetLogSummary(soap, "contest23:AddAndGetLogSummary", &a->contest23__AddAndGetLogSummary, ""))
				{	soap_flag_contest23__AddAndGetLogSummary--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___contest21__AddAndGetLogSummary(struct soap *soap, const struct __contest21__AddAndGetLogSummary *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___contest21__AddAndGetLogSummary(soap, tag?tag:"-contest21:AddAndGetLogSummary", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __contest21__AddAndGetLogSummary * SOAP_FMAC4 soap_get___contest21__AddAndGetLogSummary(struct soap *soap, struct __contest21__AddAndGetLogSummary *p, const char *tag, const char *type)
{
	if ((p = soap_in___contest21__AddAndGetLogSummary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __contest21__AddAndGetLogSummary * SOAP_FMAC2 soap_instantiate___contest21__AddAndGetLogSummary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___contest21__AddAndGetLogSummary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2___contest21__AddAndGetLogSummary, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct __contest21__AddAndGetLogSummary);
		if (size)
			*size = sizeof(struct __contest21__AddAndGetLogSummary);
	}
	else
	{	cp->ptr = (void*)new (struct __contest21__AddAndGetLogSummary[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __contest21__AddAndGetLogSummary);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __contest21__AddAndGetLogSummary*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___contest21__AddAndGetLogSummary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __contest21__AddAndGetLogSummary %p -> %p\n", q, p));
	*(struct __contest21__AddAndGetLogSummary*)p = *(struct __contest21__AddAndGetLogSummary*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___contest21__addAndGetQsos(struct soap *soap, struct __contest21__addAndGetQsos *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->contest23__addAndGetQsos = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___contest21__addAndGetQsos(struct soap *soap, const struct __contest21__addAndGetQsos *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_contest23__addAndGetQsos(soap, &a->contest23__addAndGetQsos);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___contest21__addAndGetQsos(struct soap *soap, const char *tag, int id, const struct __contest21__addAndGetQsos *a, const char *type)
{
	if (soap_out_PointerTo_contest23__addAndGetQsos(soap, "contest23:addAndGetQsos", -1, &a->contest23__addAndGetQsos, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __contest21__addAndGetQsos * SOAP_FMAC4 soap_in___contest21__addAndGetQsos(struct soap *soap, const char *tag, struct __contest21__addAndGetQsos *a, const char *type)
{
	size_t soap_flag_contest23__addAndGetQsos = 1;
	short soap_flag;
	a = (struct __contest21__addAndGetQsos *)soap_id_enter(soap, "", a, SOAP_TYPE_C2___contest21__addAndGetQsos, sizeof(struct __contest21__addAndGetQsos), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___contest21__addAndGetQsos(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_contest23__addAndGetQsos && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_contest23__addAndGetQsos(soap, "contest23:addAndGetQsos", &a->contest23__addAndGetQsos, ""))
				{	soap_flag_contest23__addAndGetQsos--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___contest21__addAndGetQsos(struct soap *soap, const struct __contest21__addAndGetQsos *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___contest21__addAndGetQsos(soap, tag?tag:"-contest21:addAndGetQsos", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __contest21__addAndGetQsos * SOAP_FMAC4 soap_get___contest21__addAndGetQsos(struct soap *soap, struct __contest21__addAndGetQsos *p, const char *tag, const char *type)
{
	if ((p = soap_in___contest21__addAndGetQsos(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __contest21__addAndGetQsos * SOAP_FMAC2 soap_instantiate___contest21__addAndGetQsos(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___contest21__addAndGetQsos(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2___contest21__addAndGetQsos, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct __contest21__addAndGetQsos);
		if (size)
			*size = sizeof(struct __contest21__addAndGetQsos);
	}
	else
	{	cp->ptr = (void*)new (struct __contest21__addAndGetQsos[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __contest21__addAndGetQsos);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __contest21__addAndGetQsos*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___contest21__addAndGetQsos(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __contest21__addAndGetQsos %p -> %p\n", q, p));
	*(struct __contest21__addAndGetQsos*)p = *(struct __contest21__addAndGetQsos*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___contest21__GetSessionId(struct soap *soap, struct __contest21__GetSessionId *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->contest23__GetSessionId = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___contest21__GetSessionId(struct soap *soap, const struct __contest21__GetSessionId *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_contest23__GetSessionId(soap, &a->contest23__GetSessionId);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___contest21__GetSessionId(struct soap *soap, const char *tag, int id, const struct __contest21__GetSessionId *a, const char *type)
{
	if (soap_out_PointerTo_contest23__GetSessionId(soap, "contest23:GetSessionId", -1, &a->contest23__GetSessionId, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __contest21__GetSessionId * SOAP_FMAC4 soap_in___contest21__GetSessionId(struct soap *soap, const char *tag, struct __contest21__GetSessionId *a, const char *type)
{
	size_t soap_flag_contest23__GetSessionId = 1;
	short soap_flag;
	a = (struct __contest21__GetSessionId *)soap_id_enter(soap, "", a, SOAP_TYPE_C2___contest21__GetSessionId, sizeof(struct __contest21__GetSessionId), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___contest21__GetSessionId(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_contest23__GetSessionId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_contest23__GetSessionId(soap, "contest23:GetSessionId", &a->contest23__GetSessionId, ""))
				{	soap_flag_contest23__GetSessionId--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___contest21__GetSessionId(struct soap *soap, const struct __contest21__GetSessionId *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___contest21__GetSessionId(soap, tag?tag:"-contest21:GetSessionId", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __contest21__GetSessionId * SOAP_FMAC4 soap_get___contest21__GetSessionId(struct soap *soap, struct __contest21__GetSessionId *p, const char *tag, const char *type)
{
	if ((p = soap_in___contest21__GetSessionId(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __contest21__GetSessionId * SOAP_FMAC2 soap_instantiate___contest21__GetSessionId(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___contest21__GetSessionId(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2___contest21__GetSessionId, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct __contest21__GetSessionId);
		if (size)
			*size = sizeof(struct __contest21__GetSessionId);
	}
	else
	{	cp->ptr = (void*)new (struct __contest21__GetSessionId[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __contest21__GetSessionId);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __contest21__GetSessionId*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___contest21__GetSessionId(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __contest21__GetSessionId %p -> %p\n", q, p));
	*(struct __contest21__GetSessionId*)p = *(struct __contest21__GetSessionId*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C2_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C2_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C2_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_contest23__ExchangeFrequenciesResponse(struct soap *soap, _contest23__ExchangeFrequenciesResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C2__contest23__ExchangeFrequenciesResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_contest23__ExchangeFrequenciesResponse(struct soap *soap, const char *tag, int id, _contest23__ExchangeFrequenciesResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2__contest23__ExchangeFrequenciesResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _contest23__ExchangeFrequenciesResponse ** SOAP_FMAC4 soap_in_PointerTo_contest23__ExchangeFrequenciesResponse(struct soap *soap, const char *tag, _contest23__ExchangeFrequenciesResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_contest23__ExchangeFrequenciesResponse **)soap_malloc(soap, sizeof(_contest23__ExchangeFrequenciesResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_contest23__ExchangeFrequenciesResponse *)soap_instantiate__contest23__ExchangeFrequenciesResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_contest23__ExchangeFrequenciesResponse ** p = (_contest23__ExchangeFrequenciesResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2__contest23__ExchangeFrequenciesResponse, sizeof(_contest23__ExchangeFrequenciesResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_contest23__ExchangeFrequenciesResponse(struct soap *soap, _contest23__ExchangeFrequenciesResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_PointerTo_contest23__ExchangeFrequenciesResponse);
	if (soap_out_PointerTo_contest23__ExchangeFrequenciesResponse(soap, tag?tag:"contest23:ExchangeFrequenciesResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _contest23__ExchangeFrequenciesResponse ** SOAP_FMAC4 soap_get_PointerTo_contest23__ExchangeFrequenciesResponse(struct soap *soap, _contest23__ExchangeFrequenciesResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_contest23__ExchangeFrequenciesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_contest23__ExchangeFrequencies(struct soap *soap, _contest23__ExchangeFrequencies *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C2__contest23__ExchangeFrequencies))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_contest23__ExchangeFrequencies(struct soap *soap, const char *tag, int id, _contest23__ExchangeFrequencies *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2__contest23__ExchangeFrequencies);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _contest23__ExchangeFrequencies ** SOAP_FMAC4 soap_in_PointerTo_contest23__ExchangeFrequencies(struct soap *soap, const char *tag, _contest23__ExchangeFrequencies **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_contest23__ExchangeFrequencies **)soap_malloc(soap, sizeof(_contest23__ExchangeFrequencies *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_contest23__ExchangeFrequencies *)soap_instantiate__contest23__ExchangeFrequencies(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_contest23__ExchangeFrequencies ** p = (_contest23__ExchangeFrequencies **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2__contest23__ExchangeFrequencies, sizeof(_contest23__ExchangeFrequencies), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_contest23__ExchangeFrequencies(struct soap *soap, _contest23__ExchangeFrequencies *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_PointerTo_contest23__ExchangeFrequencies);
	if (soap_out_PointerTo_contest23__ExchangeFrequencies(soap, tag?tag:"contest23:ExchangeFrequencies", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _contest23__ExchangeFrequencies ** SOAP_FMAC4 soap_get_PointerTo_contest23__ExchangeFrequencies(struct soap *soap, _contest23__ExchangeFrequencies **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_contest23__ExchangeFrequencies(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_contest23__ColumnNamesToIndicesResponse(struct soap *soap, _contest23__ColumnNamesToIndicesResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C2__contest23__ColumnNamesToIndicesResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_contest23__ColumnNamesToIndicesResponse(struct soap *soap, const char *tag, int id, _contest23__ColumnNamesToIndicesResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2__contest23__ColumnNamesToIndicesResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _contest23__ColumnNamesToIndicesResponse ** SOAP_FMAC4 soap_in_PointerTo_contest23__ColumnNamesToIndicesResponse(struct soap *soap, const char *tag, _contest23__ColumnNamesToIndicesResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_contest23__ColumnNamesToIndicesResponse **)soap_malloc(soap, sizeof(_contest23__ColumnNamesToIndicesResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_contest23__ColumnNamesToIndicesResponse *)soap_instantiate__contest23__ColumnNamesToIndicesResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_contest23__ColumnNamesToIndicesResponse ** p = (_contest23__ColumnNamesToIndicesResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2__contest23__ColumnNamesToIndicesResponse, sizeof(_contest23__ColumnNamesToIndicesResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_contest23__ColumnNamesToIndicesResponse(struct soap *soap, _contest23__ColumnNamesToIndicesResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_PointerTo_contest23__ColumnNamesToIndicesResponse);
	if (soap_out_PointerTo_contest23__ColumnNamesToIndicesResponse(soap, tag?tag:"contest23:ColumnNamesToIndicesResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _contest23__ColumnNamesToIndicesResponse ** SOAP_FMAC4 soap_get_PointerTo_contest23__ColumnNamesToIndicesResponse(struct soap *soap, _contest23__ColumnNamesToIndicesResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_contest23__ColumnNamesToIndicesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_contest23__ColumnNamesToIndices(struct soap *soap, _contest23__ColumnNamesToIndices *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C2__contest23__ColumnNamesToIndices))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_contest23__ColumnNamesToIndices(struct soap *soap, const char *tag, int id, _contest23__ColumnNamesToIndices *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2__contest23__ColumnNamesToIndices);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _contest23__ColumnNamesToIndices ** SOAP_FMAC4 soap_in_PointerTo_contest23__ColumnNamesToIndices(struct soap *soap, const char *tag, _contest23__ColumnNamesToIndices **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_contest23__ColumnNamesToIndices **)soap_malloc(soap, sizeof(_contest23__ColumnNamesToIndices *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_contest23__ColumnNamesToIndices *)soap_instantiate__contest23__ColumnNamesToIndices(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_contest23__ColumnNamesToIndices ** p = (_contest23__ColumnNamesToIndices **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2__contest23__ColumnNamesToIndices, sizeof(_contest23__ColumnNamesToIndices), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_contest23__ColumnNamesToIndices(struct soap *soap, _contest23__ColumnNamesToIndices *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_PointerTo_contest23__ColumnNamesToIndices);
	if (soap_out_PointerTo_contest23__ColumnNamesToIndices(soap, tag?tag:"contest23:ColumnNamesToIndices", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _contest23__ColumnNamesToIndices ** SOAP_FMAC4 soap_get_PointerTo_contest23__ColumnNamesToIndices(struct soap *soap, _contest23__ColumnNamesToIndices **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_contest23__ColumnNamesToIndices(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_contest23__getQsosByKeyArrayResponse(struct soap *soap, _contest23__getQsosByKeyArrayResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C2__contest23__getQsosByKeyArrayResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_contest23__getQsosByKeyArrayResponse(struct soap *soap, const char *tag, int id, _contest23__getQsosByKeyArrayResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2__contest23__getQsosByKeyArrayResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _contest23__getQsosByKeyArrayResponse ** SOAP_FMAC4 soap_in_PointerTo_contest23__getQsosByKeyArrayResponse(struct soap *soap, const char *tag, _contest23__getQsosByKeyArrayResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_contest23__getQsosByKeyArrayResponse **)soap_malloc(soap, sizeof(_contest23__getQsosByKeyArrayResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_contest23__getQsosByKeyArrayResponse *)soap_instantiate__contest23__getQsosByKeyArrayResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_contest23__getQsosByKeyArrayResponse ** p = (_contest23__getQsosByKeyArrayResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2__contest23__getQsosByKeyArrayResponse, sizeof(_contest23__getQsosByKeyArrayResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_contest23__getQsosByKeyArrayResponse(struct soap *soap, _contest23__getQsosByKeyArrayResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_PointerTo_contest23__getQsosByKeyArrayResponse);
	if (soap_out_PointerTo_contest23__getQsosByKeyArrayResponse(soap, tag?tag:"contest23:getQsosByKeyArrayResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _contest23__getQsosByKeyArrayResponse ** SOAP_FMAC4 soap_get_PointerTo_contest23__getQsosByKeyArrayResponse(struct soap *soap, _contest23__getQsosByKeyArrayResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_contest23__getQsosByKeyArrayResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_contest23__getQsosByKeyArray(struct soap *soap, _contest23__getQsosByKeyArray *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C2__contest23__getQsosByKeyArray))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_contest23__getQsosByKeyArray(struct soap *soap, const char *tag, int id, _contest23__getQsosByKeyArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2__contest23__getQsosByKeyArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _contest23__getQsosByKeyArray ** SOAP_FMAC4 soap_in_PointerTo_contest23__getQsosByKeyArray(struct soap *soap, const char *tag, _contest23__getQsosByKeyArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_contest23__getQsosByKeyArray **)soap_malloc(soap, sizeof(_contest23__getQsosByKeyArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_contest23__getQsosByKeyArray *)soap_instantiate__contest23__getQsosByKeyArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_contest23__getQsosByKeyArray ** p = (_contest23__getQsosByKeyArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2__contest23__getQsosByKeyArray, sizeof(_contest23__getQsosByKeyArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_contest23__getQsosByKeyArray(struct soap *soap, _contest23__getQsosByKeyArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_PointerTo_contest23__getQsosByKeyArray);
	if (soap_out_PointerTo_contest23__getQsosByKeyArray(soap, tag?tag:"contest23:getQsosByKeyArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _contest23__getQsosByKeyArray ** SOAP_FMAC4 soap_get_PointerTo_contest23__getQsosByKeyArray(struct soap *soap, _contest23__getQsosByKeyArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_contest23__getQsosByKeyArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_contest23__AddAndGetLogSummaryResponse(struct soap *soap, _contest23__AddAndGetLogSummaryResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C2__contest23__AddAndGetLogSummaryResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_contest23__AddAndGetLogSummaryResponse(struct soap *soap, const char *tag, int id, _contest23__AddAndGetLogSummaryResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2__contest23__AddAndGetLogSummaryResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _contest23__AddAndGetLogSummaryResponse ** SOAP_FMAC4 soap_in_PointerTo_contest23__AddAndGetLogSummaryResponse(struct soap *soap, const char *tag, _contest23__AddAndGetLogSummaryResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_contest23__AddAndGetLogSummaryResponse **)soap_malloc(soap, sizeof(_contest23__AddAndGetLogSummaryResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_contest23__AddAndGetLogSummaryResponse *)soap_instantiate__contest23__AddAndGetLogSummaryResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_contest23__AddAndGetLogSummaryResponse ** p = (_contest23__AddAndGetLogSummaryResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2__contest23__AddAndGetLogSummaryResponse, sizeof(_contest23__AddAndGetLogSummaryResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_contest23__AddAndGetLogSummaryResponse(struct soap *soap, _contest23__AddAndGetLogSummaryResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_PointerTo_contest23__AddAndGetLogSummaryResponse);
	if (soap_out_PointerTo_contest23__AddAndGetLogSummaryResponse(soap, tag?tag:"contest23:AddAndGetLogSummaryResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _contest23__AddAndGetLogSummaryResponse ** SOAP_FMAC4 soap_get_PointerTo_contest23__AddAndGetLogSummaryResponse(struct soap *soap, _contest23__AddAndGetLogSummaryResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_contest23__AddAndGetLogSummaryResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_contest23__AddAndGetLogSummary(struct soap *soap, _contest23__AddAndGetLogSummary *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C2__contest23__AddAndGetLogSummary))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_contest23__AddAndGetLogSummary(struct soap *soap, const char *tag, int id, _contest23__AddAndGetLogSummary *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2__contest23__AddAndGetLogSummary);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _contest23__AddAndGetLogSummary ** SOAP_FMAC4 soap_in_PointerTo_contest23__AddAndGetLogSummary(struct soap *soap, const char *tag, _contest23__AddAndGetLogSummary **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_contest23__AddAndGetLogSummary **)soap_malloc(soap, sizeof(_contest23__AddAndGetLogSummary *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_contest23__AddAndGetLogSummary *)soap_instantiate__contest23__AddAndGetLogSummary(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_contest23__AddAndGetLogSummary ** p = (_contest23__AddAndGetLogSummary **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2__contest23__AddAndGetLogSummary, sizeof(_contest23__AddAndGetLogSummary), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_contest23__AddAndGetLogSummary(struct soap *soap, _contest23__AddAndGetLogSummary *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_PointerTo_contest23__AddAndGetLogSummary);
	if (soap_out_PointerTo_contest23__AddAndGetLogSummary(soap, tag?tag:"contest23:AddAndGetLogSummary", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _contest23__AddAndGetLogSummary ** SOAP_FMAC4 soap_get_PointerTo_contest23__AddAndGetLogSummary(struct soap *soap, _contest23__AddAndGetLogSummary **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_contest23__AddAndGetLogSummary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_contest23__addAndGetQsosResponse(struct soap *soap, _contest23__addAndGetQsosResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C2__contest23__addAndGetQsosResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_contest23__addAndGetQsosResponse(struct soap *soap, const char *tag, int id, _contest23__addAndGetQsosResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2__contest23__addAndGetQsosResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _contest23__addAndGetQsosResponse ** SOAP_FMAC4 soap_in_PointerTo_contest23__addAndGetQsosResponse(struct soap *soap, const char *tag, _contest23__addAndGetQsosResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_contest23__addAndGetQsosResponse **)soap_malloc(soap, sizeof(_contest23__addAndGetQsosResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_contest23__addAndGetQsosResponse *)soap_instantiate__contest23__addAndGetQsosResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_contest23__addAndGetQsosResponse ** p = (_contest23__addAndGetQsosResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2__contest23__addAndGetQsosResponse, sizeof(_contest23__addAndGetQsosResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_contest23__addAndGetQsosResponse(struct soap *soap, _contest23__addAndGetQsosResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_PointerTo_contest23__addAndGetQsosResponse);
	if (soap_out_PointerTo_contest23__addAndGetQsosResponse(soap, tag?tag:"contest23:addAndGetQsosResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _contest23__addAndGetQsosResponse ** SOAP_FMAC4 soap_get_PointerTo_contest23__addAndGetQsosResponse(struct soap *soap, _contest23__addAndGetQsosResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_contest23__addAndGetQsosResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_contest23__addAndGetQsos(struct soap *soap, _contest23__addAndGetQsos *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C2__contest23__addAndGetQsos))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_contest23__addAndGetQsos(struct soap *soap, const char *tag, int id, _contest23__addAndGetQsos *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2__contest23__addAndGetQsos);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _contest23__addAndGetQsos ** SOAP_FMAC4 soap_in_PointerTo_contest23__addAndGetQsos(struct soap *soap, const char *tag, _contest23__addAndGetQsos **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_contest23__addAndGetQsos **)soap_malloc(soap, sizeof(_contest23__addAndGetQsos *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_contest23__addAndGetQsos *)soap_instantiate__contest23__addAndGetQsos(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_contest23__addAndGetQsos ** p = (_contest23__addAndGetQsos **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2__contest23__addAndGetQsos, sizeof(_contest23__addAndGetQsos), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_contest23__addAndGetQsos(struct soap *soap, _contest23__addAndGetQsos *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_PointerTo_contest23__addAndGetQsos);
	if (soap_out_PointerTo_contest23__addAndGetQsos(soap, tag?tag:"contest23:addAndGetQsos", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _contest23__addAndGetQsos ** SOAP_FMAC4 soap_get_PointerTo_contest23__addAndGetQsos(struct soap *soap, _contest23__addAndGetQsos **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_contest23__addAndGetQsos(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_contest23__GetSessionIdResponse(struct soap *soap, _contest23__GetSessionIdResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C2__contest23__GetSessionIdResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_contest23__GetSessionIdResponse(struct soap *soap, const char *tag, int id, _contest23__GetSessionIdResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2__contest23__GetSessionIdResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _contest23__GetSessionIdResponse ** SOAP_FMAC4 soap_in_PointerTo_contest23__GetSessionIdResponse(struct soap *soap, const char *tag, _contest23__GetSessionIdResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_contest23__GetSessionIdResponse **)soap_malloc(soap, sizeof(_contest23__GetSessionIdResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_contest23__GetSessionIdResponse *)soap_instantiate__contest23__GetSessionIdResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_contest23__GetSessionIdResponse ** p = (_contest23__GetSessionIdResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2__contest23__GetSessionIdResponse, sizeof(_contest23__GetSessionIdResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_contest23__GetSessionIdResponse(struct soap *soap, _contest23__GetSessionIdResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_PointerTo_contest23__GetSessionIdResponse);
	if (soap_out_PointerTo_contest23__GetSessionIdResponse(soap, tag?tag:"contest23:GetSessionIdResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _contest23__GetSessionIdResponse ** SOAP_FMAC4 soap_get_PointerTo_contest23__GetSessionIdResponse(struct soap *soap, _contest23__GetSessionIdResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_contest23__GetSessionIdResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_contest23__GetSessionId(struct soap *soap, _contest23__GetSessionId *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C2__contest23__GetSessionId))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_contest23__GetSessionId(struct soap *soap, const char *tag, int id, _contest23__GetSessionId *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2__contest23__GetSessionId);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _contest23__GetSessionId ** SOAP_FMAC4 soap_in_PointerTo_contest23__GetSessionId(struct soap *soap, const char *tag, _contest23__GetSessionId **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_contest23__GetSessionId **)soap_malloc(soap, sizeof(_contest23__GetSessionId *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_contest23__GetSessionId *)soap_instantiate__contest23__GetSessionId(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_contest23__GetSessionId ** p = (_contest23__GetSessionId **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2__contest23__GetSessionId, sizeof(_contest23__GetSessionId), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_contest23__GetSessionId(struct soap *soap, _contest23__GetSessionId *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_PointerTo_contest23__GetSessionId);
	if (soap_out_PointerTo_contest23__GetSessionId(soap, tag?tag:"contest23:GetSessionId", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _contest23__GetSessionId ** SOAP_FMAC4 soap_get_PointerTo_contest23__GetSessionId(struct soap *soap, _contest23__GetSessionId **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_contest23__GetSessionId(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest25__RigFrequency(struct soap *soap, contest25__RigFrequency *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C2_contest25__RigFrequency))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest25__RigFrequency(struct soap *soap, const char *tag, int id, contest25__RigFrequency *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2_contest25__RigFrequency);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 contest25__RigFrequency ** SOAP_FMAC4 soap_in_PointerTocontest25__RigFrequency(struct soap *soap, const char *tag, contest25__RigFrequency **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest25__RigFrequency **)soap_malloc(soap, sizeof(contest25__RigFrequency *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest25__RigFrequency *)soap_instantiate_contest25__RigFrequency(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	contest25__RigFrequency ** p = (contest25__RigFrequency **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2_contest25__RigFrequency, sizeof(contest25__RigFrequency), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest25__RigFrequency(struct soap *soap, contest25__RigFrequency *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_PointerTocontest25__RigFrequency);
	if (soap_out_PointerTocontest25__RigFrequency(soap, tag?tag:"contest25:RigFrequency", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest25__RigFrequency ** SOAP_FMAC4 soap_get_PointerTocontest25__RigFrequency(struct soap *soap, contest25__RigFrequency **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest25__RigFrequency(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest25__QsoIdVersion(struct soap *soap, contest25__QsoIdVersion *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C2_contest25__QsoIdVersion))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest25__QsoIdVersion(struct soap *soap, const char *tag, int id, contest25__QsoIdVersion *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2_contest25__QsoIdVersion);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 contest25__QsoIdVersion ** SOAP_FMAC4 soap_in_PointerTocontest25__QsoIdVersion(struct soap *soap, const char *tag, contest25__QsoIdVersion **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest25__QsoIdVersion **)soap_malloc(soap, sizeof(contest25__QsoIdVersion *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest25__QsoIdVersion *)soap_instantiate_contest25__QsoIdVersion(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	contest25__QsoIdVersion ** p = (contest25__QsoIdVersion **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2_contest25__QsoIdVersion, sizeof(contest25__QsoIdVersion), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest25__QsoIdVersion(struct soap *soap, contest25__QsoIdVersion *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_PointerTocontest25__QsoIdVersion);
	if (soap_out_PointerTocontest25__QsoIdVersion(soap, tag?tag:"contest25:QsoIdVersion", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest25__QsoIdVersion ** SOAP_FMAC4 soap_get_PointerTocontest25__QsoIdVersion(struct soap *soap, contest25__QsoIdVersion **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest25__QsoIdVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest25__ArrayOfQsoIdVersion(struct soap *soap, contest25__ArrayOfQsoIdVersion *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest25__ArrayOfQsoIdVersion(struct soap *soap, const char *tag, int id, contest25__ArrayOfQsoIdVersion *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 contest25__ArrayOfQsoIdVersion ** SOAP_FMAC4 soap_in_PointerTocontest25__ArrayOfQsoIdVersion(struct soap *soap, const char *tag, contest25__ArrayOfQsoIdVersion **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest25__ArrayOfQsoIdVersion **)soap_malloc(soap, sizeof(contest25__ArrayOfQsoIdVersion *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest25__ArrayOfQsoIdVersion *)soap_instantiate_contest25__ArrayOfQsoIdVersion(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	contest25__ArrayOfQsoIdVersion ** p = (contest25__ArrayOfQsoIdVersion **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion, sizeof(contest25__ArrayOfQsoIdVersion), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest25__ArrayOfQsoIdVersion(struct soap *soap, contest25__ArrayOfQsoIdVersion *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_PointerTocontest25__ArrayOfQsoIdVersion);
	if (soap_out_PointerTocontest25__ArrayOfQsoIdVersion(soap, tag?tag:"contest25:ArrayOfQsoIdVersion", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest25__ArrayOfQsoIdVersion ** SOAP_FMAC4 soap_get_PointerTocontest25__ArrayOfQsoIdVersion(struct soap *soap, contest25__ArrayOfQsoIdVersion **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest25__ArrayOfQsoIdVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest25__Qso(struct soap *soap, contest25__Qso *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C2_contest25__Qso))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest25__Qso(struct soap *soap, const char *tag, int id, contest25__Qso *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2_contest25__Qso);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 contest25__Qso ** SOAP_FMAC4 soap_in_PointerTocontest25__Qso(struct soap *soap, const char *tag, contest25__Qso **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest25__Qso **)soap_malloc(soap, sizeof(contest25__Qso *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest25__Qso *)soap_instantiate_contest25__Qso(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	contest25__Qso ** p = (contest25__Qso **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2_contest25__Qso, sizeof(contest25__Qso), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest25__Qso(struct soap *soap, contest25__Qso *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_PointerTocontest25__Qso);
	if (soap_out_PointerTocontest25__Qso(soap, tag?tag:"contest25:Qso", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest25__Qso ** SOAP_FMAC4 soap_get_PointerTocontest25__Qso(struct soap *soap, contest25__Qso **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest25__Qso(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest25__ArrayOfRigFrequency(struct soap *soap, contest25__ArrayOfRigFrequency *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C2_contest25__ArrayOfRigFrequency))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest25__ArrayOfRigFrequency(struct soap *soap, const char *tag, int id, contest25__ArrayOfRigFrequency *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2_contest25__ArrayOfRigFrequency);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 contest25__ArrayOfRigFrequency ** SOAP_FMAC4 soap_in_PointerTocontest25__ArrayOfRigFrequency(struct soap *soap, const char *tag, contest25__ArrayOfRigFrequency **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest25__ArrayOfRigFrequency **)soap_malloc(soap, sizeof(contest25__ArrayOfRigFrequency *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest25__ArrayOfRigFrequency *)soap_instantiate_contest25__ArrayOfRigFrequency(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	contest25__ArrayOfRigFrequency ** p = (contest25__ArrayOfRigFrequency **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2_contest25__ArrayOfRigFrequency, sizeof(contest25__ArrayOfRigFrequency), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest25__ArrayOfRigFrequency(struct soap *soap, contest25__ArrayOfRigFrequency *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_PointerTocontest25__ArrayOfRigFrequency);
	if (soap_out_PointerTocontest25__ArrayOfRigFrequency(soap, tag?tag:"contest25:ArrayOfRigFrequency", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest25__ArrayOfRigFrequency ** SOAP_FMAC4 soap_get_PointerTocontest25__ArrayOfRigFrequency(struct soap *soap, contest25__ArrayOfRigFrequency **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest25__ArrayOfRigFrequency(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest26__ArrayOfint(struct soap *soap, contest26__ArrayOfint *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C2_contest26__ArrayOfint))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest26__ArrayOfint(struct soap *soap, const char *tag, int id, contest26__ArrayOfint *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2_contest26__ArrayOfint);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 contest26__ArrayOfint ** SOAP_FMAC4 soap_in_PointerTocontest26__ArrayOfint(struct soap *soap, const char *tag, contest26__ArrayOfint **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest26__ArrayOfint **)soap_malloc(soap, sizeof(contest26__ArrayOfint *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest26__ArrayOfint *)soap_instantiate_contest26__ArrayOfint(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	contest26__ArrayOfint ** p = (contest26__ArrayOfint **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2_contest26__ArrayOfint, sizeof(contest26__ArrayOfint), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest26__ArrayOfint(struct soap *soap, contest26__ArrayOfint *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_PointerTocontest26__ArrayOfint);
	if (soap_out_PointerTocontest26__ArrayOfint(soap, tag?tag:"contest26:ArrayOfint", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest26__ArrayOfint ** SOAP_FMAC4 soap_get_PointerTocontest26__ArrayOfint(struct soap *soap, contest26__ArrayOfint **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest26__ArrayOfint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest26__ArrayOfstring(struct soap *soap, contest26__ArrayOfstring *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C2_contest26__ArrayOfstring))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest26__ArrayOfstring(struct soap *soap, const char *tag, int id, contest26__ArrayOfstring *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2_contest26__ArrayOfstring);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 contest26__ArrayOfstring ** SOAP_FMAC4 soap_in_PointerTocontest26__ArrayOfstring(struct soap *soap, const char *tag, contest26__ArrayOfstring **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest26__ArrayOfstring **)soap_malloc(soap, sizeof(contest26__ArrayOfstring *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest26__ArrayOfstring *)soap_instantiate_contest26__ArrayOfstring(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	contest26__ArrayOfstring ** p = (contest26__ArrayOfstring **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2_contest26__ArrayOfstring, sizeof(contest26__ArrayOfstring), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest26__ArrayOfstring(struct soap *soap, contest26__ArrayOfstring *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_PointerTocontest26__ArrayOfstring);
	if (soap_out_PointerTocontest26__ArrayOfstring(soap, tag?tag:"contest26:ArrayOfstring", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest26__ArrayOfstring ** SOAP_FMAC4 soap_get_PointerTocontest26__ArrayOfstring(struct soap *soap, contest26__ArrayOfstring **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest26__ArrayOfstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest25__LogSummary(struct soap *soap, contest25__LogSummary *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C2_contest25__LogSummary))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest25__LogSummary(struct soap *soap, const char *tag, int id, contest25__LogSummary *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2_contest25__LogSummary);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 contest25__LogSummary ** SOAP_FMAC4 soap_in_PointerTocontest25__LogSummary(struct soap *soap, const char *tag, contest25__LogSummary **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest25__LogSummary **)soap_malloc(soap, sizeof(contest25__LogSummary *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest25__LogSummary *)soap_instantiate_contest25__LogSummary(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	contest25__LogSummary ** p = (contest25__LogSummary **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2_contest25__LogSummary, sizeof(contest25__LogSummary), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest25__LogSummary(struct soap *soap, contest25__LogSummary *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_PointerTocontest25__LogSummary);
	if (soap_out_PointerTocontest25__LogSummary(soap, tag?tag:"contest25:LogSummary", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest25__LogSummary ** SOAP_FMAC4 soap_get_PointerTocontest25__LogSummary(struct soap *soap, contest25__LogSummary **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest25__LogSummary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest25__QsoUpdate(struct soap *soap, contest25__QsoUpdate *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C2_contest25__QsoUpdate))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest25__QsoUpdate(struct soap *soap, const char *tag, int id, contest25__QsoUpdate *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2_contest25__QsoUpdate);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 contest25__QsoUpdate ** SOAP_FMAC4 soap_in_PointerTocontest25__QsoUpdate(struct soap *soap, const char *tag, contest25__QsoUpdate **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest25__QsoUpdate **)soap_malloc(soap, sizeof(contest25__QsoUpdate *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest25__QsoUpdate *)soap_instantiate_contest25__QsoUpdate(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	contest25__QsoUpdate ** p = (contest25__QsoUpdate **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2_contest25__QsoUpdate, sizeof(contest25__QsoUpdate), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest25__QsoUpdate(struct soap *soap, contest25__QsoUpdate *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_PointerTocontest25__QsoUpdate);
	if (soap_out_PointerTocontest25__QsoUpdate(soap, tag?tag:"contest25:QsoUpdate", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest25__QsoUpdate ** SOAP_FMAC4 soap_get_PointerTocontest25__QsoUpdate(struct soap *soap, contest25__QsoUpdate **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest25__QsoUpdate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest25__ArrayOfQso(struct soap *soap, contest25__ArrayOfQso *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_C2_contest25__ArrayOfQso))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest25__ArrayOfQso(struct soap *soap, const char *tag, int id, contest25__ArrayOfQso *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2_contest25__ArrayOfQso);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 contest25__ArrayOfQso ** SOAP_FMAC4 soap_in_PointerTocontest25__ArrayOfQso(struct soap *soap, const char *tag, contest25__ArrayOfQso **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest25__ArrayOfQso **)soap_malloc(soap, sizeof(contest25__ArrayOfQso *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest25__ArrayOfQso *)soap_instantiate_contest25__ArrayOfQso(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	contest25__ArrayOfQso ** p = (contest25__ArrayOfQso **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2_contest25__ArrayOfQso, sizeof(contest25__ArrayOfQso), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest25__ArrayOfQso(struct soap *soap, contest25__ArrayOfQso *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_PointerTocontest25__ArrayOfQso);
	if (soap_out_PointerTocontest25__ArrayOfQso(soap, tag?tag:"contest25:ArrayOfQso", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest25__ArrayOfQso ** SOAP_FMAC4 soap_get_PointerTocontest25__ArrayOfQso(struct soap *soap, contest25__ArrayOfQso **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest25__ArrayOfQso(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_C2_unsignedByte);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2_unsignedByte);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2_unsignedByte, sizeof(unsigned char), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_PointerTounsignedByte);
	if (soap_out_PointerTounsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_C2__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_C2__QName, 2, -1, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_C2_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_C2_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_C2_string, 1, -1, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_C2_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfint(struct soap *soap, std::vector<int >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfint(struct soap *soap, const std::vector<int >*a)
{
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfint(struct soap *soap, const char *tag, int id, const std::vector<int >*a, const char *type)
{
	for (std::vector<int >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_int(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<int >* SOAP_FMAC4 soap_in_std__vectorTemplateOfint(struct soap *soap, const char *tag, std::vector<int >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfint(soap, -1)))
		return NULL;
	int n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		soap_default_int(soap, &n);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_C2_int, SOAP_TYPE_C2_std__vectorTemplateOfint, sizeof(int), 0))
				break;
			if (!soap_in_int(soap, tag, NULL, "xsd:int"))
				break;
		}
		else
		{
			if (!soap_in_int(soap, tag, &n, "xsd:int"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<int > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfint(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_std__vectorTemplateOfint, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (std::vector<int >);
		if (size)
			*size = sizeof(std::vector<int >);
	}
	else
	{	cp->ptr = (void*)new (std::vector<int >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<int >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<int >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfint(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<int > %p -> %p\n", q, p));
	*(std::vector<int >*)p = *(std::vector<int >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap *soap, std::vector<std::string >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap *soap, const std::vector<std::string >*a)
{
	for (std::vector<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_std__string(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, int id, const std::vector<std::string >*a, const char *type)
{
	for (std::vector<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_std__string(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, std::vector<std::string >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfstd__string(soap, -1)))
		return NULL;
	std::string n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		soap_default_std__string(soap, &n);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_C2_std__string, SOAP_TYPE_C2_std__vectorTemplateOfstd__string, sizeof(std::string), 0))
				break;
			if (!soap_in_std__string(soap, tag, NULL, "xsd:string"))
				break;
		}
		else
		{
			if (!soap_in_std__string(soap, tag, &n, "xsd:string"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfstd__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_std__vectorTemplateOfstd__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (std::vector<std::string >);
		if (size)
			*size = sizeof(std::vector<std::string >);
	}
	else
	{	cp->ptr = (void*)new (std::vector<std::string >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<std::string >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<std::string >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfstd__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<std::string > %p -> %p\n", q, p));
	*(std::vector<std::string >*)p = *(std::vector<std::string >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTocontest25__RigFrequency(struct soap *soap, std::vector<contest25__RigFrequency * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTocontest25__RigFrequency(struct soap *soap, const std::vector<contest25__RigFrequency * >*a)
{
	for (std::vector<contest25__RigFrequency * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTocontest25__RigFrequency(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTocontest25__RigFrequency(struct soap *soap, const char *tag, int id, const std::vector<contest25__RigFrequency * >*a, const char *type)
{
	for (std::vector<contest25__RigFrequency * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTocontest25__RigFrequency(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<contest25__RigFrequency * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTocontest25__RigFrequency(struct soap *soap, const char *tag, std::vector<contest25__RigFrequency * >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerTocontest25__RigFrequency(soap, -1)))
		return NULL;
	contest25__RigFrequency *n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_C2_contest25__RigFrequency, SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__RigFrequency, sizeof(contest25__RigFrequency), 1))
				break;
			if (!soap_in_PointerTocontest25__RigFrequency(soap, tag, NULL, "contest25:RigFrequency"))
				break;
		}
		else
		{
			if (!soap_in_PointerTocontest25__RigFrequency(soap, tag, &n, "contest25:RigFrequency"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<contest25__RigFrequency * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTocontest25__RigFrequency(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTocontest25__RigFrequency(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__RigFrequency, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (std::vector<contest25__RigFrequency * >);
		if (size)
			*size = sizeof(std::vector<contest25__RigFrequency * >);
	}
	else
	{	cp->ptr = (void*)new (std::vector<contest25__RigFrequency * >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<contest25__RigFrequency * >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<contest25__RigFrequency * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTocontest25__RigFrequency(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<contest25__RigFrequency * > %p -> %p\n", q, p));
	*(std::vector<contest25__RigFrequency * >*)p = *(std::vector<contest25__RigFrequency * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTocontest25__QsoIdVersion(struct soap *soap, std::vector<contest25__QsoIdVersion * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTocontest25__QsoIdVersion(struct soap *soap, const std::vector<contest25__QsoIdVersion * >*a)
{
	for (std::vector<contest25__QsoIdVersion * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTocontest25__QsoIdVersion(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTocontest25__QsoIdVersion(struct soap *soap, const char *tag, int id, const std::vector<contest25__QsoIdVersion * >*a, const char *type)
{
	for (std::vector<contest25__QsoIdVersion * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTocontest25__QsoIdVersion(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<contest25__QsoIdVersion * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTocontest25__QsoIdVersion(struct soap *soap, const char *tag, std::vector<contest25__QsoIdVersion * >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerTocontest25__QsoIdVersion(soap, -1)))
		return NULL;
	contest25__QsoIdVersion *n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_C2_contest25__QsoIdVersion, SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__QsoIdVersion, sizeof(contest25__QsoIdVersion), 1))
				break;
			if (!soap_in_PointerTocontest25__QsoIdVersion(soap, tag, NULL, "contest25:QsoIdVersion"))
				break;
		}
		else
		{
			if (!soap_in_PointerTocontest25__QsoIdVersion(soap, tag, &n, "contest25:QsoIdVersion"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<contest25__QsoIdVersion * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTocontest25__QsoIdVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTocontest25__QsoIdVersion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__QsoIdVersion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (std::vector<contest25__QsoIdVersion * >);
		if (size)
			*size = sizeof(std::vector<contest25__QsoIdVersion * >);
	}
	else
	{	cp->ptr = (void*)new (std::vector<contest25__QsoIdVersion * >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<contest25__QsoIdVersion * >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<contest25__QsoIdVersion * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTocontest25__QsoIdVersion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<contest25__QsoIdVersion * > %p -> %p\n", q, p));
	*(std::vector<contest25__QsoIdVersion * >*)p = *(std::vector<contest25__QsoIdVersion * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTocontest25__Qso(struct soap *soap, std::vector<contest25__Qso * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTocontest25__Qso(struct soap *soap, const std::vector<contest25__Qso * >*a)
{
	for (std::vector<contest25__Qso * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTocontest25__Qso(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTocontest25__Qso(struct soap *soap, const char *tag, int id, const std::vector<contest25__Qso * >*a, const char *type)
{
	for (std::vector<contest25__Qso * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTocontest25__Qso(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<contest25__Qso * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTocontest25__Qso(struct soap *soap, const char *tag, std::vector<contest25__Qso * >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerTocontest25__Qso(soap, -1)))
		return NULL;
	contest25__Qso *n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_C2_contest25__Qso, SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__Qso, sizeof(contest25__Qso), 1))
				break;
			if (!soap_in_PointerTocontest25__Qso(soap, tag, NULL, "contest25:Qso"))
				break;
		}
		else
		{
			if (!soap_in_PointerTocontest25__Qso(soap, tag, &n, "contest25:Qso"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<contest25__Qso * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTocontest25__Qso(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTocontest25__Qso(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__Qso, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (std::vector<contest25__Qso * >);
		if (size)
			*size = sizeof(std::vector<contest25__Qso * >);
	}
	else
	{	cp->ptr = (void*)new (std::vector<contest25__Qso * >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<contest25__Qso * >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<contest25__Qso * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTocontest25__Qso(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<contest25__Qso * > %p -> %p\n", q, p));
	*(std::vector<contest25__Qso * >*)p = *(std::vector<contest25__Qso * >*)q;
}

} // namespace C2


#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of C2C.cpp */
