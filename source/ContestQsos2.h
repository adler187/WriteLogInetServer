/* ContestQsos2.h
   Generated by wsdl2h 1.2.15 from http://localhost:8002/ContestQsos/service?wsdl and typemap.dat
   2011-10-17 13:00:30 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2009 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Build Notes

NOTE:

 - Run soapcpp2 on ContestQsos2.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
GPL or Genivia's license for commercial use.

GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org
--------------------------------------------------------------------------------
A commercial use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

contest21 = "http://tempuri.org/"
contest22 = "urn:ContestQsos2/Imports"
contest23 = "urn:ContestQsos2"
contest24 = "http://schemas.microsoft.com/2003/10/Serialization/"
contest25 = "http://schemas.datacontract.org/2004/07/ContestQsos"
contest26 = "http://schemas.microsoft.com/2003/10/Serialization/Arrays"

*/

#define SOAP_NAMESPACE_OF_contest22	"urn:ContestQsos2/Imports"
//gsoap contest22 schema namespace:	urn:ContestQsos2/Imports
//gsoap contest22 schema form:	unqualified

#define SOAP_NAMESPACE_OF_contest23	"urn:ContestQsos2"
//gsoap contest23 schema namespace:	urn:ContestQsos2
//gsoap contest23 schema elementForm:	qualified
//gsoap contest23 schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_contest24	"http://schemas.microsoft.com/2003/10/Serialization/"
//gsoap contest24 schema namespace:	http://schemas.microsoft.com/2003/10/Serialization/
//gsoap contest24 schema form:	qualified

#define SOAP_NAMESPACE_OF_contest25	"http://schemas.datacontract.org/2004/07/ContestQsos"
//gsoap contest25 schema namespace:	http://schemas.datacontract.org/2004/07/ContestQsos
//gsoap contest25 schema elementForm:	qualified
//gsoap contest25 schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_contest26	"http://schemas.microsoft.com/2003/10/Serialization/Arrays"
//gsoap contest26 schema namespace:	http://schemas.microsoft.com/2003/10/Serialization/Arrays
//gsoap contest26 schema elementForm:	qualified
//gsoap contest26 schema attributeForm:	unqualified
class xsd__anyType { _XML __item; struct soap *soap; };

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/// Primitive built-in type "xs:ID"
typedef std::string xsd__ID;

/// Class wrapper for built-in type "xs:ID" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__ID_ to check runtime type (see soapStub.h)
class xsd__ID_ : public xsd__anyType
{ public:
    xsd__ID                              __item;                       
};

/// Primitive built-in type "xs:IDREF"
typedef std::string xsd__IDREF;

/// Class wrapper for built-in type "xs:IDREF" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__IDREF_ to check runtime type (see soapStub.h)
class xsd__IDREF_ : public xsd__anyType
{ public:
    xsd__IDREF                           __item;                       
};

/// Built-in type "xs:QName".
typedef std::string xsd__QName;

/// Class wrapper for built-in type "xs:QName" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__QName_ to check runtime type (see soapStub.h)
class xsd__QName_ : public xsd__anyType
{ public:
    xsd__QName                           __item;                       
};

/// Primitive built-in type "xs:anyURI"
typedef std::string xsd__anyURI;

/// Class wrapper for built-in type "xs:anyURI" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__anyURI_ to check runtime type (see soapStub.h)
class xsd__anyURI_ : public xsd__anyType
{ public:
    xsd__anyURI                          __item;                       
};

/// Built-in type "xs:base64Binary".
class xsd__base64Binary
{	unsigned char *__ptr;
	int __size;
	char *id, *type, *options; // NOTE: for DIME and MTOM XOP attachments only
	struct soap *soap;
};

/// Class wrapper for built-in type "xs:base64Binary" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__base64Binary_ to check runtime type (see soapStub.h)
class xsd__base64Binary_ : public xsd__anyType
{ public:
    xsd__base64Binary                    __item;                       
};

/// Class wrapper for built-in type "xs:boolean" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__boolean to check runtime type (see soapStub.h)
class xsd__boolean : public xsd__anyType
{ public:
    bool                                 __item;                       
};

/// Built-in type "xs:byte".
typedef char xsd__byte;

/// Class wrapper for built-in type "xs:byte" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__byte_ to check runtime type (see soapStub.h)
class xsd__byte_ : public xsd__anyType
{ public:
    xsd__byte                            __item;                       
};

/// Class wrapper for built-in type "xs:dateTime" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__dateTime to check runtime type (see soapStub.h)
class xsd__dateTime : public xsd__anyType
{ public:
    time_t                               __item;                       
};

/// Primitive built-in type "xs:decimal"
typedef std::string xsd__decimal;

/// Class wrapper for built-in type "xs:decimal" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__decimal_ to check runtime type (see soapStub.h)
class xsd__decimal_ : public xsd__anyType
{ public:
    xsd__decimal                         __item;                       
};

/// Class wrapper for built-in type "xs:double" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__double to check runtime type (see soapStub.h)
class xsd__double : public xsd__anyType
{ public:
    double                               __item;                       
};

/// Primitive built-in type "xs:duration"
typedef std::string xsd__duration;

/// Class wrapper for built-in type "xs:duration" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__duration_ to check runtime type (see soapStub.h)
class xsd__duration_ : public xsd__anyType
{ public:
    xsd__duration                        __item;                       
};

/// Class wrapper for built-in type "xs:float" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__float to check runtime type (see soapStub.h)
class xsd__float : public xsd__anyType
{ public:
    float                                __item;                       
};

/// Class wrapper for built-in type "xs:int" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__int to check runtime type (see soapStub.h)
class xsd__int : public xsd__anyType
{ public:
    int                                  __item;                       
};

/// Class wrapper for built-in type "xs:long" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__long to check runtime type (see soapStub.h)
class xsd__long : public xsd__anyType
{ public:
    LONG64                               __item;                       
};

/// Class wrapper for built-in type "xs:short" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__short to check runtime type (see soapStub.h)
class xsd__short : public xsd__anyType
{ public:
    short                                __item;                       
};

/// Class wrapper for built-in type "xs:string" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__string to check runtime type (see soapStub.h)
class xsd__string : public xsd__anyType
{ public:
    std::string                          __item;                       
};

/// Built-in type "xs:unsignedByte".
typedef unsigned char xsd__unsignedByte;

/// Class wrapper for built-in type "xs:unsignedByte" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__unsignedByte_ to check runtime type (see soapStub.h)
class xsd__unsignedByte_ : public xsd__anyType
{ public:
    xsd__unsignedByte                    __item;                       
};

/// Class wrapper for built-in type "xs:unsignedInt" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__unsignedInt to check runtime type (see soapStub.h)
class xsd__unsignedInt : public xsd__anyType
{ public:
    unsigned int                         __item;                       
};

/// Class wrapper for built-in type "xs:unsignedLong" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__unsignedLong to check runtime type (see soapStub.h)
class xsd__unsignedLong : public xsd__anyType
{ public:
    ULONG64                              __item;                       
};

/// Class wrapper for built-in type "xs:unsignedShort" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__unsignedShort to check runtime type (see soapStub.h)
class xsd__unsignedShort : public xsd__anyType
{ public:
    unsigned short                       __item;                       
};

/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class _contest23__GetSessionId.
class _contest23__GetSessionId;

//  Forward declaration of class _contest23__GetSessionIdResponse.
class _contest23__GetSessionIdResponse;

//  Forward declaration of class _contest23__addAndGetQsos.
class _contest23__addAndGetQsos;

//  Forward declaration of class _contest23__addAndGetQsosResponse.
class _contest23__addAndGetQsosResponse;

//  Forward declaration of class _contest23__AddAndGetLogSummary.
class _contest23__AddAndGetLogSummary;

//  Forward declaration of class _contest23__AddAndGetLogSummaryResponse.
class _contest23__AddAndGetLogSummaryResponse;

//  Forward declaration of class _contest23__getQsosByKeyArray.
class _contest23__getQsosByKeyArray;

//  Forward declaration of class _contest23__getQsosByKeyArrayResponse.
class _contest23__getQsosByKeyArrayResponse;

//  Forward declaration of class _contest23__ColumnNamesToIndices.
class _contest23__ColumnNamesToIndices;

//  Forward declaration of class _contest23__ColumnNamesToIndicesResponse.
class _contest23__ColumnNamesToIndicesResponse;

//  Forward declaration of class _contest23__ExchangeFrequencies.
class _contest23__ExchangeFrequencies;

//  Forward declaration of class _contest23__ExchangeFrequenciesResponse.
class _contest23__ExchangeFrequenciesResponse;

//  Forward declaration of class contest25__ArrayOfQso.
class contest25__ArrayOfQso;

//  Forward declaration of class contest25__Qso.
class contest25__Qso;

//  Forward declaration of class contest25__QsoUpdate.
class contest25__QsoUpdate;

//  Forward declaration of class contest25__LogSummary.
class contest25__LogSummary;

//  Forward declaration of class contest25__ArrayOfQsoIdVersion.
class contest25__ArrayOfQsoIdVersion;

//  Forward declaration of class contest25__QsoIdVersion.
class contest25__QsoIdVersion;

//  Forward declaration of class contest25__ArrayOfRigFrequency.
class contest25__ArrayOfRigFrequency;

//  Forward declaration of class contest25__RigFrequency.
class contest25__RigFrequency;

//  Forward declaration of class contest26__ArrayOfstring.
class contest26__ArrayOfstring;

//  Forward declaration of class contest26__ArrayOfint.
class contest26__ArrayOfint;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:ContestQsos2/Imports                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:ContestQsos2                                                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.microsoft.com/2003/10/Serialization/                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.datacontract.org/2004/07/ContestQsos                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.microsoft.com/2003/10/Serialization/Arrays                *
 *                                                                            *
\******************************************************************************/


/// "http://schemas.microsoft.com/2003/10/Serialization/":char is a simpleType restriction of xs:int.
typedef int contest24__char;

/// Class wrapper
class contest24__char__ : public xsd__anyType
{ public:
    contest24__char                      __item;                       
};

/// "http://schemas.microsoft.com/2003/10/Serialization/":duration is a simpleType restriction of xs:duration.
/// Content pattern is "\\-?P(\\d*D)?(T(\\d*H)?(\\d*M)?(\\d*(\\.\\d*)?S)?)?" (note: not automatically enforced)
/// Value range is [-P10675199DT2H48M5.4775808S..P10675199DT2H48M5.4775807S]
typedef xsd__duration contest24__duration "\\-?P(\\d*D)?(T(\\d*H)?(\\d*M)?(\\d*(\\.\\d*)?S)?)?";

/// Class wrapper
class contest24__duration__ : public xsd__anyType
{ public:
    contest24__duration                  __item;                       
};

/// "http://schemas.microsoft.com/2003/10/Serialization/":guid is a simpleType restriction of xs:string.
/// Content pattern is "[\\da-fA-F]{8}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{12}" (note: not automatically enforced)
typedef std::string contest24__guid "[\\da-fA-F]{8}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{12}";

/// Class wrapper
class contest24__guid__ : public xsd__anyType
{ public:
    contest24__guid                      __item;                       
};

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.datacontract.org/2004/07/ContestQsos                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.microsoft.com/2003/10/Serialization/Arrays                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   urn:ContestQsos2/Imports                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   urn:ContestQsos2                                                         *
 *                                                                            *
\******************************************************************************/



/// Top-level root element "urn:ContestQsos2":GetSessionId

/// "urn:ContestQsos2":GetSessionId is a complexType.
class _contest23__GetSessionId
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "urn:ContestQsos2":GetSessionIdResponse

/// "urn:ContestQsos2":GetSessionIdResponse is a complexType.
class _contest23__GetSessionIdResponse
{ public:
/// Element GetSessionIdResult of type xs:string.
    std::string                         GetSessionIdResult             1;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "urn:ContestQsos2":addAndGetQsos

/// "urn:ContestQsos2":addAndGetQsos is a complexType.
class _contest23__addAndGetQsos
{ public:
/// Element SessionId of type xs:string.
    std::string                         SessionId                      1;	///< Nullable pointer.
/// Element QsoAddArray of type "http://schemas.datacontract.org/2004/07/ContestQsos":ArrayOfQso.
    contest25__ArrayOfQso*               QsoAddArray                    1;	///< Nullable pointer.
/// Element OldState of type xs:int.
    int                                 OldState                       1;	///< Optional element.
/// Element MaxRequested of type xs:int.
    int                                 MaxRequested                   1;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "urn:ContestQsos2":addAndGetQsosResponse

/// "urn:ContestQsos2":addAndGetQsosResponse is a complexType.
class _contest23__addAndGetQsosResponse
{ public:
/// Element addAndGetQsosResult of type "http://schemas.datacontract.org/2004/07/ContestQsos":QsoUpdate.
    contest25__QsoUpdate*                addAndGetQsosResult            1;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "urn:ContestQsos2":AddAndGetLogSummary

/// "urn:ContestQsos2":AddAndGetLogSummary is a complexType.
class _contest23__AddAndGetLogSummary
{ public:
/// Element SessionId of type xs:string.
    std::string                         SessionId                      1;	///< Nullable pointer.
/// Element QsoAddArray of type "http://schemas.datacontract.org/2004/07/ContestQsos":ArrayOfQso.
    contest25__ArrayOfQso*               QsoAddArray                    1;	///< Nullable pointer.
/// Element OldState of type xs:int.
    int                                 OldState                       1;	///< Optional element.
/// Element MaxRequested of type xs:int.
    int                                 MaxRequested                   1;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "urn:ContestQsos2":AddAndGetLogSummaryResponse

/// "urn:ContestQsos2":AddAndGetLogSummaryResponse is a complexType.
class _contest23__AddAndGetLogSummaryResponse
{ public:
/// Element AddAndGetLogSummaryResult of type "http://schemas.datacontract.org/2004/07/ContestQsos":LogSummary.
    contest25__LogSummary*               AddAndGetLogSummaryResult      1;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "urn:ContestQsos2":getQsosByKeyArray

/// "urn:ContestQsos2":getQsosByKeyArray is a complexType.
class _contest23__getQsosByKeyArray
{ public:
/// Element SessionId of type xs:string.
    std::string                         SessionId                      1;	///< Nullable pointer.
/// Element QsoKeyArray of type "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfstring.
    contest26__ArrayOfstring*            QsoKeyArray                    1;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "urn:ContestQsos2":getQsosByKeyArrayResponse

/// "urn:ContestQsos2":getQsosByKeyArrayResponse is a complexType.
class _contest23__getQsosByKeyArrayResponse
{ public:
/// Element getQsosByKeyArrayResult of type "http://schemas.datacontract.org/2004/07/ContestQsos":QsoUpdate.
    contest25__QsoUpdate*                getQsosByKeyArrayResult        1;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "urn:ContestQsos2":ColumnNamesToIndices

/// "urn:ContestQsos2":ColumnNamesToIndices is a complexType.
class _contest23__ColumnNamesToIndices
{ public:
/// Element SessionId of type xs:string.
    std::string                         SessionId                      1;	///< Nullable pointer.
/// Element ColumnNames of type "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfstring.
    contest26__ArrayOfstring*            ColumnNames                    1;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "urn:ContestQsos2":ColumnNamesToIndicesResponse

/// "urn:ContestQsos2":ColumnNamesToIndicesResponse is a complexType.
class _contest23__ColumnNamesToIndicesResponse
{ public:
/// Element ColumnNamesToIndicesResult of type "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfint.
    contest26__ArrayOfint*               ColumnNamesToIndicesResult     1;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "urn:ContestQsos2":ExchangeFrequencies

/// "urn:ContestQsos2":ExchangeFrequencies is a complexType.
class _contest23__ExchangeFrequencies
{ public:
/// Element IncomingFreqs of type "http://schemas.datacontract.org/2004/07/ContestQsos":ArrayOfRigFrequency.
    contest25__ArrayOfRigFrequency*      IncomingFreqs                  1;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "urn:ContestQsos2":ExchangeFrequenciesResponse

/// "urn:ContestQsos2":ExchangeFrequenciesResponse is a complexType.
class _contest23__ExchangeFrequenciesResponse
{ public:
/// Element ExchangeFrequenciesResult of type "http://schemas.datacontract.org/2004/07/ContestQsos":ArrayOfRigFrequency.
    contest25__ArrayOfRigFrequency*      ExchangeFrequenciesResult      1;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://schemas.microsoft.com/2003/10/Serialization/                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://schemas.datacontract.org/2004/07/ContestQsos                      *
 *                                                                            *
\******************************************************************************/


/// "http://schemas.datacontract.org/2004/07/ContestQsos":ArrayOfQso is a complexType.
class contest25__ArrayOfQso : public xsd__anyType
{ public:
/// Vector of contest25__Qso* with length 0..unbounded
    std::vector<contest25__Qso*        > Qso                            1;
};

/// "http://schemas.datacontract.org/2004/07/ContestQsos":Qso is a complexType.
class contest25__Qso : public xsd__anyType
{ public:
/// Element band of type xs:int.
    int                                 band                           1;	///< Optional element.
/// Element dupe of type xs:int.
    int                                 dupe                           1;	///< Optional element.
/// Element idKey of type xs:string.
    std::string                         idKey                          1;	///< Nullable pointer.
/// Element mode of type xs:int.
    int                                 mode                           1;	///< Optional element.
/// Element qsoparts of type "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfstring.
    contest26__ArrayOfstring*            qsoparts                       1;	///< Nullable pointer.
/// Element recvFreq of type xs:double.
    double                              recvFreq                       1;	///< Optional element.
/// Element serial of type xs:int.
    int                                serial                         1;	///< Optional element.
/// Element station of type xs:string.
    std::string                         station                        1;	///< Nullable pointer.
/// Element time64H of type xs:int.
    int                                 time64H                        1;	///< Optional element.
/// Element time64L of type xs:int.
    int                                 time64L                        1;	///< Optional element.
/// Element updatedBy of type xs:string.
    std::string                         updatedBy                      1;	///< Nullable pointer.
/// Element version of type xs:int.
    int                                 version                        1;	///< Optional element.
/// Element xmitFreq of type xs:double.
    double                              xmitFreq                       1;	///< Optional element.
};

/// "http://schemas.datacontract.org/2004/07/ContestQsos":QsoUpdate is a complexType.
class contest25__QsoUpdate : public xsd__anyType
{ public:
/// Element logState of type xs:int.
    int                                 logState                       1;	///< Optional element.
/// Element qsoArray of type "http://schemas.datacontract.org/2004/07/ContestQsos":ArrayOfQso.
    contest25__ArrayOfQso*               qsoArray                       1;	///< Nullable pointer.
};

/// "http://schemas.datacontract.org/2004/07/ContestQsos":LogSummary is a complexType.
class contest25__LogSummary : public xsd__anyType
{ public:
/// Element logState of type xs:int.
    int                                 logState                       1;	///< Optional element.
/// Element logSummaryIds of type "http://schemas.datacontract.org/2004/07/ContestQsos":ArrayOfQsoIdVersion.
    contest25__ArrayOfQsoIdVersion*      logSummaryIds                  1;	///< Nullable pointer.
};

/// "http://schemas.datacontract.org/2004/07/ContestQsos":ArrayOfQsoIdVersion is a complexType.
class contest25__ArrayOfQsoIdVersion : public xsd__anyType
{ public:
/// Vector of contest25__QsoIdVersion* with length 0..unbounded
    std::vector<contest25__QsoIdVersion*> QsoIdVersion                   1;
};

/// "http://schemas.datacontract.org/2004/07/ContestQsos":QsoIdVersion is a complexType.
class contest25__QsoIdVersion : public xsd__anyType
{ public:
/// Element id of type xs:string.
    std::string                         id                             1;	///< Nullable pointer.
/// Element updatedBy of type xs:string.
    std::string                         updatedBy                      1;	///< Nullable pointer.
/// Element version of type xs:int.
    int                                 version                        1;	///< Optional element.
};

/// "http://schemas.datacontract.org/2004/07/ContestQsos":ArrayOfRigFrequency is a complexType.
class contest25__ArrayOfRigFrequency : public xsd__anyType
{ public:
/// Vector of contest25__RigFrequency* with length 0..unbounded
    std::vector<contest25__RigFrequency*> RigFrequency                   1;
};

/// "http://schemas.datacontract.org/2004/07/ContestQsos":RigFrequency is a complexType.
class contest25__RigFrequency : public xsd__anyType
{ public:
/// Element label of type xs:string.
    std::string                         label                          1;	///< Nullable pointer.
/// Element mode of type xs:int.
    int                                 mode                           1;	///< Optional element.
/// Element networkLetter of type xs:int.
    int                                 networkLetter                  1;	///< Optional element.
/// Element recvFreq of type xs:double.
    double                              recvFreq                       1;	///< Optional element.
/// Element rigNumber of type xs:int.
    int                                 rigNumber                      1;	///< Optional element.
/// Element station of type xs:string.
    std::string                         station                        1;	///< Nullable pointer.
/// Element xmitFreq of type xs:double.
    double                              xmitFreq                       1;	///< Optional element.
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://schemas.microsoft.com/2003/10/Serialization/Arrays                *
 *                                                                            *
\******************************************************************************/


/// "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfstring is a complexType.
class contest26__ArrayOfstring : public xsd__anyType
{ public:
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > string                         1;	///< Nullable pointer.
};

/// "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfint is a complexType.
class contest26__ArrayOfint : public xsd__anyType
{ public:
/// Vector of int with length 0..unbounded
    std::vector<int                    > int_                           1;
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   urn:ContestQsos2/Imports                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   urn:ContestQsos2/Imports                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   urn:ContestQsos2                                                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   urn:ContestQsos2                                                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://schemas.microsoft.com/2003/10/Serialization/                      *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":anyType of type xs:anyType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":anyURI of type xs:anyURI.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":base64Binary of type xs:base64Binary.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":boolean of type xs:boolean.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":byte of type xs:byte.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":dateTime of type xs:dateTime.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":decimal of type xs:decimal.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":double of type xs:double.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":float of type xs:float.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":int of type xs:int.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":long of type xs:long.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":QName of type xs:QName.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":short of type xs:short.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":string of type xs:string.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedByte of type xs:unsignedByte.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedInt of type xs:unsignedInt.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedLong of type xs:unsignedLong.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedShort of type xs:unsignedShort.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":char of type "http://schemas.microsoft.com/2003/10/Serialization/":char.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":duration of type "http://schemas.microsoft.com/2003/10/Serialization/":duration.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":guid of type "http://schemas.microsoft.com/2003/10/Serialization/":guid.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://schemas.microsoft.com/2003/10/Serialization/                      *
 *                                                                            *
\******************************************************************************/


/// Top-level attribute "http://schemas.microsoft.com/2003/10/Serialization/":FactoryType of simpleType xs:QName.
/// Note: use wsdl2h option -g to auto-generate a top-level attribute declaration and processing code.

/// Top-level attribute "http://schemas.microsoft.com/2003/10/Serialization/":Id of simpleType xs:ID.
/// Note: use wsdl2h option -g to auto-generate a top-level attribute declaration and processing code.

/// Top-level attribute "http://schemas.microsoft.com/2003/10/Serialization/":Ref of simpleType xs:IDREF.
/// Note: use wsdl2h option -g to auto-generate a top-level attribute declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://schemas.datacontract.org/2004/07/ContestQsos                      *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://schemas.datacontract.org/2004/07/ContestQsos":ArrayOfQso of type "http://schemas.datacontract.org/2004/07/ContestQsos":ArrayOfQso.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.datacontract.org/2004/07/ContestQsos":Qso of type "http://schemas.datacontract.org/2004/07/ContestQsos":Qso.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.datacontract.org/2004/07/ContestQsos":QsoUpdate of type "http://schemas.datacontract.org/2004/07/ContestQsos":QsoUpdate.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.datacontract.org/2004/07/ContestQsos":LogSummary of type "http://schemas.datacontract.org/2004/07/ContestQsos":LogSummary.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.datacontract.org/2004/07/ContestQsos":ArrayOfQsoIdVersion of type "http://schemas.datacontract.org/2004/07/ContestQsos":ArrayOfQsoIdVersion.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.datacontract.org/2004/07/ContestQsos":QsoIdVersion of type "http://schemas.datacontract.org/2004/07/ContestQsos":QsoIdVersion.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.datacontract.org/2004/07/ContestQsos":ArrayOfRigFrequency of type "http://schemas.datacontract.org/2004/07/ContestQsos":ArrayOfRigFrequency.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.datacontract.org/2004/07/ContestQsos":RigFrequency of type "http://schemas.datacontract.org/2004/07/ContestQsos":RigFrequency.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://schemas.datacontract.org/2004/07/ContestQsos                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://schemas.microsoft.com/2003/10/Serialization/Arrays                *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfstring of type "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfstring.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfint of type "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfint.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://schemas.microsoft.com/2003/10/Serialization/Arrays                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap contest21 service name:	BasicHttpBinding_USCOREIContestQsos 
//gsoap contest21 service type:	IContestQsos 
//gsoap contest21 service port:	http://localhost:8002/ContestQsos/service/ep1 
//gsoap contest21 service namespace:	http://tempuri.org/ 
//gsoap contest21 service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage ContestQsos_Service Definitions

@section ContestQsos_USCOREService_bindings Service Bindings
  - @ref BasicHttpBinding_USCOREIContestQsos

@section ContestQsos_USCOREService_more More Information
- @ref page_notes "Notes"
- @ref page_XMLDataBinding "XML Data Binding"
- @ref SOAP_ENV__Header "SOAP Header Content"
- @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page BasicHttpBinding_USCOREIContestQsos Binding "BasicHttpBinding_USCOREIContestQsos"

@section BasicHttpBinding_USCOREIContestQsos_operations Operations of Binding  "BasicHttpBinding_USCOREIContestQsos"
  - @ref __contest21__GetSessionId
  - @ref __contest21__addAndGetQsos
  - @ref __contest21__AddAndGetLogSummary
  - @ref __contest21__getQsosByKeyArray
  - @ref __contest21__ColumnNamesToIndices
  - @ref __contest21__ExchangeFrequencies

@section BasicHttpBinding_USCOREIContestQsos_ports Endpoints of Binding  "BasicHttpBinding_USCOREIContestQsos"
  - http://localhost:8002/ContestQsos/service/ep1

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   BasicHttpBinding_USCOREIContestQsos                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __contest21__GetSessionId                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__contest21__GetSessionId" of service binding "BasicHttpBinding_USCOREIContestQsos"

/**

Operation details:

  - SOAP document/literal style
  - SOAP action="urn:ContestQsos2/IContestQsos/GetSessionId"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___contest21__GetSessionId(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _contest23__GetSessionId*           contest23__GetSessionId,
    // response parameters:
    _contest23__GetSessionIdResponse*   contest23__GetSessionIdResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __contest21__GetSessionId(
    struct soap *soap,
    // request parameters:
    _contest23__GetSessionId*           contest23__GetSessionId,
    // response parameters:
    _contest23__GetSessionIdResponse*   contest23__GetSessionIdResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIContestQsosProxy.h):
@code
  class BasicHttpBinding_USCOREIContestQsosProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIContestQsosService.h):
@code
  class BasicHttpBinding_USCOREIContestQsosService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap contest21 service method-style:	GetSessionId document
//gsoap contest21 service method-encoding:	GetSessionId literal
//gsoap contest21 service method-action:	GetSessionId urn:ContestQsos2/IContestQsos/GetSessionId
int __contest21__GetSessionId(
    _contest23__GetSessionId*           contest23__GetSessionId,	///< Request parameter
    _contest23__GetSessionIdResponse*   contest23__GetSessionIdResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __contest21__addAndGetQsos                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__contest21__addAndGetQsos" of service binding "BasicHttpBinding_USCOREIContestQsos"

/**

Operation details:

  - SOAP document/literal style
  - SOAP action="urn:ContestQsos2/IContestQsos/addAndGetQsos"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___contest21__addAndGetQsos(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _contest23__addAndGetQsos*          contest23__addAndGetQsos,
    // response parameters:
    _contest23__addAndGetQsosResponse*  contest23__addAndGetQsosResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __contest21__addAndGetQsos(
    struct soap *soap,
    // request parameters:
    _contest23__addAndGetQsos*          contest23__addAndGetQsos,
    // response parameters:
    _contest23__addAndGetQsosResponse*  contest23__addAndGetQsosResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIContestQsosProxy.h):
@code
  class BasicHttpBinding_USCOREIContestQsosProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIContestQsosService.h):
@code
  class BasicHttpBinding_USCOREIContestQsosService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap contest21 service method-style:	addAndGetQsos document
//gsoap contest21 service method-encoding:	addAndGetQsos literal
//gsoap contest21 service method-action:	addAndGetQsos urn:ContestQsos2/IContestQsos/addAndGetQsos
int __contest21__addAndGetQsos(
    _contest23__addAndGetQsos*          contest23__addAndGetQsos,	///< Request parameter
    _contest23__addAndGetQsosResponse*  contest23__addAndGetQsosResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __contest21__AddAndGetLogSummary                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__contest21__AddAndGetLogSummary" of service binding "BasicHttpBinding_USCOREIContestQsos"

/**

Operation details:

  - SOAP document/literal style
  - SOAP action="urn:ContestQsos2/IContestQsos/AddAndGetLogSummary"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___contest21__AddAndGetLogSummary(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _contest23__AddAndGetLogSummary*    contest23__AddAndGetLogSummary,
    // response parameters:
    _contest23__AddAndGetLogSummaryResponse* contest23__AddAndGetLogSummaryResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __contest21__AddAndGetLogSummary(
    struct soap *soap,
    // request parameters:
    _contest23__AddAndGetLogSummary*    contest23__AddAndGetLogSummary,
    // response parameters:
    _contest23__AddAndGetLogSummaryResponse* contest23__AddAndGetLogSummaryResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIContestQsosProxy.h):
@code
  class BasicHttpBinding_USCOREIContestQsosProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIContestQsosService.h):
@code
  class BasicHttpBinding_USCOREIContestQsosService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap contest21 service method-style:	AddAndGetLogSummary document
//gsoap contest21 service method-encoding:	AddAndGetLogSummary literal
//gsoap contest21 service method-action:	AddAndGetLogSummary urn:ContestQsos2/IContestQsos/AddAndGetLogSummary
int __contest21__AddAndGetLogSummary(
    _contest23__AddAndGetLogSummary*    contest23__AddAndGetLogSummary,	///< Request parameter
    _contest23__AddAndGetLogSummaryResponse* contest23__AddAndGetLogSummaryResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __contest21__getQsosByKeyArray                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__contest21__getQsosByKeyArray" of service binding "BasicHttpBinding_USCOREIContestQsos"

/**

Operation details:

  - SOAP document/literal style
  - SOAP action="urn:ContestQsos2/IContestQsos/getQsosByKeyArray"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___contest21__getQsosByKeyArray(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _contest23__getQsosByKeyArray*      contest23__getQsosByKeyArray,
    // response parameters:
    _contest23__getQsosByKeyArrayResponse* contest23__getQsosByKeyArrayResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __contest21__getQsosByKeyArray(
    struct soap *soap,
    // request parameters:
    _contest23__getQsosByKeyArray*      contest23__getQsosByKeyArray,
    // response parameters:
    _contest23__getQsosByKeyArrayResponse* contest23__getQsosByKeyArrayResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIContestQsosProxy.h):
@code
  class BasicHttpBinding_USCOREIContestQsosProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIContestQsosService.h):
@code
  class BasicHttpBinding_USCOREIContestQsosService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap contest21 service method-style:	getQsosByKeyArray document
//gsoap contest21 service method-encoding:	getQsosByKeyArray literal
//gsoap contest21 service method-action:	getQsosByKeyArray urn:ContestQsos2/IContestQsos/getQsosByKeyArray
int __contest21__getQsosByKeyArray(
    _contest23__getQsosByKeyArray*      contest23__getQsosByKeyArray,	///< Request parameter
    _contest23__getQsosByKeyArrayResponse* contest23__getQsosByKeyArrayResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __contest21__ColumnNamesToIndices                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__contest21__ColumnNamesToIndices" of service binding "BasicHttpBinding_USCOREIContestQsos"

/**

Operation details:

  - SOAP document/literal style
  - SOAP action="urn:ContestQsos2/IContestQsos/ColumnNamesToIndices"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___contest21__ColumnNamesToIndices(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _contest23__ColumnNamesToIndices*   contest23__ColumnNamesToIndices,
    // response parameters:
    _contest23__ColumnNamesToIndicesResponse* contest23__ColumnNamesToIndicesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __contest21__ColumnNamesToIndices(
    struct soap *soap,
    // request parameters:
    _contest23__ColumnNamesToIndices*   contest23__ColumnNamesToIndices,
    // response parameters:
    _contest23__ColumnNamesToIndicesResponse* contest23__ColumnNamesToIndicesResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIContestQsosProxy.h):
@code
  class BasicHttpBinding_USCOREIContestQsosProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIContestQsosService.h):
@code
  class BasicHttpBinding_USCOREIContestQsosService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap contest21 service method-style:	ColumnNamesToIndices document
//gsoap contest21 service method-encoding:	ColumnNamesToIndices literal
//gsoap contest21 service method-action:	ColumnNamesToIndices urn:ContestQsos2/IContestQsos/ColumnNamesToIndices
int __contest21__ColumnNamesToIndices(
    _contest23__ColumnNamesToIndices*   contest23__ColumnNamesToIndices,	///< Request parameter
    _contest23__ColumnNamesToIndicesResponse* contest23__ColumnNamesToIndicesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __contest21__ExchangeFrequencies                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__contest21__ExchangeFrequencies" of service binding "BasicHttpBinding_USCOREIContestQsos"

/**

Operation details:

  - SOAP document/literal style
  - SOAP action="urn:ContestQsos2/IContestQsos/ExchangeFrequencies"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___contest21__ExchangeFrequencies(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _contest23__ExchangeFrequencies*    contest23__ExchangeFrequencies,
    // response parameters:
    _contest23__ExchangeFrequenciesResponse* contest23__ExchangeFrequenciesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __contest21__ExchangeFrequencies(
    struct soap *soap,
    // request parameters:
    _contest23__ExchangeFrequencies*    contest23__ExchangeFrequencies,
    // response parameters:
    _contest23__ExchangeFrequenciesResponse* contest23__ExchangeFrequenciesResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIContestQsosProxy.h):
@code
  class BasicHttpBinding_USCOREIContestQsosProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIContestQsosService.h):
@code
  class BasicHttpBinding_USCOREIContestQsosService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap contest21 service method-style:	ExchangeFrequencies document
//gsoap contest21 service method-encoding:	ExchangeFrequencies literal
//gsoap contest21 service method-action:	ExchangeFrequencies urn:ContestQsos2/IContestQsos/ExchangeFrequencies
int __contest21__ExchangeFrequencies(
    _contest23__ExchangeFrequencies*    contest23__ExchangeFrequencies,	///< Request parameter
    _contest23__ExchangeFrequenciesResponse* contest23__ExchangeFrequenciesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings are adopted from XML schemas as part of the WSDL types section or when running wsdl2h on a set of schemas.

The following readers and writers are C/C++ data type (de)serializers auto-generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the (de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in your code to import these data type and function declarations. Only use the soapcpp2-generated files in your project build. Do not include the wsdl2h-generated .h file in your code.

XML content can be retrieved from:
  - a FILE* fd, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a FILE* fd, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section contest22 Top-level root elements of schema "urn:ContestQsos2/Imports"

@section contest23 Top-level root elements of schema "urn:ContestQsos2"

  - <contest23:GetSessionId> @ref _contest23__GetSessionId
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__contest23__GetSessionId(struct soap*, _contest23__GetSessionId*);
    // Writer (returns SOAP_OK on success):
    soap_write__contest23__GetSessionId(struct soap*, _contest23__GetSessionId*);
    @endcode

  - <contest23:GetSessionIdResponse> @ref _contest23__GetSessionIdResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__contest23__GetSessionIdResponse(struct soap*, _contest23__GetSessionIdResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__contest23__GetSessionIdResponse(struct soap*, _contest23__GetSessionIdResponse*);
    @endcode

  - <contest23:addAndGetQsos> @ref _contest23__addAndGetQsos
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__contest23__addAndGetQsos(struct soap*, _contest23__addAndGetQsos*);
    // Writer (returns SOAP_OK on success):
    soap_write__contest23__addAndGetQsos(struct soap*, _contest23__addAndGetQsos*);
    @endcode

  - <contest23:addAndGetQsosResponse> @ref _contest23__addAndGetQsosResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__contest23__addAndGetQsosResponse(struct soap*, _contest23__addAndGetQsosResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__contest23__addAndGetQsosResponse(struct soap*, _contest23__addAndGetQsosResponse*);
    @endcode

  - <contest23:AddAndGetLogSummary> @ref _contest23__AddAndGetLogSummary
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__contest23__AddAndGetLogSummary(struct soap*, _contest23__AddAndGetLogSummary*);
    // Writer (returns SOAP_OK on success):
    soap_write__contest23__AddAndGetLogSummary(struct soap*, _contest23__AddAndGetLogSummary*);
    @endcode

  - <contest23:AddAndGetLogSummaryResponse> @ref _contest23__AddAndGetLogSummaryResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__contest23__AddAndGetLogSummaryResponse(struct soap*, _contest23__AddAndGetLogSummaryResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__contest23__AddAndGetLogSummaryResponse(struct soap*, _contest23__AddAndGetLogSummaryResponse*);
    @endcode

  - <contest23:getQsosByKeyArray> @ref _contest23__getQsosByKeyArray
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__contest23__getQsosByKeyArray(struct soap*, _contest23__getQsosByKeyArray*);
    // Writer (returns SOAP_OK on success):
    soap_write__contest23__getQsosByKeyArray(struct soap*, _contest23__getQsosByKeyArray*);
    @endcode

  - <contest23:getQsosByKeyArrayResponse> @ref _contest23__getQsosByKeyArrayResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__contest23__getQsosByKeyArrayResponse(struct soap*, _contest23__getQsosByKeyArrayResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__contest23__getQsosByKeyArrayResponse(struct soap*, _contest23__getQsosByKeyArrayResponse*);
    @endcode

  - <contest23:ColumnNamesToIndices> @ref _contest23__ColumnNamesToIndices
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__contest23__ColumnNamesToIndices(struct soap*, _contest23__ColumnNamesToIndices*);
    // Writer (returns SOAP_OK on success):
    soap_write__contest23__ColumnNamesToIndices(struct soap*, _contest23__ColumnNamesToIndices*);
    @endcode

  - <contest23:ColumnNamesToIndicesResponse> @ref _contest23__ColumnNamesToIndicesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__contest23__ColumnNamesToIndicesResponse(struct soap*, _contest23__ColumnNamesToIndicesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__contest23__ColumnNamesToIndicesResponse(struct soap*, _contest23__ColumnNamesToIndicesResponse*);
    @endcode

  - <contest23:ExchangeFrequencies> @ref _contest23__ExchangeFrequencies
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__contest23__ExchangeFrequencies(struct soap*, _contest23__ExchangeFrequencies*);
    // Writer (returns SOAP_OK on success):
    soap_write__contest23__ExchangeFrequencies(struct soap*, _contest23__ExchangeFrequencies*);
    @endcode

  - <contest23:ExchangeFrequenciesResponse> @ref _contest23__ExchangeFrequenciesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__contest23__ExchangeFrequenciesResponse(struct soap*, _contest23__ExchangeFrequenciesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__contest23__ExchangeFrequenciesResponse(struct soap*, _contest23__ExchangeFrequenciesResponse*);
    @endcode

@section contest24 Top-level root elements of schema "http://schemas.microsoft.com/2003/10/Serialization/"

  - <contest24:anyType> (use wsdl2h option -g to auto-generate)

  - <contest24:anyURI> (use wsdl2h option -g to auto-generate)

  - <contest24:base64Binary> (use wsdl2h option -g to auto-generate)

  - <contest24:boolean> (use wsdl2h option -g to auto-generate)

  - <contest24:byte> (use wsdl2h option -g to auto-generate)

  - <contest24:dateTime> (use wsdl2h option -g to auto-generate)

  - <contest24:decimal> (use wsdl2h option -g to auto-generate)

  - <contest24:double> (use wsdl2h option -g to auto-generate)

  - <contest24:float> (use wsdl2h option -g to auto-generate)

  - <contest24:int> (use wsdl2h option -g to auto-generate)

  - <contest24:long> (use wsdl2h option -g to auto-generate)

  - <contest24:QName> (use wsdl2h option -g to auto-generate)

  - <contest24:short> (use wsdl2h option -g to auto-generate)

  - <contest24:string> (use wsdl2h option -g to auto-generate)

  - <contest24:unsignedByte> (use wsdl2h option -g to auto-generate)

  - <contest24:unsignedInt> (use wsdl2h option -g to auto-generate)

  - <contest24:unsignedLong> (use wsdl2h option -g to auto-generate)

  - <contest24:unsignedShort> (use wsdl2h option -g to auto-generate)

  - <contest24:char> (use wsdl2h option -g to auto-generate)

  - <contest24:duration> (use wsdl2h option -g to auto-generate)

  - <contest24:guid> (use wsdl2h option -g to auto-generate)

@section contest25 Top-level root elements of schema "http://schemas.datacontract.org/2004/07/ContestQsos"

  - <contest25:ArrayOfQso> (use wsdl2h option -g to auto-generate)

  - <contest25:Qso> (use wsdl2h option -g to auto-generate)

  - <contest25:QsoUpdate> (use wsdl2h option -g to auto-generate)

  - <contest25:LogSummary> (use wsdl2h option -g to auto-generate)

  - <contest25:ArrayOfQsoIdVersion> (use wsdl2h option -g to auto-generate)

  - <contest25:QsoIdVersion> (use wsdl2h option -g to auto-generate)

  - <contest25:ArrayOfRigFrequency> (use wsdl2h option -g to auto-generate)

  - <contest25:RigFrequency> (use wsdl2h option -g to auto-generate)

@section contest26 Top-level root elements of schema "http://schemas.microsoft.com/2003/10/Serialization/Arrays"

  - <contest26:ArrayOfstring> (use wsdl2h option -g to auto-generate)

  - <contest26:ArrayOfint> (use wsdl2h option -g to auto-generate)

*/

/* End of ContestQsos2.h */
